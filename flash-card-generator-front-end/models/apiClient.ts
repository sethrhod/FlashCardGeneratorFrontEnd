//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.4.0.0 (NJsonSchema v11.3.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class Client {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "";
    }

    /**
     * @return OK
     */
    getTestDecks(): Promise<OkObjectResult> {
        let url_ = this.baseUrl + "/Deck/GetTestDecks";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetTestDecks(_response);
        });
    }

    protected processGetTestDecks(response: Response): Promise<OkObjectResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OkObjectResult.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OkObjectResult>(null as any);
    }

    /**
     * @return OK
     */
    getDeckById(id: string): Promise<OkObjectResult> {
        let url_ = this.baseUrl + "/Deck/GetDeckById/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processGetDeckById(_response);
        });
    }

    protected processGetDeckById(response: Response): Promise<OkObjectResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = OkObjectResult.fromJS(resultData200);
            return result200;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<OkObjectResult>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Created
     */
    createDeck(body: GenerationRequest | undefined): Promise<CreatedAtActionResult> {
        let url_ = this.baseUrl + "/Deck/CreateDeck";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processCreateDeck(_response);
        });
    }

    protected processCreateDeck(response: Response): Promise<CreatedAtActionResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = CreatedAtActionResult.fromJS(resultData201);
            return result201;
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CreatedAtActionResult>(null as any);
    }

    /**
     * @param body (optional) 
     * @return Created
     */
    updateDeck(id: string, body: Deck | undefined): Promise<CreatedAtActionResult> {
        let url_ = this.baseUrl + "/Deck/UpdateDeck/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processUpdateDeck(_response);
        });
    }

    protected processUpdateDeck(response: Response): Promise<CreatedAtActionResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 201) {
            return response.text().then((_responseText) => {
            let result201: any = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = CreatedAtActionResult.fromJS(resultData201);
            return result201;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<CreatedAtActionResult>(null as any);
    }

    /**
     * @return No Content
     */
    deleteDeck(id: string): Promise<NoContentResult> {
        let url_ = this.baseUrl + "/Deck/DeleteDeck";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "text/plain"
            }
        };

        return this.http.fetch(url_, options_).then((_response: Response) => {
            return this.processDeleteDeck(_response);
        });
    }

    protected processDeleteDeck(response: Response): Promise<NoContentResult> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 204) {
            return response.text().then((_responseText) => {
            let result204: any = null;
            let resultData204 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result204 = NoContentResult.fromJS(resultData204);
            return result204;
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            let result404: any = null;
            let resultData404 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result404 = ProblemDetails.fromJS(resultData404);
            return throwException("Not Found", status, _responseText, _headers, result404);
            });
        } else if (status === 500) {
            return response.text().then((_responseText) => {
            let result500: any = null;
            let resultData500 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result500 = ProblemDetails.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<NoContentResult>(null as any);
    }
}

export class ActionContext implements IActionContext {
    actionDescriptor?: ActionDescriptor;
    httpContext?: HttpContext;
    readonly modelState?: { [key: string]: ModelStateEntry; } | undefined;
    routeData?: RouteData;

    constructor(data?: IActionContext) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.actionDescriptor = _data["actionDescriptor"] ? ActionDescriptor.fromJS(_data["actionDescriptor"]) : <any>undefined;
            this.httpContext = _data["httpContext"] ? HttpContext.fromJS(_data["httpContext"]) : <any>undefined;
            if (_data["modelState"]) {
                (<any>this).modelState = {} as any;
                for (let key in _data["modelState"]) {
                    if (_data["modelState"].hasOwnProperty(key))
                        (<any>(<any>this).modelState)![key] = _data["modelState"][key] ? ModelStateEntry.fromJS(_data["modelState"][key]) : new ModelStateEntry();
                }
            }
            this.routeData = _data["routeData"] ? RouteData.fromJS(_data["routeData"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ActionContext {
        data = typeof data === 'object' ? data : {};
        let result = new ActionContext();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["actionDescriptor"] = this.actionDescriptor ? this.actionDescriptor.toJSON() : <any>undefined;
        data["httpContext"] = this.httpContext ? this.httpContext.toJSON() : <any>undefined;
        if (this.modelState) {
            data["modelState"] = {};
            for (let key in this.modelState) {
                if (this.modelState.hasOwnProperty(key))
                    (<any>data["modelState"])[key] = this.modelState[key] ? this.modelState[key].toJSON() : <any>undefined;
            }
        }
        data["routeData"] = this.routeData ? this.routeData.toJSON() : <any>undefined;
        return data;
    }
}

export interface IActionContext {
    actionDescriptor?: ActionDescriptor;
    httpContext?: HttpContext;
    modelState?: { [key: string]: ModelStateEntry; } | undefined;
    routeData?: RouteData;
}

export class ActionContextBooleanFunc implements IActionContextBooleanFunc {
    readonly target?: any | undefined;
    method?: MethodInfo;

    constructor(data?: IActionContextBooleanFunc) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).target = _data["target"];
            this.method = _data["method"] ? MethodInfo.fromJS(_data["method"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ActionContextBooleanFunc {
        data = typeof data === 'object' ? data : {};
        let result = new ActionContextBooleanFunc();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["target"] = this.target;
        data["method"] = this.method ? this.method.toJSON() : <any>undefined;
        return data;
    }
}

export interface IActionContextBooleanFunc {
    target?: any | undefined;
    method?: MethodInfo;
}

export class ActionDescriptor implements IActionDescriptor {
    readonly id?: string | undefined;
    routeValues?: { [key: string]: string; } | undefined;
    attributeRouteInfo?: AttributeRouteInfo;
    actionConstraints?: IActionConstraintMetadata[] | undefined;
    endpointMetadata?: any[] | undefined;
    parameters?: ParameterDescriptor[] | undefined;
    boundProperties?: ParameterDescriptor[] | undefined;
    filterDescriptors?: FilterDescriptor[] | undefined;
    displayName?: string | undefined;
    properties?: { [key: string]: any; } | undefined;

    constructor(data?: IActionDescriptor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).id = _data["id"];
            if (_data["routeValues"]) {
                this.routeValues = {} as any;
                for (let key in _data["routeValues"]) {
                    if (_data["routeValues"].hasOwnProperty(key))
                        (<any>this.routeValues)![key] = _data["routeValues"][key];
                }
            }
            this.attributeRouteInfo = _data["attributeRouteInfo"] ? AttributeRouteInfo.fromJS(_data["attributeRouteInfo"]) : <any>undefined;
            if (Array.isArray(_data["actionConstraints"])) {
                this.actionConstraints = [] as any;
                for (let item of _data["actionConstraints"])
                    this.actionConstraints!.push(IActionConstraintMetadata.fromJS(item));
            }
            if (Array.isArray(_data["endpointMetadata"])) {
                this.endpointMetadata = [] as any;
                for (let item of _data["endpointMetadata"])
                    this.endpointMetadata!.push(item);
            }
            if (Array.isArray(_data["parameters"])) {
                this.parameters = [] as any;
                for (let item of _data["parameters"])
                    this.parameters!.push(ParameterDescriptor.fromJS(item));
            }
            if (Array.isArray(_data["boundProperties"])) {
                this.boundProperties = [] as any;
                for (let item of _data["boundProperties"])
                    this.boundProperties!.push(ParameterDescriptor.fromJS(item));
            }
            if (Array.isArray(_data["filterDescriptors"])) {
                this.filterDescriptors = [] as any;
                for (let item of _data["filterDescriptors"])
                    this.filterDescriptors!.push(FilterDescriptor.fromJS(item));
            }
            this.displayName = _data["displayName"];
            if (_data["properties"]) {
                this.properties = {} as any;
                for (let key in _data["properties"]) {
                    if (_data["properties"].hasOwnProperty(key))
                        (<any>this.properties)![key] = _data["properties"][key];
                }
            }
        }
    }

    static fromJS(data: any): ActionDescriptor {
        data = typeof data === 'object' ? data : {};
        let result = new ActionDescriptor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        if (this.routeValues) {
            data["routeValues"] = {};
            for (let key in this.routeValues) {
                if (this.routeValues.hasOwnProperty(key))
                    (<any>data["routeValues"])[key] = (<any>this.routeValues)[key];
            }
        }
        data["attributeRouteInfo"] = this.attributeRouteInfo ? this.attributeRouteInfo.toJSON() : <any>undefined;
        if (Array.isArray(this.actionConstraints)) {
            data["actionConstraints"] = [];
            for (let item of this.actionConstraints)
                data["actionConstraints"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.endpointMetadata)) {
            data["endpointMetadata"] = [];
            for (let item of this.endpointMetadata)
                data["endpointMetadata"].push(item);
        }
        if (Array.isArray(this.parameters)) {
            data["parameters"] = [];
            for (let item of this.parameters)
                data["parameters"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.boundProperties)) {
            data["boundProperties"] = [];
            for (let item of this.boundProperties)
                data["boundProperties"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.filterDescriptors)) {
            data["filterDescriptors"] = [];
            for (let item of this.filterDescriptors)
                data["filterDescriptors"].push(item ? item.toJSON() : <any>undefined);
        }
        data["displayName"] = this.displayName;
        if (this.properties) {
            data["properties"] = {};
            for (let key in this.properties) {
                if (this.properties.hasOwnProperty(key))
                    (<any>data["properties"])[key] = (<any>this.properties)[key];
            }
        }
        return data;
    }
}

export interface IActionDescriptor {
    id?: string | undefined;
    routeValues?: { [key: string]: string; } | undefined;
    attributeRouteInfo?: AttributeRouteInfo;
    actionConstraints?: IActionConstraintMetadata[] | undefined;
    endpointMetadata?: any[] | undefined;
    parameters?: ParameterDescriptor[] | undefined;
    boundProperties?: ParameterDescriptor[] | undefined;
    filterDescriptors?: FilterDescriptor[] | undefined;
    displayName?: string | undefined;
    properties?: { [key: string]: any; } | undefined;
}

export enum AddressFamily {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
    _7 = 7,
    _8 = 8,
    _9 = 9,
    _10 = 10,
    _11 = 11,
    _12 = 12,
    _13 = 13,
    _14 = 14,
    _15 = 15,
    _16 = 16,
    _17 = 17,
    _18 = 18,
    _19 = 19,
    _21 = 21,
    _22 = 22,
    _23 = 23,
    _24 = 24,
    _25 = 25,
    _26 = 26,
    _28 = 28,
    _29 = 29,
    _65536 = 65536,
    _65537 = 65537,
    __1 = -1,
}

export class AsnEncodedData implements IAsnEncodedData {
    oid?: Oid;
    rawData?: string | undefined;

    constructor(data?: IAsnEncodedData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.oid = _data["oid"] ? Oid.fromJS(_data["oid"]) : <any>undefined;
            this.rawData = _data["rawData"];
        }
    }

    static fromJS(data: any): AsnEncodedData {
        data = typeof data === 'object' ? data : {};
        let result = new AsnEncodedData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["oid"] = this.oid ? this.oid.toJSON() : <any>undefined;
        data["rawData"] = this.rawData;
        return data;
    }
}

export interface IAsnEncodedData {
    oid?: Oid;
    rawData?: string | undefined;
}

export class Assembly implements IAssembly {
    readonly definedTypes?: TypeInfo[] | undefined;
    readonly exportedTypes?: Type[] | undefined;
    readonly codeBase?: string | undefined;
    entryPoint?: MethodInfo;
    readonly fullName?: string | undefined;
    readonly imageRuntimeVersion?: string | undefined;
    readonly isDynamic?: boolean;
    readonly location?: string | undefined;
    readonly reflectionOnly?: boolean;
    readonly isCollectible?: boolean;
    readonly isFullyTrusted?: boolean;
    readonly customAttributes?: CustomAttributeData[] | undefined;
    readonly escapedCodeBase?: string | undefined;
    manifestModule?: Module;
    readonly modules?: Module[] | undefined;
    readonly globalAssemblyCache?: boolean;
    readonly hostContext?: number;
    securityRuleSet?: SecurityRuleSet;

    constructor(data?: IAssembly) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["definedTypes"])) {
                (<any>this).definedTypes = [] as any;
                for (let item of _data["definedTypes"])
                    (<any>this).definedTypes!.push(TypeInfo.fromJS(item));
            }
            if (Array.isArray(_data["exportedTypes"])) {
                (<any>this).exportedTypes = [] as any;
                for (let item of _data["exportedTypes"])
                    (<any>this).exportedTypes!.push(Type.fromJS(item));
            }
            (<any>this).codeBase = _data["codeBase"];
            this.entryPoint = _data["entryPoint"] ? MethodInfo.fromJS(_data["entryPoint"]) : <any>undefined;
            (<any>this).fullName = _data["fullName"];
            (<any>this).imageRuntimeVersion = _data["imageRuntimeVersion"];
            (<any>this).isDynamic = _data["isDynamic"];
            (<any>this).location = _data["location"];
            (<any>this).reflectionOnly = _data["reflectionOnly"];
            (<any>this).isCollectible = _data["isCollectible"];
            (<any>this).isFullyTrusted = _data["isFullyTrusted"];
            if (Array.isArray(_data["customAttributes"])) {
                (<any>this).customAttributes = [] as any;
                for (let item of _data["customAttributes"])
                    (<any>this).customAttributes!.push(CustomAttributeData.fromJS(item));
            }
            (<any>this).escapedCodeBase = _data["escapedCodeBase"];
            this.manifestModule = _data["manifestModule"] ? Module.fromJS(_data["manifestModule"]) : <any>undefined;
            if (Array.isArray(_data["modules"])) {
                (<any>this).modules = [] as any;
                for (let item of _data["modules"])
                    (<any>this).modules!.push(Module.fromJS(item));
            }
            (<any>this).globalAssemblyCache = _data["globalAssemblyCache"];
            (<any>this).hostContext = _data["hostContext"];
            this.securityRuleSet = _data["securityRuleSet"];
        }
    }

    static fromJS(data: any): Assembly {
        data = typeof data === 'object' ? data : {};
        let result = new Assembly();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.definedTypes)) {
            data["definedTypes"] = [];
            for (let item of this.definedTypes)
                data["definedTypes"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.exportedTypes)) {
            data["exportedTypes"] = [];
            for (let item of this.exportedTypes)
                data["exportedTypes"].push(item ? item.toJSON() : <any>undefined);
        }
        data["codeBase"] = this.codeBase;
        data["entryPoint"] = this.entryPoint ? this.entryPoint.toJSON() : <any>undefined;
        data["fullName"] = this.fullName;
        data["imageRuntimeVersion"] = this.imageRuntimeVersion;
        data["isDynamic"] = this.isDynamic;
        data["location"] = this.location;
        data["reflectionOnly"] = this.reflectionOnly;
        data["isCollectible"] = this.isCollectible;
        data["isFullyTrusted"] = this.isFullyTrusted;
        if (Array.isArray(this.customAttributes)) {
            data["customAttributes"] = [];
            for (let item of this.customAttributes)
                data["customAttributes"].push(item ? item.toJSON() : <any>undefined);
        }
        data["escapedCodeBase"] = this.escapedCodeBase;
        data["manifestModule"] = this.manifestModule ? this.manifestModule.toJSON() : <any>undefined;
        if (Array.isArray(this.modules)) {
            data["modules"] = [];
            for (let item of this.modules)
                data["modules"].push(item ? item.toJSON() : <any>undefined);
        }
        data["globalAssemblyCache"] = this.globalAssemblyCache;
        data["hostContext"] = this.hostContext;
        data["securityRuleSet"] = this.securityRuleSet;
        return data;
    }
}

export interface IAssembly {
    definedTypes?: TypeInfo[] | undefined;
    exportedTypes?: Type[] | undefined;
    codeBase?: string | undefined;
    entryPoint?: MethodInfo;
    fullName?: string | undefined;
    imageRuntimeVersion?: string | undefined;
    isDynamic?: boolean;
    location?: string | undefined;
    reflectionOnly?: boolean;
    isCollectible?: boolean;
    isFullyTrusted?: boolean;
    customAttributes?: CustomAttributeData[] | undefined;
    escapedCodeBase?: string | undefined;
    manifestModule?: Module;
    modules?: Module[] | undefined;
    globalAssemblyCache?: boolean;
    hostContext?: number;
    securityRuleSet?: SecurityRuleSet;
}

export class AsymmetricAlgorithm implements IAsymmetricAlgorithm {
    keySize?: number;
    readonly legalKeySizes?: KeySizes[] | undefined;
    readonly signatureAlgorithm?: string | undefined;
    readonly keyExchangeAlgorithm?: string | undefined;

    constructor(data?: IAsymmetricAlgorithm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.keySize = _data["keySize"];
            if (Array.isArray(_data["legalKeySizes"])) {
                (<any>this).legalKeySizes = [] as any;
                for (let item of _data["legalKeySizes"])
                    (<any>this).legalKeySizes!.push(KeySizes.fromJS(item));
            }
            (<any>this).signatureAlgorithm = _data["signatureAlgorithm"];
            (<any>this).keyExchangeAlgorithm = _data["keyExchangeAlgorithm"];
        }
    }

    static fromJS(data: any): AsymmetricAlgorithm {
        data = typeof data === 'object' ? data : {};
        let result = new AsymmetricAlgorithm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["keySize"] = this.keySize;
        if (Array.isArray(this.legalKeySizes)) {
            data["legalKeySizes"] = [];
            for (let item of this.legalKeySizes)
                data["legalKeySizes"].push(item ? item.toJSON() : <any>undefined);
        }
        data["signatureAlgorithm"] = this.signatureAlgorithm;
        data["keyExchangeAlgorithm"] = this.keyExchangeAlgorithm;
        return data;
    }
}

export interface IAsymmetricAlgorithm {
    keySize?: number;
    legalKeySizes?: KeySizes[] | undefined;
    signatureAlgorithm?: string | undefined;
    keyExchangeAlgorithm?: string | undefined;
}

export class AttributeRouteInfo implements IAttributeRouteInfo {
    template?: string | undefined;
    order?: number;
    name?: string | undefined;
    suppressLinkGeneration?: boolean;
    suppressPathMatching?: boolean;

    constructor(data?: IAttributeRouteInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.template = _data["template"];
            this.order = _data["order"];
            this.name = _data["name"];
            this.suppressLinkGeneration = _data["suppressLinkGeneration"];
            this.suppressPathMatching = _data["suppressPathMatching"];
        }
    }

    static fromJS(data: any): AttributeRouteInfo {
        data = typeof data === 'object' ? data : {};
        let result = new AttributeRouteInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["template"] = this.template;
        data["order"] = this.order;
        data["name"] = this.name;
        data["suppressLinkGeneration"] = this.suppressLinkGeneration;
        data["suppressPathMatching"] = this.suppressPathMatching;
        return data;
    }
}

export interface IAttributeRouteInfo {
    template?: string | undefined;
    order?: number;
    name?: string | undefined;
    suppressLinkGeneration?: boolean;
    suppressPathMatching?: boolean;
}

export class BackView implements IBackView {
    text!: string | undefined;
    language!: Language;
    region?: string | undefined;

    constructor(data?: IBackView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.language = new Language();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.text = _data["text"];
            this.language = _data["language"] ? Language.fromJS(_data["language"]) : new Language();
            this.region = _data["region"];
        }
    }

    static fromJS(data: any): BackView {
        data = typeof data === 'object' ? data : {};
        let result = new BackView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["text"] = this.text;
        data["language"] = this.language ? this.language.toJSON() : <any>undefined;
        data["region"] = this.region;
        return data;
    }
}

export interface IBackView {
    text: string | undefined;
    language: Language;
    region?: string | undefined;
}

export class BindingInfo implements IBindingInfo {
    bindingSource?: BindingSource;
    binderModelName?: string | undefined;
    binderType?: Type;
    propertyFilterProvider?: IPropertyFilterProvider;
    requestPredicate?: ActionContextBooleanFunc;
    emptyBodyBehavior?: EmptyBodyBehavior;
    serviceKey?: any | undefined;

    constructor(data?: IBindingInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.bindingSource = _data["bindingSource"] ? BindingSource.fromJS(_data["bindingSource"]) : <any>undefined;
            this.binderModelName = _data["binderModelName"];
            this.binderType = _data["binderType"] ? Type.fromJS(_data["binderType"]) : <any>undefined;
            this.propertyFilterProvider = _data["propertyFilterProvider"] ? IPropertyFilterProvider.fromJS(_data["propertyFilterProvider"]) : <any>undefined;
            this.requestPredicate = _data["requestPredicate"] ? ActionContextBooleanFunc.fromJS(_data["requestPredicate"]) : <any>undefined;
            this.emptyBodyBehavior = _data["emptyBodyBehavior"];
            this.serviceKey = _data["serviceKey"];
        }
    }

    static fromJS(data: any): BindingInfo {
        data = typeof data === 'object' ? data : {};
        let result = new BindingInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["bindingSource"] = this.bindingSource ? this.bindingSource.toJSON() : <any>undefined;
        data["binderModelName"] = this.binderModelName;
        data["binderType"] = this.binderType ? this.binderType.toJSON() : <any>undefined;
        data["propertyFilterProvider"] = this.propertyFilterProvider ? this.propertyFilterProvider.toJSON() : <any>undefined;
        data["requestPredicate"] = this.requestPredicate ? this.requestPredicate.toJSON() : <any>undefined;
        data["emptyBodyBehavior"] = this.emptyBodyBehavior;
        data["serviceKey"] = this.serviceKey;
        return data;
    }
}

export interface IBindingInfo {
    bindingSource?: BindingSource;
    binderModelName?: string | undefined;
    binderType?: Type;
    propertyFilterProvider?: IPropertyFilterProvider;
    requestPredicate?: ActionContextBooleanFunc;
    emptyBodyBehavior?: EmptyBodyBehavior;
    serviceKey?: any | undefined;
}

export class BindingSource implements IBindingSource {
    displayName?: string | undefined;
    id?: string | undefined;
    isGreedy?: boolean;
    isFromRequest?: boolean;

    constructor(data?: IBindingSource) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.displayName = _data["displayName"];
            this.id = _data["id"];
            this.isGreedy = _data["isGreedy"];
            this.isFromRequest = _data["isFromRequest"];
        }
    }

    static fromJS(data: any): BindingSource {
        data = typeof data === 'object' ? data : {};
        let result = new BindingSource();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["displayName"] = this.displayName;
        data["id"] = this.id;
        data["isGreedy"] = this.isGreedy;
        data["isFromRequest"] = this.isFromRequest;
        return data;
    }
}

export interface IBindingSource {
    displayName?: string | undefined;
    id?: string | undefined;
    isGreedy?: boolean;
    isFromRequest?: boolean;
}

export class ByteReadOnlyMemory implements IByteReadOnlyMemory {
    readonly length?: number;
    readonly isEmpty?: boolean;
    span?: ByteReadOnlySpan;

    constructor(data?: IByteReadOnlyMemory) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).length = _data["length"];
            (<any>this).isEmpty = _data["isEmpty"];
            this.span = _data["span"] ? ByteReadOnlySpan.fromJS(_data["span"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ByteReadOnlyMemory {
        data = typeof data === 'object' ? data : {};
        let result = new ByteReadOnlyMemory();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["length"] = this.length;
        data["isEmpty"] = this.isEmpty;
        data["span"] = this.span ? this.span.toJSON() : <any>undefined;
        return data;
    }
}

export interface IByteReadOnlyMemory {
    length?: number;
    isEmpty?: boolean;
    span?: ByteReadOnlySpan;
}

export class ByteReadOnlySpan implements IByteReadOnlySpan {
    readonly length?: number;
    readonly isEmpty?: boolean;

    constructor(data?: IByteReadOnlySpan) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).length = _data["length"];
            (<any>this).isEmpty = _data["isEmpty"];
        }
    }

    static fromJS(data: any): ByteReadOnlySpan {
        data = typeof data === 'object' ? data : {};
        let result = new ByteReadOnlySpan();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["length"] = this.length;
        data["isEmpty"] = this.isEmpty;
        return data;
    }
}

export interface IByteReadOnlySpan {
    length?: number;
    isEmpty?: boolean;
}

export enum CallingConventions {
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _32 = 32,
    _64 = 64,
}

export class CancellationToken implements ICancellationToken {
    readonly isCancellationRequested?: boolean;
    readonly canBeCanceled?: boolean;
    waitHandle?: WaitHandle;

    constructor(data?: ICancellationToken) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).isCancellationRequested = _data["isCancellationRequested"];
            (<any>this).canBeCanceled = _data["canBeCanceled"];
            this.waitHandle = _data["waitHandle"] ? WaitHandle.fromJS(_data["waitHandle"]) : <any>undefined;
        }
    }

    static fromJS(data: any): CancellationToken {
        data = typeof data === 'object' ? data : {};
        let result = new CancellationToken();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isCancellationRequested"] = this.isCancellationRequested;
        data["canBeCanceled"] = this.canBeCanceled;
        data["waitHandle"] = this.waitHandle ? this.waitHandle.toJSON() : <any>undefined;
        return data;
    }
}

export interface ICancellationToken {
    isCancellationRequested?: boolean;
    canBeCanceled?: boolean;
    waitHandle?: WaitHandle;
}

export class Claim implements IClaim {
    readonly issuer?: string | undefined;
    readonly originalIssuer?: string | undefined;
    readonly properties?: { [key: string]: string; } | undefined;
    subject?: ClaimsIdentity;
    readonly type?: string | undefined;
    readonly value?: string | undefined;
    readonly valueType?: string | undefined;

    constructor(data?: IClaim) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).issuer = _data["issuer"];
            (<any>this).originalIssuer = _data["originalIssuer"];
            if (_data["properties"]) {
                (<any>this).properties = {} as any;
                for (let key in _data["properties"]) {
                    if (_data["properties"].hasOwnProperty(key))
                        (<any>(<any>this).properties)![key] = _data["properties"][key];
                }
            }
            this.subject = _data["subject"] ? ClaimsIdentity.fromJS(_data["subject"]) : <any>undefined;
            (<any>this).type = _data["type"];
            (<any>this).value = _data["value"];
            (<any>this).valueType = _data["valueType"];
        }
    }

    static fromJS(data: any): Claim {
        data = typeof data === 'object' ? data : {};
        let result = new Claim();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["issuer"] = this.issuer;
        data["originalIssuer"] = this.originalIssuer;
        if (this.properties) {
            data["properties"] = {};
            for (let key in this.properties) {
                if (this.properties.hasOwnProperty(key))
                    (<any>data["properties"])[key] = (<any>this.properties)[key];
            }
        }
        data["subject"] = this.subject ? this.subject.toJSON() : <any>undefined;
        data["type"] = this.type;
        data["value"] = this.value;
        data["valueType"] = this.valueType;
        return data;
    }
}

export interface IClaim {
    issuer?: string | undefined;
    originalIssuer?: string | undefined;
    properties?: { [key: string]: string; } | undefined;
    subject?: ClaimsIdentity;
    type?: string | undefined;
    value?: string | undefined;
    valueType?: string | undefined;
}

export class ClaimsIdentity implements IClaimsIdentity {
    readonly authenticationType?: string | undefined;
    readonly isAuthenticated?: boolean;
    actor?: ClaimsIdentity;
    bootstrapContext?: any | undefined;
    readonly claims?: Claim[] | undefined;
    label?: string | undefined;
    readonly name?: string | undefined;
    readonly nameClaimType?: string | undefined;
    readonly roleClaimType?: string | undefined;

    constructor(data?: IClaimsIdentity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).authenticationType = _data["authenticationType"];
            (<any>this).isAuthenticated = _data["isAuthenticated"];
            this.actor = _data["actor"] ? ClaimsIdentity.fromJS(_data["actor"]) : <any>undefined;
            this.bootstrapContext = _data["bootstrapContext"];
            if (Array.isArray(_data["claims"])) {
                (<any>this).claims = [] as any;
                for (let item of _data["claims"])
                    (<any>this).claims!.push(Claim.fromJS(item));
            }
            this.label = _data["label"];
            (<any>this).name = _data["name"];
            (<any>this).nameClaimType = _data["nameClaimType"];
            (<any>this).roleClaimType = _data["roleClaimType"];
        }
    }

    static fromJS(data: any): ClaimsIdentity {
        data = typeof data === 'object' ? data : {};
        let result = new ClaimsIdentity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["authenticationType"] = this.authenticationType;
        data["isAuthenticated"] = this.isAuthenticated;
        data["actor"] = this.actor ? this.actor.toJSON() : <any>undefined;
        data["bootstrapContext"] = this.bootstrapContext;
        if (Array.isArray(this.claims)) {
            data["claims"] = [];
            for (let item of this.claims)
                data["claims"].push(item ? item.toJSON() : <any>undefined);
        }
        data["label"] = this.label;
        data["name"] = this.name;
        data["nameClaimType"] = this.nameClaimType;
        data["roleClaimType"] = this.roleClaimType;
        return data;
    }
}

export interface IClaimsIdentity {
    authenticationType?: string | undefined;
    isAuthenticated?: boolean;
    actor?: ClaimsIdentity;
    bootstrapContext?: any | undefined;
    claims?: Claim[] | undefined;
    label?: string | undefined;
    name?: string | undefined;
    nameClaimType?: string | undefined;
    roleClaimType?: string | undefined;
}

export class ClaimsPrincipal implements IClaimsPrincipal {
    readonly claims?: Claim[] | undefined;
    readonly identities?: ClaimsIdentity[] | undefined;
    identity?: IIdentity;

    constructor(data?: IClaimsPrincipal) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["claims"])) {
                (<any>this).claims = [] as any;
                for (let item of _data["claims"])
                    (<any>this).claims!.push(Claim.fromJS(item));
            }
            if (Array.isArray(_data["identities"])) {
                (<any>this).identities = [] as any;
                for (let item of _data["identities"])
                    (<any>this).identities!.push(ClaimsIdentity.fromJS(item));
            }
            this.identity = _data["identity"] ? IIdentity.fromJS(_data["identity"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ClaimsPrincipal {
        data = typeof data === 'object' ? data : {};
        let result = new ClaimsPrincipal();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.claims)) {
            data["claims"] = [];
            for (let item of this.claims)
                data["claims"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.identities)) {
            data["identities"] = [];
            for (let item of this.identities)
                data["identities"].push(item ? item.toJSON() : <any>undefined);
        }
        data["identity"] = this.identity ? this.identity.toJSON() : <any>undefined;
        return data;
    }
}

export interface IClaimsPrincipal {
    claims?: Claim[] | undefined;
    identities?: ClaimsIdentity[] | undefined;
    identity?: IIdentity;
}

export class ConnectionInfo implements IConnectionInfo {
    id?: string | undefined;
    remoteIpAddress?: IPAddress;
    remotePort?: number;
    localIpAddress?: IPAddress;
    localPort?: number;
    clientCertificate?: X509Certificate2;

    constructor(data?: IConnectionInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.remoteIpAddress = _data["remoteIpAddress"] ? IPAddress.fromJS(_data["remoteIpAddress"]) : <any>undefined;
            this.remotePort = _data["remotePort"];
            this.localIpAddress = _data["localIpAddress"] ? IPAddress.fromJS(_data["localIpAddress"]) : <any>undefined;
            this.localPort = _data["localPort"];
            this.clientCertificate = _data["clientCertificate"] ? X509Certificate2.fromJS(_data["clientCertificate"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ConnectionInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ConnectionInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["remoteIpAddress"] = this.remoteIpAddress ? this.remoteIpAddress.toJSON() : <any>undefined;
        data["remotePort"] = this.remotePort;
        data["localIpAddress"] = this.localIpAddress ? this.localIpAddress.toJSON() : <any>undefined;
        data["localPort"] = this.localPort;
        data["clientCertificate"] = this.clientCertificate ? this.clientCertificate.toJSON() : <any>undefined;
        return data;
    }
}

export interface IConnectionInfo {
    id?: string | undefined;
    remoteIpAddress?: IPAddress;
    remotePort?: number;
    localIpAddress?: IPAddress;
    localPort?: number;
    clientCertificate?: X509Certificate2;
}

export class ConstructorInfo implements IConstructorInfo {
    readonly name?: string | undefined;
    declaringType?: Type;
    reflectedType?: Type;
    module?: Module;
    readonly customAttributes?: CustomAttributeData[] | undefined;
    readonly isCollectible?: boolean;
    readonly metadataToken?: number;
    attributes?: MethodAttributes;
    methodImplementationFlags?: MethodImplAttributes;
    callingConvention?: CallingConventions;
    readonly isAbstract?: boolean;
    readonly isConstructor?: boolean;
    readonly isFinal?: boolean;
    readonly isHideBySig?: boolean;
    readonly isSpecialName?: boolean;
    readonly isStatic?: boolean;
    readonly isVirtual?: boolean;
    readonly isAssembly?: boolean;
    readonly isFamily?: boolean;
    readonly isFamilyAndAssembly?: boolean;
    readonly isFamilyOrAssembly?: boolean;
    readonly isPrivate?: boolean;
    readonly isPublic?: boolean;
    readonly isConstructedGenericMethod?: boolean;
    readonly isGenericMethod?: boolean;
    readonly isGenericMethodDefinition?: boolean;
    readonly containsGenericParameters?: boolean;
    methodHandle?: RuntimeMethodHandle;
    readonly isSecurityCritical?: boolean;
    readonly isSecuritySafeCritical?: boolean;
    readonly isSecurityTransparent?: boolean;
    memberType?: MemberTypes;

    constructor(data?: IConstructorInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).name = _data["name"];
            this.declaringType = _data["declaringType"] ? Type.fromJS(_data["declaringType"]) : <any>undefined;
            this.reflectedType = _data["reflectedType"] ? Type.fromJS(_data["reflectedType"]) : <any>undefined;
            this.module = _data["module"] ? Module.fromJS(_data["module"]) : <any>undefined;
            if (Array.isArray(_data["customAttributes"])) {
                (<any>this).customAttributes = [] as any;
                for (let item of _data["customAttributes"])
                    (<any>this).customAttributes!.push(CustomAttributeData.fromJS(item));
            }
            (<any>this).isCollectible = _data["isCollectible"];
            (<any>this).metadataToken = _data["metadataToken"];
            this.attributes = _data["attributes"];
            this.methodImplementationFlags = _data["methodImplementationFlags"];
            this.callingConvention = _data["callingConvention"];
            (<any>this).isAbstract = _data["isAbstract"];
            (<any>this).isConstructor = _data["isConstructor"];
            (<any>this).isFinal = _data["isFinal"];
            (<any>this).isHideBySig = _data["isHideBySig"];
            (<any>this).isSpecialName = _data["isSpecialName"];
            (<any>this).isStatic = _data["isStatic"];
            (<any>this).isVirtual = _data["isVirtual"];
            (<any>this).isAssembly = _data["isAssembly"];
            (<any>this).isFamily = _data["isFamily"];
            (<any>this).isFamilyAndAssembly = _data["isFamilyAndAssembly"];
            (<any>this).isFamilyOrAssembly = _data["isFamilyOrAssembly"];
            (<any>this).isPrivate = _data["isPrivate"];
            (<any>this).isPublic = _data["isPublic"];
            (<any>this).isConstructedGenericMethod = _data["isConstructedGenericMethod"];
            (<any>this).isGenericMethod = _data["isGenericMethod"];
            (<any>this).isGenericMethodDefinition = _data["isGenericMethodDefinition"];
            (<any>this).containsGenericParameters = _data["containsGenericParameters"];
            this.methodHandle = _data["methodHandle"] ? RuntimeMethodHandle.fromJS(_data["methodHandle"]) : <any>undefined;
            (<any>this).isSecurityCritical = _data["isSecurityCritical"];
            (<any>this).isSecuritySafeCritical = _data["isSecuritySafeCritical"];
            (<any>this).isSecurityTransparent = _data["isSecurityTransparent"];
            this.memberType = _data["memberType"];
        }
    }

    static fromJS(data: any): ConstructorInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ConstructorInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["declaringType"] = this.declaringType ? this.declaringType.toJSON() : <any>undefined;
        data["reflectedType"] = this.reflectedType ? this.reflectedType.toJSON() : <any>undefined;
        data["module"] = this.module ? this.module.toJSON() : <any>undefined;
        if (Array.isArray(this.customAttributes)) {
            data["customAttributes"] = [];
            for (let item of this.customAttributes)
                data["customAttributes"].push(item ? item.toJSON() : <any>undefined);
        }
        data["isCollectible"] = this.isCollectible;
        data["metadataToken"] = this.metadataToken;
        data["attributes"] = this.attributes;
        data["methodImplementationFlags"] = this.methodImplementationFlags;
        data["callingConvention"] = this.callingConvention;
        data["isAbstract"] = this.isAbstract;
        data["isConstructor"] = this.isConstructor;
        data["isFinal"] = this.isFinal;
        data["isHideBySig"] = this.isHideBySig;
        data["isSpecialName"] = this.isSpecialName;
        data["isStatic"] = this.isStatic;
        data["isVirtual"] = this.isVirtual;
        data["isAssembly"] = this.isAssembly;
        data["isFamily"] = this.isFamily;
        data["isFamilyAndAssembly"] = this.isFamilyAndAssembly;
        data["isFamilyOrAssembly"] = this.isFamilyOrAssembly;
        data["isPrivate"] = this.isPrivate;
        data["isPublic"] = this.isPublic;
        data["isConstructedGenericMethod"] = this.isConstructedGenericMethod;
        data["isGenericMethod"] = this.isGenericMethod;
        data["isGenericMethodDefinition"] = this.isGenericMethodDefinition;
        data["containsGenericParameters"] = this.containsGenericParameters;
        data["methodHandle"] = this.methodHandle ? this.methodHandle.toJSON() : <any>undefined;
        data["isSecurityCritical"] = this.isSecurityCritical;
        data["isSecuritySafeCritical"] = this.isSecuritySafeCritical;
        data["isSecurityTransparent"] = this.isSecurityTransparent;
        data["memberType"] = this.memberType;
        return data;
    }
}

export interface IConstructorInfo {
    name?: string | undefined;
    declaringType?: Type;
    reflectedType?: Type;
    module?: Module;
    customAttributes?: CustomAttributeData[] | undefined;
    isCollectible?: boolean;
    metadataToken?: number;
    attributes?: MethodAttributes;
    methodImplementationFlags?: MethodImplAttributes;
    callingConvention?: CallingConventions;
    isAbstract?: boolean;
    isConstructor?: boolean;
    isFinal?: boolean;
    isHideBySig?: boolean;
    isSpecialName?: boolean;
    isStatic?: boolean;
    isVirtual?: boolean;
    isAssembly?: boolean;
    isFamily?: boolean;
    isFamilyAndAssembly?: boolean;
    isFamilyOrAssembly?: boolean;
    isPrivate?: boolean;
    isPublic?: boolean;
    isConstructedGenericMethod?: boolean;
    isGenericMethod?: boolean;
    isGenericMethodDefinition?: boolean;
    containsGenericParameters?: boolean;
    methodHandle?: RuntimeMethodHandle;
    isSecurityCritical?: boolean;
    isSecuritySafeCritical?: boolean;
    isSecurityTransparent?: boolean;
    memberType?: MemberTypes;
}

export class CreatedAtActionResult implements ICreatedAtActionResult {
    value?: any | undefined;
    formatters?: IOutputFormatter[] | undefined;
    contentTypes?: string[] | undefined;
    declaredType?: Type;
    statusCode?: number | undefined;
    urlHelper?: IUrlHelper;
    actionName?: string | undefined;
    controllerName?: string | undefined;
    routeValues?: { [key: string]: any; } | undefined;

    constructor(data?: ICreatedAtActionResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            if (Array.isArray(_data["formatters"])) {
                this.formatters = [] as any;
                for (let item of _data["formatters"])
                    this.formatters!.push(IOutputFormatter.fromJS(item));
            }
            if (Array.isArray(_data["contentTypes"])) {
                this.contentTypes = [] as any;
                for (let item of _data["contentTypes"])
                    this.contentTypes!.push(item);
            }
            this.declaredType = _data["declaredType"] ? Type.fromJS(_data["declaredType"]) : <any>undefined;
            this.statusCode = _data["statusCode"];
            this.urlHelper = _data["urlHelper"] ? IUrlHelper.fromJS(_data["urlHelper"]) : <any>undefined;
            this.actionName = _data["actionName"];
            this.controllerName = _data["controllerName"];
            if (_data["routeValues"]) {
                this.routeValues = {} as any;
                for (let key in _data["routeValues"]) {
                    if (_data["routeValues"].hasOwnProperty(key))
                        (<any>this.routeValues)![key] = _data["routeValues"][key];
                }
            }
        }
    }

    static fromJS(data: any): CreatedAtActionResult {
        data = typeof data === 'object' ? data : {};
        let result = new CreatedAtActionResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        if (Array.isArray(this.formatters)) {
            data["formatters"] = [];
            for (let item of this.formatters)
                data["formatters"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.contentTypes)) {
            data["contentTypes"] = [];
            for (let item of this.contentTypes)
                data["contentTypes"].push(item);
        }
        data["declaredType"] = this.declaredType ? this.declaredType.toJSON() : <any>undefined;
        data["statusCode"] = this.statusCode;
        data["urlHelper"] = this.urlHelper ? this.urlHelper.toJSON() : <any>undefined;
        data["actionName"] = this.actionName;
        data["controllerName"] = this.controllerName;
        if (this.routeValues) {
            data["routeValues"] = {};
            for (let key in this.routeValues) {
                if (this.routeValues.hasOwnProperty(key))
                    (<any>data["routeValues"])[key] = (<any>this.routeValues)[key];
            }
        }
        return data;
    }
}

export interface ICreatedAtActionResult {
    value?: any | undefined;
    formatters?: IOutputFormatter[] | undefined;
    contentTypes?: string[] | undefined;
    declaredType?: Type;
    statusCode?: number | undefined;
    urlHelper?: IUrlHelper;
    actionName?: string | undefined;
    controllerName?: string | undefined;
    routeValues?: { [key: string]: any; } | undefined;
}

export class CustomAttributeData implements ICustomAttributeData {
    attributeType?: Type;
    constructor_?: ConstructorInfo;
    readonly constructorArguments?: CustomAttributeTypedArgument[] | undefined;
    readonly namedArguments?: CustomAttributeNamedArgument[] | undefined;

    constructor(data?: ICustomAttributeData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.attributeType = _data["attributeType"] ? Type.fromJS(_data["attributeType"]) : <any>undefined;
            this.constructor_ = _data["constructor"] ? ConstructorInfo.fromJS(_data["constructor"]) : <any>undefined;
            if (Array.isArray(_data["constructorArguments"])) {
                (<any>this).constructorArguments = [] as any;
                for (let item of _data["constructorArguments"])
                    (<any>this).constructorArguments!.push(CustomAttributeTypedArgument.fromJS(item));
            }
            if (Array.isArray(_data["namedArguments"])) {
                (<any>this).namedArguments = [] as any;
                for (let item of _data["namedArguments"])
                    (<any>this).namedArguments!.push(CustomAttributeNamedArgument.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CustomAttributeData {
        data = typeof data === 'object' ? data : {};
        let result = new CustomAttributeData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["attributeType"] = this.attributeType ? this.attributeType.toJSON() : <any>undefined;
        data["constructor"] = this.constructor_ ? this.constructor_.toJSON() : <any>undefined;
        if (Array.isArray(this.constructorArguments)) {
            data["constructorArguments"] = [];
            for (let item of this.constructorArguments)
                data["constructorArguments"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.namedArguments)) {
            data["namedArguments"] = [];
            for (let item of this.namedArguments)
                data["namedArguments"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface ICustomAttributeData {
    attributeType?: Type;
    constructor_?: ConstructorInfo;
    constructorArguments?: CustomAttributeTypedArgument[] | undefined;
    namedArguments?: CustomAttributeNamedArgument[] | undefined;
}

export class CustomAttributeNamedArgument implements ICustomAttributeNamedArgument {
    memberInfo?: MemberInfo;
    typedValue?: CustomAttributeTypedArgument;
    readonly memberName?: string | undefined;
    readonly isField?: boolean;

    constructor(data?: ICustomAttributeNamedArgument) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.memberInfo = _data["memberInfo"] ? MemberInfo.fromJS(_data["memberInfo"]) : <any>undefined;
            this.typedValue = _data["typedValue"] ? CustomAttributeTypedArgument.fromJS(_data["typedValue"]) : <any>undefined;
            (<any>this).memberName = _data["memberName"];
            (<any>this).isField = _data["isField"];
        }
    }

    static fromJS(data: any): CustomAttributeNamedArgument {
        data = typeof data === 'object' ? data : {};
        let result = new CustomAttributeNamedArgument();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["memberInfo"] = this.memberInfo ? this.memberInfo.toJSON() : <any>undefined;
        data["typedValue"] = this.typedValue ? this.typedValue.toJSON() : <any>undefined;
        data["memberName"] = this.memberName;
        data["isField"] = this.isField;
        return data;
    }
}

export interface ICustomAttributeNamedArgument {
    memberInfo?: MemberInfo;
    typedValue?: CustomAttributeTypedArgument;
    memberName?: string | undefined;
    isField?: boolean;
}

export class CustomAttributeTypedArgument implements ICustomAttributeTypedArgument {
    argumentType?: Type;
    value?: any | undefined;

    constructor(data?: ICustomAttributeTypedArgument) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.argumentType = _data["argumentType"] ? Type.fromJS(_data["argumentType"]) : <any>undefined;
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): CustomAttributeTypedArgument {
        data = typeof data === 'object' ? data : {};
        let result = new CustomAttributeTypedArgument();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["argumentType"] = this.argumentType ? this.argumentType.toJSON() : <any>undefined;
        data["value"] = this.value;
        return data;
    }
}

export interface ICustomAttributeTypedArgument {
    argumentType?: Type;
    value?: any | undefined;
}

export class Deck implements IDeck {
    id!: string | undefined;
    name!: string | undefined;
    userId!: string | undefined;
    originalLanguage!: Language;
    targetLanguage!: Language;
    level!: LanguageLevel;
    flashCards!: FlashCard[] | undefined;

    constructor(data?: IDeck) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.originalLanguage = new Language();
            this.targetLanguage = new Language();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            this.userId = _data["userId"];
            this.originalLanguage = _data["originalLanguage"] ? Language.fromJS(_data["originalLanguage"]) : new Language();
            this.targetLanguage = _data["targetLanguage"] ? Language.fromJS(_data["targetLanguage"]) : new Language();
            this.level = _data["level"];
            if (Array.isArray(_data["flashCards"])) {
                this.flashCards = [] as any;
                for (let item of _data["flashCards"])
                    this.flashCards!.push(FlashCard.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Deck {
        data = typeof data === 'object' ? data : {};
        let result = new Deck();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        data["userId"] = this.userId;
        data["originalLanguage"] = this.originalLanguage ? this.originalLanguage.toJSON() : <any>undefined;
        data["targetLanguage"] = this.targetLanguage ? this.targetLanguage.toJSON() : <any>undefined;
        data["level"] = this.level;
        if (Array.isArray(this.flashCards)) {
            data["flashCards"] = [];
            for (let item of this.flashCards)
                data["flashCards"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IDeck {
    id: string | undefined;
    name: string | undefined;
    userId: string | undefined;
    originalLanguage: Language;
    targetLanguage: Language;
    level: LanguageLevel;
    flashCards: FlashCard[] | undefined;
}

export enum EmptyBodyBehavior {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export enum EventAttributes {
    _0 = 0,
    _512 = 512,
    _1024 = 1024,
}

export class EventInfo implements IEventInfo {
    readonly name?: string | undefined;
    declaringType?: Type;
    reflectedType?: Type;
    module?: Module;
    readonly customAttributes?: CustomAttributeData[] | undefined;
    readonly isCollectible?: boolean;
    readonly metadataToken?: number;
    memberType?: MemberTypes;
    attributes?: EventAttributes;
    readonly isSpecialName?: boolean;
    addMethod?: MethodInfo;
    removeMethod?: MethodInfo;
    raiseMethod?: MethodInfo;
    readonly isMulticast?: boolean;
    eventHandlerType?: Type;

    constructor(data?: IEventInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).name = _data["name"];
            this.declaringType = _data["declaringType"] ? Type.fromJS(_data["declaringType"]) : <any>undefined;
            this.reflectedType = _data["reflectedType"] ? Type.fromJS(_data["reflectedType"]) : <any>undefined;
            this.module = _data["module"] ? Module.fromJS(_data["module"]) : <any>undefined;
            if (Array.isArray(_data["customAttributes"])) {
                (<any>this).customAttributes = [] as any;
                for (let item of _data["customAttributes"])
                    (<any>this).customAttributes!.push(CustomAttributeData.fromJS(item));
            }
            (<any>this).isCollectible = _data["isCollectible"];
            (<any>this).metadataToken = _data["metadataToken"];
            this.memberType = _data["memberType"];
            this.attributes = _data["attributes"];
            (<any>this).isSpecialName = _data["isSpecialName"];
            this.addMethod = _data["addMethod"] ? MethodInfo.fromJS(_data["addMethod"]) : <any>undefined;
            this.removeMethod = _data["removeMethod"] ? MethodInfo.fromJS(_data["removeMethod"]) : <any>undefined;
            this.raiseMethod = _data["raiseMethod"] ? MethodInfo.fromJS(_data["raiseMethod"]) : <any>undefined;
            (<any>this).isMulticast = _data["isMulticast"];
            this.eventHandlerType = _data["eventHandlerType"] ? Type.fromJS(_data["eventHandlerType"]) : <any>undefined;
        }
    }

    static fromJS(data: any): EventInfo {
        data = typeof data === 'object' ? data : {};
        let result = new EventInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["declaringType"] = this.declaringType ? this.declaringType.toJSON() : <any>undefined;
        data["reflectedType"] = this.reflectedType ? this.reflectedType.toJSON() : <any>undefined;
        data["module"] = this.module ? this.module.toJSON() : <any>undefined;
        if (Array.isArray(this.customAttributes)) {
            data["customAttributes"] = [];
            for (let item of this.customAttributes)
                data["customAttributes"].push(item ? item.toJSON() : <any>undefined);
        }
        data["isCollectible"] = this.isCollectible;
        data["metadataToken"] = this.metadataToken;
        data["memberType"] = this.memberType;
        data["attributes"] = this.attributes;
        data["isSpecialName"] = this.isSpecialName;
        data["addMethod"] = this.addMethod ? this.addMethod.toJSON() : <any>undefined;
        data["removeMethod"] = this.removeMethod ? this.removeMethod.toJSON() : <any>undefined;
        data["raiseMethod"] = this.raiseMethod ? this.raiseMethod.toJSON() : <any>undefined;
        data["isMulticast"] = this.isMulticast;
        data["eventHandlerType"] = this.eventHandlerType ? this.eventHandlerType.toJSON() : <any>undefined;
        return data;
    }
}

export interface IEventInfo {
    name?: string | undefined;
    declaringType?: Type;
    reflectedType?: Type;
    module?: Module;
    customAttributes?: CustomAttributeData[] | undefined;
    isCollectible?: boolean;
    metadataToken?: number;
    memberType?: MemberTypes;
    attributes?: EventAttributes;
    isSpecialName?: boolean;
    addMethod?: MethodInfo;
    removeMethod?: MethodInfo;
    raiseMethod?: MethodInfo;
    isMulticast?: boolean;
    eventHandlerType?: Type;
}

export class Exception implements IException {
    targetSite?: MethodBase;
    readonly message?: string | undefined;
    readonly data?: { [key: string]: any; } | undefined;
    innerException?: Exception;
    helpLink?: string | undefined;
    source?: string | undefined;
    hResult?: number;
    readonly stackTrace?: string | undefined;

    constructor(data?: IException) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.targetSite = _data["targetSite"] ? MethodBase.fromJS(_data["targetSite"]) : <any>undefined;
            (<any>this).message = _data["message"];
            if (_data["data"]) {
                (<any>this).data = {} as any;
                for (let key in _data["data"]) {
                    if (_data["data"].hasOwnProperty(key))
                        (<any>(<any>this).data)![key] = _data["data"][key];
                }
            }
            this.innerException = _data["innerException"] ? Exception.fromJS(_data["innerException"]) : <any>undefined;
            this.helpLink = _data["helpLink"];
            this.source = _data["source"];
            this.hResult = _data["hResult"];
            (<any>this).stackTrace = _data["stackTrace"];
        }
    }

    static fromJS(data: any): Exception {
        data = typeof data === 'object' ? data : {};
        let result = new Exception();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["targetSite"] = this.targetSite ? this.targetSite.toJSON() : <any>undefined;
        data["message"] = this.message;
        if (this.data) {
            data["data"] = {};
            for (let key in this.data) {
                if (this.data.hasOwnProperty(key))
                    (<any>data["data"])[key] = (<any>this.data)[key];
            }
        }
        data["innerException"] = this.innerException ? this.innerException.toJSON() : <any>undefined;
        data["helpLink"] = this.helpLink;
        data["source"] = this.source;
        data["hResult"] = this.hResult;
        data["stackTrace"] = this.stackTrace;
        return data;
    }
}

export interface IException {
    targetSite?: MethodBase;
    message?: string | undefined;
    data?: { [key: string]: any; } | undefined;
    innerException?: Exception;
    helpLink?: string | undefined;
    source?: string | undefined;
    hResult?: number;
    stackTrace?: string | undefined;
}

export enum FieldAttributes {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
    _7 = 7,
    _16 = 16,
    _32 = 32,
    _64 = 64,
    _128 = 128,
    _256 = 256,
    _512 = 512,
    _1024 = 1024,
    _4096 = 4096,
    _8192 = 8192,
    _32768 = 32768,
    _38144 = 38144,
}

export class FieldInfo implements IFieldInfo {
    readonly name?: string | undefined;
    declaringType?: Type;
    reflectedType?: Type;
    module?: Module;
    readonly customAttributes?: CustomAttributeData[] | undefined;
    readonly isCollectible?: boolean;
    readonly metadataToken?: number;
    memberType?: MemberTypes;
    attributes?: FieldAttributes;
    fieldType?: Type;
    readonly isInitOnly?: boolean;
    readonly isLiteral?: boolean;
    readonly isNotSerialized?: boolean;
    readonly isPinvokeImpl?: boolean;
    readonly isSpecialName?: boolean;
    readonly isStatic?: boolean;
    readonly isAssembly?: boolean;
    readonly isFamily?: boolean;
    readonly isFamilyAndAssembly?: boolean;
    readonly isFamilyOrAssembly?: boolean;
    readonly isPrivate?: boolean;
    readonly isPublic?: boolean;
    readonly isSecurityCritical?: boolean;
    readonly isSecuritySafeCritical?: boolean;
    readonly isSecurityTransparent?: boolean;
    fieldHandle?: RuntimeFieldHandle;

    constructor(data?: IFieldInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).name = _data["name"];
            this.declaringType = _data["declaringType"] ? Type.fromJS(_data["declaringType"]) : <any>undefined;
            this.reflectedType = _data["reflectedType"] ? Type.fromJS(_data["reflectedType"]) : <any>undefined;
            this.module = _data["module"] ? Module.fromJS(_data["module"]) : <any>undefined;
            if (Array.isArray(_data["customAttributes"])) {
                (<any>this).customAttributes = [] as any;
                for (let item of _data["customAttributes"])
                    (<any>this).customAttributes!.push(CustomAttributeData.fromJS(item));
            }
            (<any>this).isCollectible = _data["isCollectible"];
            (<any>this).metadataToken = _data["metadataToken"];
            this.memberType = _data["memberType"];
            this.attributes = _data["attributes"];
            this.fieldType = _data["fieldType"] ? Type.fromJS(_data["fieldType"]) : <any>undefined;
            (<any>this).isInitOnly = _data["isInitOnly"];
            (<any>this).isLiteral = _data["isLiteral"];
            (<any>this).isNotSerialized = _data["isNotSerialized"];
            (<any>this).isPinvokeImpl = _data["isPinvokeImpl"];
            (<any>this).isSpecialName = _data["isSpecialName"];
            (<any>this).isStatic = _data["isStatic"];
            (<any>this).isAssembly = _data["isAssembly"];
            (<any>this).isFamily = _data["isFamily"];
            (<any>this).isFamilyAndAssembly = _data["isFamilyAndAssembly"];
            (<any>this).isFamilyOrAssembly = _data["isFamilyOrAssembly"];
            (<any>this).isPrivate = _data["isPrivate"];
            (<any>this).isPublic = _data["isPublic"];
            (<any>this).isSecurityCritical = _data["isSecurityCritical"];
            (<any>this).isSecuritySafeCritical = _data["isSecuritySafeCritical"];
            (<any>this).isSecurityTransparent = _data["isSecurityTransparent"];
            this.fieldHandle = _data["fieldHandle"] ? RuntimeFieldHandle.fromJS(_data["fieldHandle"]) : <any>undefined;
        }
    }

    static fromJS(data: any): FieldInfo {
        data = typeof data === 'object' ? data : {};
        let result = new FieldInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["declaringType"] = this.declaringType ? this.declaringType.toJSON() : <any>undefined;
        data["reflectedType"] = this.reflectedType ? this.reflectedType.toJSON() : <any>undefined;
        data["module"] = this.module ? this.module.toJSON() : <any>undefined;
        if (Array.isArray(this.customAttributes)) {
            data["customAttributes"] = [];
            for (let item of this.customAttributes)
                data["customAttributes"].push(item ? item.toJSON() : <any>undefined);
        }
        data["isCollectible"] = this.isCollectible;
        data["metadataToken"] = this.metadataToken;
        data["memberType"] = this.memberType;
        data["attributes"] = this.attributes;
        data["fieldType"] = this.fieldType ? this.fieldType.toJSON() : <any>undefined;
        data["isInitOnly"] = this.isInitOnly;
        data["isLiteral"] = this.isLiteral;
        data["isNotSerialized"] = this.isNotSerialized;
        data["isPinvokeImpl"] = this.isPinvokeImpl;
        data["isSpecialName"] = this.isSpecialName;
        data["isStatic"] = this.isStatic;
        data["isAssembly"] = this.isAssembly;
        data["isFamily"] = this.isFamily;
        data["isFamilyAndAssembly"] = this.isFamilyAndAssembly;
        data["isFamilyOrAssembly"] = this.isFamilyOrAssembly;
        data["isPrivate"] = this.isPrivate;
        data["isPublic"] = this.isPublic;
        data["isSecurityCritical"] = this.isSecurityCritical;
        data["isSecuritySafeCritical"] = this.isSecuritySafeCritical;
        data["isSecurityTransparent"] = this.isSecurityTransparent;
        data["fieldHandle"] = this.fieldHandle ? this.fieldHandle.toJSON() : <any>undefined;
        return data;
    }
}

export interface IFieldInfo {
    name?: string | undefined;
    declaringType?: Type;
    reflectedType?: Type;
    module?: Module;
    customAttributes?: CustomAttributeData[] | undefined;
    isCollectible?: boolean;
    metadataToken?: number;
    memberType?: MemberTypes;
    attributes?: FieldAttributes;
    fieldType?: Type;
    isInitOnly?: boolean;
    isLiteral?: boolean;
    isNotSerialized?: boolean;
    isPinvokeImpl?: boolean;
    isSpecialName?: boolean;
    isStatic?: boolean;
    isAssembly?: boolean;
    isFamily?: boolean;
    isFamilyAndAssembly?: boolean;
    isFamilyOrAssembly?: boolean;
    isPrivate?: boolean;
    isPublic?: boolean;
    isSecurityCritical?: boolean;
    isSecuritySafeCritical?: boolean;
    isSecurityTransparent?: boolean;
    fieldHandle?: RuntimeFieldHandle;
}

export class FilterDescriptor implements IFilterDescriptor {
    filter?: IFilterMetadata;
    order?: number;
    readonly scope?: number;

    constructor(data?: IFilterDescriptor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.filter = _data["filter"] ? IFilterMetadata.fromJS(_data["filter"]) : <any>undefined;
            this.order = _data["order"];
            (<any>this).scope = _data["scope"];
        }
    }

    static fromJS(data: any): FilterDescriptor {
        data = typeof data === 'object' ? data : {};
        let result = new FilterDescriptor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["filter"] = this.filter ? this.filter.toJSON() : <any>undefined;
        data["order"] = this.order;
        data["scope"] = this.scope;
        return data;
    }
}

export interface IFilterDescriptor {
    filter?: IFilterMetadata;
    order?: number;
    scope?: number;
}

export class FlashCard implements IFlashCard {
    id!: string | undefined;
    frontView!: FrontView;
    backView!: BackView;
    level!: LanguageLevel;
    region?: string | undefined;
    pronunciationUri?: string | undefined;

    constructor(data?: IFlashCard) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.frontView = new FrontView();
            this.backView = new BackView();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.frontView = _data["frontView"] ? FrontView.fromJS(_data["frontView"]) : new FrontView();
            this.backView = _data["backView"] ? BackView.fromJS(_data["backView"]) : new BackView();
            this.level = _data["level"];
            this.region = _data["region"];
            this.pronunciationUri = _data["pronunciationUri"];
        }
    }

    static fromJS(data: any): FlashCard {
        data = typeof data === 'object' ? data : {};
        let result = new FlashCard();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["frontView"] = this.frontView ? this.frontView.toJSON() : <any>undefined;
        data["backView"] = this.backView ? this.backView.toJSON() : <any>undefined;
        data["level"] = this.level;
        data["region"] = this.region;
        data["pronunciationUri"] = this.pronunciationUri;
        return data;
    }
}

export interface IFlashCard {
    id: string | undefined;
    frontView: FrontView;
    backView: BackView;
    level: LanguageLevel;
    region?: string | undefined;
    pronunciationUri?: string | undefined;
}

export class FrontView implements IFrontView {
    text!: string | undefined;
    language!: Language;
    region?: string | undefined;

    constructor(data?: IFrontView) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.language = new Language();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.text = _data["text"];
            this.language = _data["language"] ? Language.fromJS(_data["language"]) : new Language();
            this.region = _data["region"];
        }
    }

    static fromJS(data: any): FrontView {
        data = typeof data === 'object' ? data : {};
        let result = new FrontView();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["text"] = this.text;
        data["language"] = this.language ? this.language.toJSON() : <any>undefined;
        data["region"] = this.region;
        return data;
    }
}

export interface IFrontView {
    text: string | undefined;
    language: Language;
    region?: string | undefined;
}

export class GenerationRequest implements IGenerationRequest {
    level!: LanguageLevel;
    targetLanguage!: Language;
    originalLanguage!: Language;
    region?: string | undefined;
    count?: number;

    constructor(data?: IGenerationRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        if (!data) {
            this.targetLanguage = new Language();
            this.originalLanguage = new Language();
        }
    }

    init(_data?: any) {
        if (_data) {
            this.level = _data["level"];
            this.targetLanguage = _data["targetLanguage"] ? Language.fromJS(_data["targetLanguage"]) : new Language();
            this.originalLanguage = _data["originalLanguage"] ? Language.fromJS(_data["originalLanguage"]) : new Language();
            this.region = _data["region"];
            this.count = _data["count"];
        }
    }

    static fromJS(data: any): GenerationRequest {
        data = typeof data === 'object' ? data : {};
        let result = new GenerationRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["level"] = this.level;
        data["targetLanguage"] = this.targetLanguage ? this.targetLanguage.toJSON() : <any>undefined;
        data["originalLanguage"] = this.originalLanguage ? this.originalLanguage.toJSON() : <any>undefined;
        data["region"] = this.region;
        data["count"] = this.count;
        return data;
    }
}

export interface IGenerationRequest {
    level: LanguageLevel;
    targetLanguage: Language;
    originalLanguage: Language;
    region?: string | undefined;
    count?: number;
}

export enum GenericParameterAttributes {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _8 = 8,
    _16 = 16,
    _28 = 28,
    _32 = 32,
}

export class HostString implements IHostString {
    value?: string | undefined;
    readonly hasValue?: boolean;
    readonly host?: string | undefined;
    readonly port?: number | undefined;

    constructor(data?: IHostString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            (<any>this).hasValue = _data["hasValue"];
            (<any>this).host = _data["host"];
            (<any>this).port = _data["port"];
        }
    }

    static fromJS(data: any): HostString {
        data = typeof data === 'object' ? data : {};
        let result = new HostString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["hasValue"] = this.hasValue;
        data["host"] = this.host;
        data["port"] = this.port;
        return data;
    }
}

export interface IHostString {
    value?: string | undefined;
    hasValue?: boolean;
    host?: string | undefined;
    port?: number | undefined;
}

export class HttpContext implements IHttpContext {
    readonly features?: TypeObjectKeyValuePair[] | undefined;
    request?: HttpRequest;
    response?: HttpResponse;
    connection?: ConnectionInfo;
    webSockets?: WebSocketManager;
    user?: ClaimsPrincipal;
    items?: { [key: string]: any; } | undefined;
    requestServices?: IServiceProvider;
    requestAborted?: CancellationToken;
    traceIdentifier?: string | undefined;
    session?: ISession;

    constructor(data?: IHttpContext) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (Array.isArray(_data["features"])) {
                (<any>this).features = [] as any;
                for (let item of _data["features"])
                    (<any>this).features!.push(TypeObjectKeyValuePair.fromJS(item));
            }
            this.request = _data["request"] ? HttpRequest.fromJS(_data["request"]) : <any>undefined;
            this.response = _data["response"] ? HttpResponse.fromJS(_data["response"]) : <any>undefined;
            this.connection = _data["connection"] ? ConnectionInfo.fromJS(_data["connection"]) : <any>undefined;
            this.webSockets = _data["webSockets"] ? WebSocketManager.fromJS(_data["webSockets"]) : <any>undefined;
            this.user = _data["user"] ? ClaimsPrincipal.fromJS(_data["user"]) : <any>undefined;
            if (_data["items"]) {
                this.items = {} as any;
                for (let key in _data["items"]) {
                    if (_data["items"].hasOwnProperty(key))
                        (<any>this.items)![key] = _data["items"][key];
                }
            }
            this.requestServices = _data["requestServices"] ? IServiceProvider.fromJS(_data["requestServices"]) : <any>undefined;
            this.requestAborted = _data["requestAborted"] ? CancellationToken.fromJS(_data["requestAborted"]) : <any>undefined;
            this.traceIdentifier = _data["traceIdentifier"];
            this.session = _data["session"] ? ISession.fromJS(_data["session"]) : <any>undefined;
        }
    }

    static fromJS(data: any): HttpContext {
        data = typeof data === 'object' ? data : {};
        let result = new HttpContext();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.features)) {
            data["features"] = [];
            for (let item of this.features)
                data["features"].push(item ? item.toJSON() : <any>undefined);
        }
        data["request"] = this.request ? this.request.toJSON() : <any>undefined;
        data["response"] = this.response ? this.response.toJSON() : <any>undefined;
        data["connection"] = this.connection ? this.connection.toJSON() : <any>undefined;
        data["webSockets"] = this.webSockets ? this.webSockets.toJSON() : <any>undefined;
        data["user"] = this.user ? this.user.toJSON() : <any>undefined;
        if (this.items) {
            data["items"] = {};
            for (let key in this.items) {
                if (this.items.hasOwnProperty(key))
                    (<any>data["items"])[key] = (<any>this.items)[key];
            }
        }
        data["requestServices"] = this.requestServices ? this.requestServices.toJSON() : <any>undefined;
        data["requestAborted"] = this.requestAborted ? this.requestAborted.toJSON() : <any>undefined;
        data["traceIdentifier"] = this.traceIdentifier;
        data["session"] = this.session ? this.session.toJSON() : <any>undefined;
        return data;
    }
}

export interface IHttpContext {
    features?: TypeObjectKeyValuePair[] | undefined;
    request?: HttpRequest;
    response?: HttpResponse;
    connection?: ConnectionInfo;
    webSockets?: WebSocketManager;
    user?: ClaimsPrincipal;
    items?: { [key: string]: any; } | undefined;
    requestServices?: IServiceProvider;
    requestAborted?: CancellationToken;
    traceIdentifier?: string | undefined;
    session?: ISession;
}

export class HttpRequest implements IHttpRequest {
    httpContext?: HttpContext;
    method?: string | undefined;
    scheme?: string | undefined;
    isHttps?: boolean;
    host?: HostString;
    pathBase?: PathString;
    path?: PathString;
    queryString?: QueryString;
    query?: StringStringValuesKeyValuePair[] | undefined;
    protocol?: string | undefined;
    readonly headers?: { [key: string]: string[]; } | undefined;
    cookies?: StringStringKeyValuePair[] | undefined;
    contentLength?: number | undefined;
    contentType?: string | undefined;
    body?: string | undefined;
    readonly bodyReader?: string | undefined;
    readonly hasFormContentType?: boolean;
    form?: StringStringValuesKeyValuePair[] | undefined;
    routeValues?: { [key: string]: any; } | undefined;

    constructor(data?: IHttpRequest) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.httpContext = _data["httpContext"] ? HttpContext.fromJS(_data["httpContext"]) : <any>undefined;
            this.method = _data["method"];
            this.scheme = _data["scheme"];
            this.isHttps = _data["isHttps"];
            this.host = _data["host"] ? HostString.fromJS(_data["host"]) : <any>undefined;
            this.pathBase = _data["pathBase"] ? PathString.fromJS(_data["pathBase"]) : <any>undefined;
            this.path = _data["path"] ? PathString.fromJS(_data["path"]) : <any>undefined;
            this.queryString = _data["queryString"] ? QueryString.fromJS(_data["queryString"]) : <any>undefined;
            if (Array.isArray(_data["query"])) {
                this.query = [] as any;
                for (let item of _data["query"])
                    this.query!.push(StringStringValuesKeyValuePair.fromJS(item));
            }
            this.protocol = _data["protocol"];
            if (_data["headers"]) {
                (<any>this).headers = {} as any;
                for (let key in _data["headers"]) {
                    if (_data["headers"].hasOwnProperty(key))
                        (<any>(<any>this).headers)![key] = _data["headers"][key] !== undefined ? _data["headers"][key] : [];
                }
            }
            if (Array.isArray(_data["cookies"])) {
                this.cookies = [] as any;
                for (let item of _data["cookies"])
                    this.cookies!.push(StringStringKeyValuePair.fromJS(item));
            }
            this.contentLength = _data["contentLength"];
            this.contentType = _data["contentType"];
            this.body = _data["body"];
            (<any>this).bodyReader = _data["bodyReader"];
            (<any>this).hasFormContentType = _data["hasFormContentType"];
            if (Array.isArray(_data["form"])) {
                this.form = [] as any;
                for (let item of _data["form"])
                    this.form!.push(StringStringValuesKeyValuePair.fromJS(item));
            }
            if (_data["routeValues"]) {
                this.routeValues = {} as any;
                for (let key in _data["routeValues"]) {
                    if (_data["routeValues"].hasOwnProperty(key))
                        (<any>this.routeValues)![key] = _data["routeValues"][key];
                }
            }
        }
    }

    static fromJS(data: any): HttpRequest {
        data = typeof data === 'object' ? data : {};
        let result = new HttpRequest();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["httpContext"] = this.httpContext ? this.httpContext.toJSON() : <any>undefined;
        data["method"] = this.method;
        data["scheme"] = this.scheme;
        data["isHttps"] = this.isHttps;
        data["host"] = this.host ? this.host.toJSON() : <any>undefined;
        data["pathBase"] = this.pathBase ? this.pathBase.toJSON() : <any>undefined;
        data["path"] = this.path ? this.path.toJSON() : <any>undefined;
        data["queryString"] = this.queryString ? this.queryString.toJSON() : <any>undefined;
        if (Array.isArray(this.query)) {
            data["query"] = [];
            for (let item of this.query)
                data["query"].push(item ? item.toJSON() : <any>undefined);
        }
        data["protocol"] = this.protocol;
        if (this.headers) {
            data["headers"] = {};
            for (let key in this.headers) {
                if (this.headers.hasOwnProperty(key))
                    (<any>data["headers"])[key] = (<any>this.headers)[key];
            }
        }
        if (Array.isArray(this.cookies)) {
            data["cookies"] = [];
            for (let item of this.cookies)
                data["cookies"].push(item ? item.toJSON() : <any>undefined);
        }
        data["contentLength"] = this.contentLength;
        data["contentType"] = this.contentType;
        data["body"] = this.body;
        data["bodyReader"] = this.bodyReader;
        data["hasFormContentType"] = this.hasFormContentType;
        if (Array.isArray(this.form)) {
            data["form"] = [];
            for (let item of this.form)
                data["form"].push(item ? item.toJSON() : <any>undefined);
        }
        if (this.routeValues) {
            data["routeValues"] = {};
            for (let key in this.routeValues) {
                if (this.routeValues.hasOwnProperty(key))
                    (<any>data["routeValues"])[key] = (<any>this.routeValues)[key];
            }
        }
        return data;
    }
}

export interface IHttpRequest {
    httpContext?: HttpContext;
    method?: string | undefined;
    scheme?: string | undefined;
    isHttps?: boolean;
    host?: HostString;
    pathBase?: PathString;
    path?: PathString;
    queryString?: QueryString;
    query?: StringStringValuesKeyValuePair[] | undefined;
    protocol?: string | undefined;
    headers?: { [key: string]: string[]; } | undefined;
    cookies?: StringStringKeyValuePair[] | undefined;
    contentLength?: number | undefined;
    contentType?: string | undefined;
    body?: string | undefined;
    bodyReader?: string | undefined;
    hasFormContentType?: boolean;
    form?: StringStringValuesKeyValuePair[] | undefined;
    routeValues?: { [key: string]: any; } | undefined;
}

export class HttpResponse implements IHttpResponse {
    httpContext?: HttpContext;
    statusCode?: number;
    readonly headers?: { [key: string]: string[]; } | undefined;
    body?: string | undefined;
    bodyWriter?: PipeWriter;
    contentLength?: number | undefined;
    contentType?: string | undefined;
    cookies?: IResponseCookies;
    readonly hasStarted?: boolean;

    constructor(data?: IHttpResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.httpContext = _data["httpContext"] ? HttpContext.fromJS(_data["httpContext"]) : <any>undefined;
            this.statusCode = _data["statusCode"];
            if (_data["headers"]) {
                (<any>this).headers = {} as any;
                for (let key in _data["headers"]) {
                    if (_data["headers"].hasOwnProperty(key))
                        (<any>(<any>this).headers)![key] = _data["headers"][key] !== undefined ? _data["headers"][key] : [];
                }
            }
            this.body = _data["body"];
            this.bodyWriter = _data["bodyWriter"] ? PipeWriter.fromJS(_data["bodyWriter"]) : <any>undefined;
            this.contentLength = _data["contentLength"];
            this.contentType = _data["contentType"];
            this.cookies = _data["cookies"] ? IResponseCookies.fromJS(_data["cookies"]) : <any>undefined;
            (<any>this).hasStarted = _data["hasStarted"];
        }
    }

    static fromJS(data: any): HttpResponse {
        data = typeof data === 'object' ? data : {};
        let result = new HttpResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["httpContext"] = this.httpContext ? this.httpContext.toJSON() : <any>undefined;
        data["statusCode"] = this.statusCode;
        if (this.headers) {
            data["headers"] = {};
            for (let key in this.headers) {
                if (this.headers.hasOwnProperty(key))
                    (<any>data["headers"])[key] = (<any>this.headers)[key];
            }
        }
        data["body"] = this.body;
        data["bodyWriter"] = this.bodyWriter ? this.bodyWriter.toJSON() : <any>undefined;
        data["contentLength"] = this.contentLength;
        data["contentType"] = this.contentType;
        data["cookies"] = this.cookies ? this.cookies.toJSON() : <any>undefined;
        data["hasStarted"] = this.hasStarted;
        return data;
    }
}

export interface IHttpResponse {
    httpContext?: HttpContext;
    statusCode?: number;
    headers?: { [key: string]: string[]; } | undefined;
    body?: string | undefined;
    bodyWriter?: PipeWriter;
    contentLength?: number | undefined;
    contentType?: string | undefined;
    cookies?: IResponseCookies;
    hasStarted?: boolean;
}

export class IActionConstraintMetadata implements IIActionConstraintMetadata {

    constructor(data?: IIActionConstraintMetadata) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IActionConstraintMetadata {
        data = typeof data === 'object' ? data : {};
        let result = new IActionConstraintMetadata();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIActionConstraintMetadata {
}

export class ICustomAttributeProvider implements IICustomAttributeProvider {

    constructor(data?: IICustomAttributeProvider) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): ICustomAttributeProvider {
        data = typeof data === 'object' ? data : {};
        let result = new ICustomAttributeProvider();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IICustomAttributeProvider {
}

export class IFilterMetadata implements IIFilterMetadata {

    constructor(data?: IIFilterMetadata) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IFilterMetadata {
        data = typeof data === 'object' ? data : {};
        let result = new IFilterMetadata();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIFilterMetadata {
}

export class IIdentity implements IIIdentity {
    readonly name?: string | undefined;
    readonly authenticationType?: string | undefined;
    readonly isAuthenticated?: boolean;

    constructor(data?: IIIdentity) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).name = _data["name"];
            (<any>this).authenticationType = _data["authenticationType"];
            (<any>this).isAuthenticated = _data["isAuthenticated"];
        }
    }

    static fromJS(data: any): IIdentity {
        data = typeof data === 'object' ? data : {};
        let result = new IIdentity();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["authenticationType"] = this.authenticationType;
        data["isAuthenticated"] = this.isAuthenticated;
        return data;
    }
}

export interface IIIdentity {
    name?: string | undefined;
    authenticationType?: string | undefined;
    isAuthenticated?: boolean;
}

export class IOutputFormatter implements IIOutputFormatter {

    constructor(data?: IIOutputFormatter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IOutputFormatter {
        data = typeof data === 'object' ? data : {};
        let result = new IOutputFormatter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIOutputFormatter {
}

export class IPAddress implements IIPAddress {
    addressFamily?: AddressFamily;
    scopeId?: number;
    readonly isIPv6Multicast?: boolean;
    readonly isIPv6LinkLocal?: boolean;
    readonly isIPv6SiteLocal?: boolean;
    readonly isIPv6Teredo?: boolean;
    readonly isIPv6UniqueLocal?: boolean;
    readonly isIPv4MappedToIPv6?: boolean;
    address?: number;

    constructor(data?: IIPAddress) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.addressFamily = _data["addressFamily"];
            this.scopeId = _data["scopeId"];
            (<any>this).isIPv6Multicast = _data["isIPv6Multicast"];
            (<any>this).isIPv6LinkLocal = _data["isIPv6LinkLocal"];
            (<any>this).isIPv6SiteLocal = _data["isIPv6SiteLocal"];
            (<any>this).isIPv6Teredo = _data["isIPv6Teredo"];
            (<any>this).isIPv6UniqueLocal = _data["isIPv6UniqueLocal"];
            (<any>this).isIPv4MappedToIPv6 = _data["isIPv4MappedToIPv6"];
            this.address = _data["address"];
        }
    }

    static fromJS(data: any): IPAddress {
        data = typeof data === 'object' ? data : {};
        let result = new IPAddress();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["addressFamily"] = this.addressFamily;
        data["scopeId"] = this.scopeId;
        data["isIPv6Multicast"] = this.isIPv6Multicast;
        data["isIPv6LinkLocal"] = this.isIPv6LinkLocal;
        data["isIPv6SiteLocal"] = this.isIPv6SiteLocal;
        data["isIPv6Teredo"] = this.isIPv6Teredo;
        data["isIPv6UniqueLocal"] = this.isIPv6UniqueLocal;
        data["isIPv4MappedToIPv6"] = this.isIPv4MappedToIPv6;
        data["address"] = this.address;
        return data;
    }
}

export interface IIPAddress {
    addressFamily?: AddressFamily;
    scopeId?: number;
    isIPv6Multicast?: boolean;
    isIPv6LinkLocal?: boolean;
    isIPv6SiteLocal?: boolean;
    isIPv6Teredo?: boolean;
    isIPv6UniqueLocal?: boolean;
    isIPv4MappedToIPv6?: boolean;
    address?: number;
}

export class IPropertyFilterProvider implements IIPropertyFilterProvider {
    propertyFilter?: ModelMetadataBooleanFunc;

    constructor(data?: IIPropertyFilterProvider) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.propertyFilter = _data["propertyFilter"] ? ModelMetadataBooleanFunc.fromJS(_data["propertyFilter"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IPropertyFilterProvider {
        data = typeof data === 'object' ? data : {};
        let result = new IPropertyFilterProvider();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["propertyFilter"] = this.propertyFilter ? this.propertyFilter.toJSON() : <any>undefined;
        return data;
    }
}

export interface IIPropertyFilterProvider {
    propertyFilter?: ModelMetadataBooleanFunc;
}

export class IResponseCookies implements IIResponseCookies {

    constructor(data?: IIResponseCookies) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IResponseCookies {
        data = typeof data === 'object' ? data : {};
        let result = new IResponseCookies();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIResponseCookies {
}

export class IRouter implements IIRouter {

    constructor(data?: IIRouter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IRouter {
        data = typeof data === 'object' ? data : {};
        let result = new IRouter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIRouter {
}

export class IServiceProvider implements IIServiceProvider {

    constructor(data?: IIServiceProvider) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IServiceProvider {
        data = typeof data === 'object' ? data : {};
        let result = new IServiceProvider();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIServiceProvider {
}

export class ISession implements IISession {
    readonly isAvailable?: boolean;
    readonly id?: string | undefined;
    readonly keys?: string[] | undefined;

    constructor(data?: IISession) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).isAvailable = _data["isAvailable"];
            (<any>this).id = _data["id"];
            if (Array.isArray(_data["keys"])) {
                (<any>this).keys = [] as any;
                for (let item of _data["keys"])
                    (<any>this).keys!.push(item);
            }
        }
    }

    static fromJS(data: any): ISession {
        data = typeof data === 'object' ? data : {};
        let result = new ISession();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isAvailable"] = this.isAvailable;
        data["id"] = this.id;
        if (Array.isArray(this.keys)) {
            data["keys"] = [];
            for (let item of this.keys)
                data["keys"].push(item);
        }
        return data;
    }
}

export interface IISession {
    isAvailable?: boolean;
    id?: string | undefined;
    keys?: string[] | undefined;
}

export class IUrlHelper implements IIUrlHelper {
    actionContext?: ActionContext;

    constructor(data?: IIUrlHelper) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.actionContext = _data["actionContext"] ? ActionContext.fromJS(_data["actionContext"]) : <any>undefined;
        }
    }

    static fromJS(data: any): IUrlHelper {
        data = typeof data === 'object' ? data : {};
        let result = new IUrlHelper();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["actionContext"] = this.actionContext ? this.actionContext.toJSON() : <any>undefined;
        return data;
    }
}

export interface IIUrlHelper {
    actionContext?: ActionContext;
}

export class IntPtr implements IIntPtr {

    constructor(data?: IIntPtr) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
    }

    static fromJS(data: any): IntPtr {
        data = typeof data === 'object' ? data : {};
        let result = new IntPtr();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        return data;
    }
}

export interface IIntPtr {
}

export class KeySizes implements IKeySizes {
    minSize?: number;
    maxSize?: number;
    skipSize?: number;

    constructor(data?: IKeySizes) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.minSize = _data["minSize"];
            this.maxSize = _data["maxSize"];
            this.skipSize = _data["skipSize"];
        }
    }

    static fromJS(data: any): KeySizes {
        data = typeof data === 'object' ? data : {};
        let result = new KeySizes();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["minSize"] = this.minSize;
        data["maxSize"] = this.maxSize;
        data["skipSize"] = this.skipSize;
        return data;
    }
}

export interface IKeySizes {
    minSize?: number;
    maxSize?: number;
    skipSize?: number;
}

export class Language implements ILanguage {
    readonly textCode?: string | undefined;
    enumCode?: LanguageCode;
    suppressScript?: Script;
    macrolanguage?: Language;
    prefix?: Language;
    scope?: LanguageScope;
    readonly extLanguageAvailable?: boolean;
    readonly privateUse?: boolean;
    readonly deprecated?: boolean;

    constructor(data?: ILanguage) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).textCode = _data["textCode"];
            this.enumCode = _data["enumCode"];
            this.suppressScript = _data["suppressScript"] ? Script.fromJS(_data["suppressScript"]) : <any>undefined;
            this.macrolanguage = _data["macrolanguage"] ? Language.fromJS(_data["macrolanguage"]) : <any>undefined;
            this.prefix = _data["prefix"] ? Language.fromJS(_data["prefix"]) : <any>undefined;
            this.scope = _data["scope"];
            (<any>this).extLanguageAvailable = _data["extLanguageAvailable"];
            (<any>this).privateUse = _data["privateUse"];
            (<any>this).deprecated = _data["deprecated"];
        }
    }

    static fromJS(data: any): Language {
        data = typeof data === 'object' ? data : {};
        let result = new Language();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["textCode"] = this.textCode;
        data["enumCode"] = this.enumCode;
        data["suppressScript"] = this.suppressScript ? this.suppressScript.toJSON() : <any>undefined;
        data["macrolanguage"] = this.macrolanguage ? this.macrolanguage.toJSON() : <any>undefined;
        data["prefix"] = this.prefix ? this.prefix.toJSON() : <any>undefined;
        data["scope"] = this.scope;
        data["extLanguageAvailable"] = this.extLanguageAvailable;
        data["privateUse"] = this.privateUse;
        data["deprecated"] = this.deprecated;
        return data;
    }
}

export interface ILanguage {
    textCode?: string | undefined;
    enumCode?: LanguageCode;
    suppressScript?: Script;
    macrolanguage?: Language;
    prefix?: Language;
    scope?: LanguageScope;
    extLanguageAvailable?: boolean;
    privateUse?: boolean;
    deprecated?: boolean;
}

export enum LanguageCode {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
    _7 = 7,
    _8 = 8,
    _9 = 9,
    _10 = 10,
    _11 = 11,
    _12 = 12,
    _13 = 13,
    _14 = 14,
    _15 = 15,
    _16 = 16,
    _17 = 17,
    _18 = 18,
    _19 = 19,
    _20 = 20,
    _21 = 21,
    _22 = 22,
    _23 = 23,
    _24 = 24,
    _25 = 25,
    _26 = 26,
    _27 = 27,
    _28 = 28,
    _29 = 29,
    _30 = 30,
    _31 = 31,
    _32 = 32,
    _33 = 33,
    _34 = 34,
    _35 = 35,
    _36 = 36,
    _37 = 37,
    _38 = 38,
    _39 = 39,
    _40 = 40,
    _41 = 41,
    _42 = 42,
    _43 = 43,
    _44 = 44,
    _45 = 45,
    _46 = 46,
    _47 = 47,
    _48 = 48,
    _49 = 49,
    _50 = 50,
    _51 = 51,
    _52 = 52,
    _53 = 53,
    _54 = 54,
    _55 = 55,
    _56 = 56,
    _57 = 57,
    _58 = 58,
    _59 = 59,
    _60 = 60,
    _61 = 61,
    _62 = 62,
    _63 = 63,
    _64 = 64,
    _65 = 65,
    _66 = 66,
    _67 = 67,
    _68 = 68,
    _69 = 69,
    _70 = 70,
    _71 = 71,
    _72 = 72,
    _73 = 73,
    _74 = 74,
    _75 = 75,
    _76 = 76,
    _77 = 77,
    _78 = 78,
    _79 = 79,
    _80 = 80,
    _81 = 81,
    _82 = 82,
    _83 = 83,
    _84 = 84,
    _85 = 85,
    _86 = 86,
    _87 = 87,
    _88 = 88,
    _89 = 89,
    _90 = 90,
    _91 = 91,
    _92 = 92,
    _93 = 93,
    _94 = 94,
    _95 = 95,
    _96 = 96,
    _97 = 97,
    _98 = 98,
    _99 = 99,
    _100 = 100,
    _101 = 101,
    _102 = 102,
    _103 = 103,
    _104 = 104,
    _105 = 105,
    _106 = 106,
    _107 = 107,
    _108 = 108,
    _109 = 109,
    _110 = 110,
    _111 = 111,
    _112 = 112,
    _113 = 113,
    _114 = 114,
    _115 = 115,
    _116 = 116,
    _117 = 117,
    _118 = 118,
    _119 = 119,
    _120 = 120,
    _121 = 121,
    _122 = 122,
    _123 = 123,
    _124 = 124,
    _125 = 125,
    _126 = 126,
    _127 = 127,
    _128 = 128,
    _129 = 129,
    _130 = 130,
    _131 = 131,
    _132 = 132,
    _133 = 133,
    _134 = 134,
    _135 = 135,
    _136 = 136,
    _137 = 137,
    _138 = 138,
    _139 = 139,
    _140 = 140,
    _141 = 141,
    _142 = 142,
    _143 = 143,
    _144 = 144,
    _145 = 145,
    _146 = 146,
    _147 = 147,
    _148 = 148,
    _149 = 149,
    _150 = 150,
    _151 = 151,
    _152 = 152,
    _153 = 153,
    _154 = 154,
    _155 = 155,
    _156 = 156,
    _157 = 157,
    _158 = 158,
    _159 = 159,
    _160 = 160,
    _161 = 161,
    _162 = 162,
    _163 = 163,
    _164 = 164,
    _165 = 165,
    _166 = 166,
    _167 = 167,
    _168 = 168,
    _169 = 169,
    _170 = 170,
    _171 = 171,
    _172 = 172,
    _173 = 173,
    _174 = 174,
    _175 = 175,
    _176 = 176,
    _177 = 177,
    _178 = 178,
    _179 = 179,
    _180 = 180,
    _181 = 181,
    _182 = 182,
    _183 = 183,
    _184 = 184,
    _185 = 185,
    _186 = 186,
    _187 = 187,
    _188 = 188,
    _189 = 189,
    _190 = 190,
    _191 = 191,
    _192 = 192,
    _193 = 193,
    _194 = 194,
    _195 = 195,
    _196 = 196,
    _197 = 197,
    _198 = 198,
    _199 = 199,
    _200 = 200,
    _201 = 201,
    _202 = 202,
    _203 = 203,
    _204 = 204,
    _205 = 205,
    _206 = 206,
    _207 = 207,
    _208 = 208,
    _209 = 209,
    _210 = 210,
    _211 = 211,
    _212 = 212,
    _213 = 213,
    _214 = 214,
    _215 = 215,
    _216 = 216,
    _217 = 217,
    _218 = 218,
    _219 = 219,
    _220 = 220,
    _221 = 221,
    _222 = 222,
    _223 = 223,
    _224 = 224,
    _225 = 225,
    _226 = 226,
    _227 = 227,
    _228 = 228,
    _229 = 229,
    _230 = 230,
    _231 = 231,
    _232 = 232,
    _233 = 233,
    _234 = 234,
    _235 = 235,
    _236 = 236,
    _237 = 237,
    _238 = 238,
    _239 = 239,
    _240 = 240,
    _241 = 241,
    _242 = 242,
    _243 = 243,
    _244 = 244,
    _245 = 245,
    _246 = 246,
    _247 = 247,
    _248 = 248,
    _249 = 249,
    _250 = 250,
    _251 = 251,
    _252 = 252,
    _253 = 253,
    _254 = 254,
    _255 = 255,
    _256 = 256,
    _257 = 257,
    _258 = 258,
    _259 = 259,
    _260 = 260,
    _261 = 261,
    _262 = 262,
    _263 = 263,
    _264 = 264,
    _265 = 265,
    _266 = 266,
    _267 = 267,
    _268 = 268,
    _269 = 269,
    _270 = 270,
    _271 = 271,
    _272 = 272,
    _273 = 273,
    _274 = 274,
    _275 = 275,
    _276 = 276,
    _277 = 277,
    _278 = 278,
    _279 = 279,
    _280 = 280,
    _281 = 281,
    _282 = 282,
    _283 = 283,
    _284 = 284,
    _285 = 285,
    _286 = 286,
    _287 = 287,
    _288 = 288,
    _289 = 289,
    _290 = 290,
    _291 = 291,
    _292 = 292,
    _293 = 293,
    _294 = 294,
    _295 = 295,
    _296 = 296,
    _297 = 297,
    _298 = 298,
    _299 = 299,
    _300 = 300,
    _301 = 301,
    _302 = 302,
    _303 = 303,
    _304 = 304,
    _305 = 305,
    _306 = 306,
    _307 = 307,
    _308 = 308,
    _309 = 309,
    _310 = 310,
    _311 = 311,
    _312 = 312,
    _313 = 313,
    _314 = 314,
    _315 = 315,
    _316 = 316,
    _317 = 317,
    _318 = 318,
    _319 = 319,
    _320 = 320,
    _321 = 321,
    _322 = 322,
    _323 = 323,
    _324 = 324,
    _325 = 325,
    _326 = 326,
    _327 = 327,
    _328 = 328,
    _329 = 329,
    _330 = 330,
    _331 = 331,
    _332 = 332,
    _333 = 333,
    _334 = 334,
    _335 = 335,
    _336 = 336,
    _337 = 337,
    _338 = 338,
    _339 = 339,
    _340 = 340,
    _341 = 341,
    _342 = 342,
    _343 = 343,
    _344 = 344,
    _345 = 345,
    _346 = 346,
    _347 = 347,
    _348 = 348,
    _349 = 349,
    _350 = 350,
    _351 = 351,
    _352 = 352,
    _353 = 353,
    _354 = 354,
    _355 = 355,
    _356 = 356,
    _357 = 357,
    _358 = 358,
    _359 = 359,
    _360 = 360,
    _361 = 361,
    _362 = 362,
    _363 = 363,
    _364 = 364,
    _365 = 365,
    _366 = 366,
    _367 = 367,
    _368 = 368,
    _369 = 369,
    _370 = 370,
    _371 = 371,
    _372 = 372,
    _373 = 373,
    _374 = 374,
    _375 = 375,
    _376 = 376,
    _377 = 377,
    _378 = 378,
    _379 = 379,
    _380 = 380,
    _381 = 381,
    _382 = 382,
    _383 = 383,
    _384 = 384,
    _385 = 385,
    _386 = 386,
    _387 = 387,
    _388 = 388,
    _389 = 389,
    _390 = 390,
    _391 = 391,
    _392 = 392,
    _393 = 393,
    _394 = 394,
    _395 = 395,
    _396 = 396,
    _397 = 397,
    _398 = 398,
    _399 = 399,
    _400 = 400,
    _401 = 401,
    _402 = 402,
    _403 = 403,
    _404 = 404,
    _405 = 405,
    _406 = 406,
    _407 = 407,
    _408 = 408,
    _409 = 409,
    _410 = 410,
    _411 = 411,
    _412 = 412,
    _413 = 413,
    _414 = 414,
    _415 = 415,
    _416 = 416,
    _417 = 417,
    _418 = 418,
    _419 = 419,
    _420 = 420,
    _421 = 421,
    _422 = 422,
    _423 = 423,
    _424 = 424,
    _425 = 425,
    _426 = 426,
    _427 = 427,
    _428 = 428,
    _429 = 429,
    _430 = 430,
    _431 = 431,
    _432 = 432,
    _433 = 433,
    _434 = 434,
    _435 = 435,
    _436 = 436,
    _437 = 437,
    _438 = 438,
    _439 = 439,
    _440 = 440,
    _441 = 441,
    _442 = 442,
    _443 = 443,
    _444 = 444,
    _445 = 445,
    _446 = 446,
    _447 = 447,
    _448 = 448,
    _449 = 449,
    _450 = 450,
    _451 = 451,
    _452 = 452,
    _453 = 453,
    _454 = 454,
    _455 = 455,
    _456 = 456,
    _457 = 457,
    _458 = 458,
    _459 = 459,
    _460 = 460,
    _461 = 461,
    _462 = 462,
    _463 = 463,
    _464 = 464,
    _465 = 465,
    _466 = 466,
    _467 = 467,
    _468 = 468,
    _469 = 469,
    _470 = 470,
    _471 = 471,
    _472 = 472,
    _473 = 473,
    _474 = 474,
    _475 = 475,
    _476 = 476,
    _477 = 477,
    _478 = 478,
    _479 = 479,
    _480 = 480,
    _481 = 481,
    _482 = 482,
    _483 = 483,
    _484 = 484,
    _485 = 485,
    _486 = 486,
    _487 = 487,
    _488 = 488,
    _489 = 489,
    _490 = 490,
    _491 = 491,
    _492 = 492,
    _493 = 493,
    _494 = 494,
    _495 = 495,
    _496 = 496,
    _497 = 497,
    _498 = 498,
    _499 = 499,
    _500 = 500,
    _501 = 501,
    _502 = 502,
    _503 = 503,
    _504 = 504,
    _505 = 505,
    _506 = 506,
    _507 = 507,
    _508 = 508,
    _509 = 509,
    _510 = 510,
    _511 = 511,
    _512 = 512,
    _513 = 513,
    _514 = 514,
    _515 = 515,
    _516 = 516,
    _517 = 517,
    _518 = 518,
    _519 = 519,
    _520 = 520,
    _521 = 521,
    _522 = 522,
    _523 = 523,
    _524 = 524,
    _525 = 525,
    _526 = 526,
    _527 = 527,
    _528 = 528,
    _529 = 529,
    _530 = 530,
    _531 = 531,
    _532 = 532,
    _533 = 533,
    _534 = 534,
    _535 = 535,
    _536 = 536,
    _537 = 537,
    _538 = 538,
    _539 = 539,
    _540 = 540,
    _541 = 541,
    _542 = 542,
    _543 = 543,
    _544 = 544,
    _545 = 545,
    _546 = 546,
    _547 = 547,
    _548 = 548,
    _549 = 549,
    _550 = 550,
    _551 = 551,
    _552 = 552,
    _553 = 553,
    _554 = 554,
    _555 = 555,
    _556 = 556,
    _557 = 557,
    _558 = 558,
    _559 = 559,
    _560 = 560,
    _561 = 561,
    _562 = 562,
    _563 = 563,
    _564 = 564,
    _565 = 565,
    _566 = 566,
    _567 = 567,
    _568 = 568,
    _569 = 569,
    _570 = 570,
    _571 = 571,
    _572 = 572,
    _573 = 573,
    _574 = 574,
    _575 = 575,
    _576 = 576,
    _577 = 577,
    _578 = 578,
    _579 = 579,
    _580 = 580,
    _581 = 581,
    _582 = 582,
    _583 = 583,
    _584 = 584,
    _585 = 585,
    _586 = 586,
    _587 = 587,
    _588 = 588,
    _589 = 589,
    _590 = 590,
    _591 = 591,
    _592 = 592,
    _593 = 593,
    _594 = 594,
    _595 = 595,
    _596 = 596,
    _597 = 597,
    _598 = 598,
    _599 = 599,
    _600 = 600,
    _601 = 601,
    _602 = 602,
    _603 = 603,
    _604 = 604,
    _605 = 605,
    _606 = 606,
    _607 = 607,
    _608 = 608,
    _609 = 609,
    _610 = 610,
    _611 = 611,
    _612 = 612,
    _613 = 613,
    _614 = 614,
    _615 = 615,
    _616 = 616,
    _617 = 617,
    _618 = 618,
    _619 = 619,
    _620 = 620,
    _621 = 621,
    _622 = 622,
    _623 = 623,
    _624 = 624,
    _625 = 625,
    _626 = 626,
    _627 = 627,
    _628 = 628,
    _629 = 629,
    _630 = 630,
    _631 = 631,
    _632 = 632,
    _633 = 633,
    _634 = 634,
    _635 = 635,
    _636 = 636,
    _637 = 637,
    _638 = 638,
    _639 = 639,
    _640 = 640,
    _641 = 641,
    _642 = 642,
    _643 = 643,
    _644 = 644,
    _645 = 645,
    _646 = 646,
    _647 = 647,
    _648 = 648,
    _649 = 649,
    _650 = 650,
    _651 = 651,
    _652 = 652,
    _653 = 653,
    _654 = 654,
    _655 = 655,
    _656 = 656,
    _657 = 657,
    _658 = 658,
    _659 = 659,
    _660 = 660,
    _661 = 661,
    _662 = 662,
    _663 = 663,
    _664 = 664,
    _665 = 665,
    _666 = 666,
    _667 = 667,
    _668 = 668,
    _669 = 669,
    _670 = 670,
    _671 = 671,
    _672 = 672,
    _673 = 673,
    _674 = 674,
    _675 = 675,
    _676 = 676,
    _677 = 677,
    _678 = 678,
    _679 = 679,
    _680 = 680,
    _681 = 681,
    _682 = 682,
    _683 = 683,
    _684 = 684,
    _685 = 685,
    _686 = 686,
    _687 = 687,
    _688 = 688,
    _689 = 689,
    _690 = 690,
    _691 = 691,
    _692 = 692,
    _693 = 693,
    _694 = 694,
    _695 = 695,
    _696 = 696,
    _697 = 697,
    _698 = 698,
    _699 = 699,
    _700 = 700,
    _701 = 701,
    _702 = 702,
    _703 = 703,
    _704 = 704,
    _705 = 705,
    _706 = 706,
    _707 = 707,
    _708 = 708,
    _709 = 709,
    _710 = 710,
    _711 = 711,
    _712 = 712,
    _713 = 713,
    _714 = 714,
    _715 = 715,
    _716 = 716,
    _717 = 717,
    _718 = 718,
    _719 = 719,
    _720 = 720,
    _721 = 721,
    _722 = 722,
    _723 = 723,
    _724 = 724,
    _725 = 725,
    _726 = 726,
    _727 = 727,
    _728 = 728,
    _729 = 729,
    _730 = 730,
    _731 = 731,
    _732 = 732,
    _733 = 733,
    _734 = 734,
    _735 = 735,
    _736 = 736,
    _737 = 737,
    _738 = 738,
    _739 = 739,
    _740 = 740,
    _741 = 741,
    _742 = 742,
    _743 = 743,
    _744 = 744,
    _745 = 745,
    _746 = 746,
    _747 = 747,
    _748 = 748,
    _749 = 749,
    _750 = 750,
    _751 = 751,
    _752 = 752,
    _753 = 753,
    _754 = 754,
    _755 = 755,
    _756 = 756,
    _757 = 757,
    _758 = 758,
    _759 = 759,
    _760 = 760,
    _761 = 761,
    _762 = 762,
    _763 = 763,
    _764 = 764,
    _765 = 765,
    _766 = 766,
    _767 = 767,
    _768 = 768,
    _769 = 769,
    _770 = 770,
    _771 = 771,
    _772 = 772,
    _773 = 773,
    _774 = 774,
    _775 = 775,
    _776 = 776,
    _777 = 777,
    _778 = 778,
    _779 = 779,
    _780 = 780,
    _781 = 781,
    _782 = 782,
    _783 = 783,
    _784 = 784,
    _785 = 785,
    _786 = 786,
    _787 = 787,
    _788 = 788,
    _789 = 789,
    _790 = 790,
    _791 = 791,
    _792 = 792,
    _793 = 793,
    _794 = 794,
    _795 = 795,
    _796 = 796,
    _797 = 797,
    _798 = 798,
    _799 = 799,
    _800 = 800,
    _801 = 801,
    _802 = 802,
    _803 = 803,
    _804 = 804,
    _805 = 805,
    _806 = 806,
    _807 = 807,
    _808 = 808,
    _809 = 809,
    _810 = 810,
    _811 = 811,
    _812 = 812,
    _813 = 813,
    _814 = 814,
    _815 = 815,
    _816 = 816,
    _817 = 817,
    _818 = 818,
    _819 = 819,
    _820 = 820,
    _821 = 821,
    _822 = 822,
    _823 = 823,
    _824 = 824,
    _825 = 825,
    _826 = 826,
    _827 = 827,
    _828 = 828,
    _829 = 829,
    _830 = 830,
    _831 = 831,
    _832 = 832,
    _833 = 833,
    _834 = 834,
    _835 = 835,
    _836 = 836,
    _837 = 837,
    _838 = 838,
    _839 = 839,
    _840 = 840,
    _841 = 841,
    _842 = 842,
    _843 = 843,
    _844 = 844,
    _845 = 845,
    _846 = 846,
    _847 = 847,
    _848 = 848,
    _849 = 849,
    _850 = 850,
    _851 = 851,
    _852 = 852,
    _853 = 853,
    _854 = 854,
    _855 = 855,
    _856 = 856,
    _857 = 857,
    _858 = 858,
    _859 = 859,
    _860 = 860,
    _861 = 861,
    _862 = 862,
    _863 = 863,
    _864 = 864,
    _865 = 865,
    _866 = 866,
    _867 = 867,
    _868 = 868,
    _869 = 869,
    _870 = 870,
    _871 = 871,
    _872 = 872,
    _873 = 873,
    _874 = 874,
    _875 = 875,
    _876 = 876,
    _877 = 877,
    _878 = 878,
    _879 = 879,
    _880 = 880,
    _881 = 881,
    _882 = 882,
    _883 = 883,
    _884 = 884,
    _885 = 885,
    _886 = 886,
    _887 = 887,
    _888 = 888,
    _889 = 889,
    _890 = 890,
    _891 = 891,
    _892 = 892,
    _893 = 893,
    _894 = 894,
    _895 = 895,
    _896 = 896,
    _897 = 897,
    _898 = 898,
    _899 = 899,
    _900 = 900,
    _901 = 901,
    _902 = 902,
    _903 = 903,
    _904 = 904,
    _905 = 905,
    _906 = 906,
    _907 = 907,
    _908 = 908,
    _909 = 909,
    _910 = 910,
    _911 = 911,
    _912 = 912,
    _913 = 913,
    _914 = 914,
    _915 = 915,
    _916 = 916,
    _917 = 917,
    _918 = 918,
    _919 = 919,
    _920 = 920,
    _921 = 921,
    _922 = 922,
    _923 = 923,
    _924 = 924,
    _925 = 925,
    _926 = 926,
    _927 = 927,
    _928 = 928,
    _929 = 929,
    _930 = 930,
    _931 = 931,
    _932 = 932,
    _933 = 933,
    _934 = 934,
    _935 = 935,
    _936 = 936,
    _937 = 937,
    _938 = 938,
    _939 = 939,
    _940 = 940,
    _941 = 941,
    _942 = 942,
    _943 = 943,
    _944 = 944,
    _945 = 945,
    _946 = 946,
    _947 = 947,
    _948 = 948,
    _949 = 949,
    _950 = 950,
    _951 = 951,
    _952 = 952,
    _953 = 953,
    _954 = 954,
    _955 = 955,
    _956 = 956,
    _957 = 957,
    _958 = 958,
    _959 = 959,
    _960 = 960,
    _961 = 961,
    _962 = 962,
    _963 = 963,
    _964 = 964,
    _965 = 965,
    _966 = 966,
    _967 = 967,
    _968 = 968,
    _969 = 969,
    _970 = 970,
    _971 = 971,
    _972 = 972,
    _973 = 973,
    _974 = 974,
    _975 = 975,
    _976 = 976,
    _977 = 977,
    _978 = 978,
    _979 = 979,
    _980 = 980,
    _981 = 981,
    _982 = 982,
    _983 = 983,
    _984 = 984,
    _985 = 985,
    _986 = 986,
    _987 = 987,
    _988 = 988,
    _989 = 989,
    _990 = 990,
    _991 = 991,
    _992 = 992,
    _993 = 993,
    _994 = 994,
    _995 = 995,
    _996 = 996,
    _997 = 997,
    _998 = 998,
    _999 = 999,
    _1000 = 1000,
    _1001 = 1001,
    _1002 = 1002,
    _1003 = 1003,
    _1004 = 1004,
    _1005 = 1005,
    _1006 = 1006,
    _1007 = 1007,
    _1008 = 1008,
    _1009 = 1009,
    _1010 = 1010,
    _1011 = 1011,
    _1012 = 1012,
    _1013 = 1013,
    _1014 = 1014,
    _1015 = 1015,
    _1016 = 1016,
    _1017 = 1017,
    _1018 = 1018,
    _1019 = 1019,
    _1020 = 1020,
    _1021 = 1021,
    _1022 = 1022,
    _1023 = 1023,
    _1024 = 1024,
    _1025 = 1025,
    _1026 = 1026,
    _1027 = 1027,
    _1028 = 1028,
    _1029 = 1029,
    _1030 = 1030,
    _1031 = 1031,
    _1032 = 1032,
    _1033 = 1033,
    _1034 = 1034,
    _1035 = 1035,
    _1036 = 1036,
    _1037 = 1037,
    _1038 = 1038,
    _1039 = 1039,
    _1040 = 1040,
    _1041 = 1041,
    _1042 = 1042,
    _1043 = 1043,
    _1044 = 1044,
    _1045 = 1045,
    _1046 = 1046,
    _1047 = 1047,
    _1048 = 1048,
    _1049 = 1049,
    _1050 = 1050,
    _1051 = 1051,
    _1052 = 1052,
    _1053 = 1053,
    _1054 = 1054,
    _1055 = 1055,
    _1056 = 1056,
    _1057 = 1057,
    _1058 = 1058,
    _1059 = 1059,
    _1060 = 1060,
    _1061 = 1061,
    _1062 = 1062,
    _1063 = 1063,
    _1064 = 1064,
    _1065 = 1065,
    _1066 = 1066,
    _1067 = 1067,
    _1068 = 1068,
    _1069 = 1069,
    _1070 = 1070,
    _1071 = 1071,
    _1072 = 1072,
    _1073 = 1073,
    _1074 = 1074,
    _1075 = 1075,
    _1076 = 1076,
    _1077 = 1077,
    _1078 = 1078,
    _1079 = 1079,
    _1080 = 1080,
    _1081 = 1081,
    _1082 = 1082,
    _1083 = 1083,
    _1084 = 1084,
    _1085 = 1085,
    _1086 = 1086,
    _1087 = 1087,
    _1088 = 1088,
    _1089 = 1089,
    _1090 = 1090,
    _1091 = 1091,
    _1092 = 1092,
    _1093 = 1093,
    _1094 = 1094,
    _1095 = 1095,
    _1096 = 1096,
    _1097 = 1097,
    _1098 = 1098,
    _1099 = 1099,
    _1100 = 1100,
    _1101 = 1101,
    _1102 = 1102,
    _1103 = 1103,
    _1104 = 1104,
    _1105 = 1105,
    _1106 = 1106,
    _1107 = 1107,
    _1108 = 1108,
    _1109 = 1109,
    _1110 = 1110,
    _1111 = 1111,
    _1112 = 1112,
    _1113 = 1113,
    _1114 = 1114,
    _1115 = 1115,
    _1116 = 1116,
    _1117 = 1117,
    _1118 = 1118,
    _1119 = 1119,
    _1120 = 1120,
    _1121 = 1121,
    _1122 = 1122,
    _1123 = 1123,
    _1124 = 1124,
    _1125 = 1125,
    _1126 = 1126,
    _1127 = 1127,
    _1128 = 1128,
    _1129 = 1129,
    _1130 = 1130,
    _1131 = 1131,
    _1132 = 1132,
    _1133 = 1133,
    _1134 = 1134,
    _1135 = 1135,
    _1136 = 1136,
    _1137 = 1137,
    _1138 = 1138,
    _1139 = 1139,
    _1140 = 1140,
    _1141 = 1141,
    _1142 = 1142,
    _1143 = 1143,
    _1144 = 1144,
    _1145 = 1145,
    _1146 = 1146,
    _1147 = 1147,
    _1148 = 1148,
    _1149 = 1149,
    _1150 = 1150,
    _1151 = 1151,
    _1152 = 1152,
    _1153 = 1153,
    _1154 = 1154,
    _1155 = 1155,
    _1156 = 1156,
    _1157 = 1157,
    _1158 = 1158,
    _1159 = 1159,
    _1160 = 1160,
    _1161 = 1161,
    _1162 = 1162,
    _1163 = 1163,
    _1164 = 1164,
    _1165 = 1165,
    _1166 = 1166,
    _1167 = 1167,
    _1168 = 1168,
    _1169 = 1169,
    _1170 = 1170,
    _1171 = 1171,
    _1172 = 1172,
    _1173 = 1173,
    _1174 = 1174,
    _1175 = 1175,
    _1176 = 1176,
    _1177 = 1177,
    _1178 = 1178,
    _1179 = 1179,
    _1180 = 1180,
    _1181 = 1181,
    _1182 = 1182,
    _1183 = 1183,
    _1184 = 1184,
    _1185 = 1185,
    _1186 = 1186,
    _1187 = 1187,
    _1188 = 1188,
    _1189 = 1189,
    _1190 = 1190,
    _1191 = 1191,
    _1192 = 1192,
    _1193 = 1193,
    _1194 = 1194,
    _1195 = 1195,
    _1196 = 1196,
    _1197 = 1197,
    _1198 = 1198,
    _1199 = 1199,
    _1200 = 1200,
    _1201 = 1201,
    _1202 = 1202,
    _1203 = 1203,
    _1204 = 1204,
    _1205 = 1205,
    _1206 = 1206,
    _1207 = 1207,
    _1208 = 1208,
    _1209 = 1209,
    _1210 = 1210,
    _1211 = 1211,
    _1212 = 1212,
    _1213 = 1213,
    _1214 = 1214,
    _1215 = 1215,
    _1216 = 1216,
    _1217 = 1217,
    _1218 = 1218,
    _1219 = 1219,
    _1220 = 1220,
    _1221 = 1221,
    _1222 = 1222,
    _1223 = 1223,
    _1224 = 1224,
    _1225 = 1225,
    _1226 = 1226,
    _1227 = 1227,
    _1228 = 1228,
    _1229 = 1229,
    _1230 = 1230,
    _1231 = 1231,
    _1232 = 1232,
    _1233 = 1233,
    _1234 = 1234,
    _1235 = 1235,
    _1236 = 1236,
    _1237 = 1237,
    _1238 = 1238,
    _1239 = 1239,
    _1240 = 1240,
    _1241 = 1241,
    _1242 = 1242,
    _1243 = 1243,
    _1244 = 1244,
    _1245 = 1245,
    _1246 = 1246,
    _1247 = 1247,
    _1248 = 1248,
    _1249 = 1249,
    _1250 = 1250,
    _1251 = 1251,
    _1252 = 1252,
    _1253 = 1253,
    _1254 = 1254,
    _1255 = 1255,
    _1256 = 1256,
    _1257 = 1257,
    _1258 = 1258,
    _1259 = 1259,
    _1260 = 1260,
    _1261 = 1261,
    _1262 = 1262,
    _1263 = 1263,
    _1264 = 1264,
    _1265 = 1265,
    _1266 = 1266,
    _1267 = 1267,
    _1268 = 1268,
    _1269 = 1269,
    _1270 = 1270,
    _1271 = 1271,
    _1272 = 1272,
    _1273 = 1273,
    _1274 = 1274,
    _1275 = 1275,
    _1276 = 1276,
    _1277 = 1277,
    _1278 = 1278,
    _1279 = 1279,
    _1280 = 1280,
    _1281 = 1281,
    _1282 = 1282,
    _1283 = 1283,
    _1284 = 1284,
    _1285 = 1285,
    _1286 = 1286,
    _1287 = 1287,
    _1288 = 1288,
    _1289 = 1289,
    _1290 = 1290,
    _1291 = 1291,
    _1292 = 1292,
    _1293 = 1293,
    _1294 = 1294,
    _1295 = 1295,
    _1296 = 1296,
    _1297 = 1297,
    _1298 = 1298,
    _1299 = 1299,
    _1300 = 1300,
    _1301 = 1301,
    _1302 = 1302,
    _1303 = 1303,
    _1304 = 1304,
    _1305 = 1305,
    _1306 = 1306,
    _1307 = 1307,
    _1308 = 1308,
    _1309 = 1309,
    _1310 = 1310,
    _1311 = 1311,
    _1312 = 1312,
    _1313 = 1313,
    _1314 = 1314,
    _1315 = 1315,
    _1316 = 1316,
    _1317 = 1317,
    _1318 = 1318,
    _1319 = 1319,
    _1320 = 1320,
    _1321 = 1321,
    _1322 = 1322,
    _1323 = 1323,
    _1324 = 1324,
    _1325 = 1325,
    _1326 = 1326,
    _1327 = 1327,
    _1328 = 1328,
    _1329 = 1329,
    _1330 = 1330,
    _1331 = 1331,
    _1332 = 1332,
    _1333 = 1333,
    _1334 = 1334,
    _1335 = 1335,
    _1336 = 1336,
    _1337 = 1337,
    _1338 = 1338,
    _1339 = 1339,
    _1340 = 1340,
    _1341 = 1341,
    _1342 = 1342,
    _1343 = 1343,
    _1344 = 1344,
    _1345 = 1345,
    _1346 = 1346,
    _1347 = 1347,
    _1348 = 1348,
    _1349 = 1349,
    _1350 = 1350,
    _1351 = 1351,
    _1352 = 1352,
    _1353 = 1353,
    _1354 = 1354,
    _1355 = 1355,
    _1356 = 1356,
    _1357 = 1357,
    _1358 = 1358,
    _1359 = 1359,
    _1360 = 1360,
    _1361 = 1361,
    _1362 = 1362,
    _1363 = 1363,
    _1364 = 1364,
    _1365 = 1365,
    _1366 = 1366,
    _1367 = 1367,
    _1368 = 1368,
    _1369 = 1369,
    _1370 = 1370,
    _1371 = 1371,
    _1372 = 1372,
    _1373 = 1373,
    _1374 = 1374,
    _1375 = 1375,
    _1376 = 1376,
    _1377 = 1377,
    _1378 = 1378,
    _1379 = 1379,
    _1380 = 1380,
    _1381 = 1381,
    _1382 = 1382,
    _1383 = 1383,
    _1384 = 1384,
    _1385 = 1385,
    _1386 = 1386,
    _1387 = 1387,
    _1388 = 1388,
    _1389 = 1389,
    _1390 = 1390,
    _1391 = 1391,
    _1392 = 1392,
    _1393 = 1393,
    _1394 = 1394,
    _1395 = 1395,
    _1396 = 1396,
    _1397 = 1397,
    _1398 = 1398,
    _1399 = 1399,
    _1400 = 1400,
    _1401 = 1401,
    _1402 = 1402,
    _1403 = 1403,
    _1404 = 1404,
    _1405 = 1405,
    _1406 = 1406,
    _1407 = 1407,
    _1408 = 1408,
    _1409 = 1409,
    _1410 = 1410,
    _1411 = 1411,
    _1412 = 1412,
    _1413 = 1413,
    _1414 = 1414,
    _1415 = 1415,
    _1416 = 1416,
    _1417 = 1417,
    _1418 = 1418,
    _1419 = 1419,
    _1420 = 1420,
    _1421 = 1421,
    _1422 = 1422,
    _1423 = 1423,
    _1424 = 1424,
    _1425 = 1425,
    _1426 = 1426,
    _1427 = 1427,
    _1428 = 1428,
    _1429 = 1429,
    _1430 = 1430,
    _1431 = 1431,
    _1432 = 1432,
    _1433 = 1433,
    _1434 = 1434,
    _1435 = 1435,
    _1436 = 1436,
    _1437 = 1437,
    _1438 = 1438,
    _1439 = 1439,
    _1440 = 1440,
    _1441 = 1441,
    _1442 = 1442,
    _1443 = 1443,
    _1444 = 1444,
    _1445 = 1445,
    _1446 = 1446,
    _1447 = 1447,
    _1448 = 1448,
    _1449 = 1449,
    _1450 = 1450,
    _1451 = 1451,
    _1452 = 1452,
    _1453 = 1453,
    _1454 = 1454,
    _1455 = 1455,
    _1456 = 1456,
    _1457 = 1457,
    _1458 = 1458,
    _1459 = 1459,
    _1460 = 1460,
    _1461 = 1461,
    _1462 = 1462,
    _1463 = 1463,
    _1464 = 1464,
    _1465 = 1465,
    _1466 = 1466,
    _1467 = 1467,
    _1468 = 1468,
    _1469 = 1469,
    _1470 = 1470,
    _1471 = 1471,
    _1472 = 1472,
    _1473 = 1473,
    _1474 = 1474,
    _1475 = 1475,
    _1476 = 1476,
    _1477 = 1477,
    _1478 = 1478,
    _1479 = 1479,
    _1480 = 1480,
    _1481 = 1481,
    _1482 = 1482,
    _1483 = 1483,
    _1484 = 1484,
    _1485 = 1485,
    _1486 = 1486,
    _1487 = 1487,
    _1488 = 1488,
    _1489 = 1489,
    _1490 = 1490,
    _1491 = 1491,
    _1492 = 1492,
    _1493 = 1493,
    _1494 = 1494,
    _1495 = 1495,
    _1496 = 1496,
    _1497 = 1497,
    _1498 = 1498,
    _1499 = 1499,
    _1500 = 1500,
    _1501 = 1501,
    _1502 = 1502,
    _1503 = 1503,
    _1504 = 1504,
    _1505 = 1505,
    _1506 = 1506,
    _1507 = 1507,
    _1508 = 1508,
    _1509 = 1509,
    _1510 = 1510,
    _1511 = 1511,
    _1512 = 1512,
    _1513 = 1513,
    _1514 = 1514,
    _1515 = 1515,
    _1516 = 1516,
    _1517 = 1517,
    _1518 = 1518,
    _1519 = 1519,
    _1520 = 1520,
    _1521 = 1521,
    _1522 = 1522,
    _1523 = 1523,
    _1524 = 1524,
    _1525 = 1525,
    _1526 = 1526,
    _1527 = 1527,
    _1528 = 1528,
    _1529 = 1529,
    _1530 = 1530,
    _1531 = 1531,
    _1532 = 1532,
    _1533 = 1533,
    _1534 = 1534,
    _1535 = 1535,
    _1536 = 1536,
    _1537 = 1537,
    _1538 = 1538,
    _1539 = 1539,
    _1540 = 1540,
    _1541 = 1541,
    _1542 = 1542,
    _1543 = 1543,
    _1544 = 1544,
    _1545 = 1545,
    _1546 = 1546,
    _1547 = 1547,
    _1548 = 1548,
    _1549 = 1549,
    _1550 = 1550,
    _1551 = 1551,
    _1552 = 1552,
    _1553 = 1553,
    _1554 = 1554,
    _1555 = 1555,
    _1556 = 1556,
    _1557 = 1557,
    _1558 = 1558,
    _1559 = 1559,
    _1560 = 1560,
    _1561 = 1561,
    _1562 = 1562,
    _1563 = 1563,
    _1564 = 1564,
    _1565 = 1565,
    _1566 = 1566,
    _1567 = 1567,
    _1568 = 1568,
    _1569 = 1569,
    _1570 = 1570,
    _1571 = 1571,
    _1572 = 1572,
    _1573 = 1573,
    _1574 = 1574,
    _1575 = 1575,
    _1576 = 1576,
    _1577 = 1577,
    _1578 = 1578,
    _1579 = 1579,
    _1580 = 1580,
    _1581 = 1581,
    _1582 = 1582,
    _1583 = 1583,
    _1584 = 1584,
    _1585 = 1585,
    _1586 = 1586,
    _1587 = 1587,
    _1588 = 1588,
    _1589 = 1589,
    _1590 = 1590,
    _1591 = 1591,
    _1592 = 1592,
    _1593 = 1593,
    _1594 = 1594,
    _1595 = 1595,
    _1596 = 1596,
    _1597 = 1597,
    _1598 = 1598,
    _1599 = 1599,
    _1600 = 1600,
    _1601 = 1601,
    _1602 = 1602,
    _1603 = 1603,
    _1604 = 1604,
    _1605 = 1605,
    _1606 = 1606,
    _1607 = 1607,
    _1608 = 1608,
    _1609 = 1609,
    _1610 = 1610,
    _1611 = 1611,
    _1612 = 1612,
    _1613 = 1613,
    _1614 = 1614,
    _1615 = 1615,
    _1616 = 1616,
    _1617 = 1617,
    _1618 = 1618,
    _1619 = 1619,
    _1620 = 1620,
    _1621 = 1621,
    _1622 = 1622,
    _1623 = 1623,
    _1624 = 1624,
    _1625 = 1625,
    _1626 = 1626,
    _1627 = 1627,
    _1628 = 1628,
    _1629 = 1629,
    _1630 = 1630,
    _1631 = 1631,
    _1632 = 1632,
    _1633 = 1633,
    _1634 = 1634,
    _1635 = 1635,
    _1636 = 1636,
    _1637 = 1637,
    _1638 = 1638,
    _1639 = 1639,
    _1640 = 1640,
    _1641 = 1641,
    _1642 = 1642,
    _1643 = 1643,
    _1644 = 1644,
    _1645 = 1645,
    _1646 = 1646,
    _1647 = 1647,
    _1648 = 1648,
    _1649 = 1649,
    _1650 = 1650,
    _1651 = 1651,
    _1652 = 1652,
    _1653 = 1653,
    _1654 = 1654,
    _1655 = 1655,
    _1656 = 1656,
    _1657 = 1657,
    _1658 = 1658,
    _1659 = 1659,
    _1660 = 1660,
    _1661 = 1661,
    _1662 = 1662,
    _1663 = 1663,
    _1664 = 1664,
    _1665 = 1665,
    _1666 = 1666,
    _1667 = 1667,
    _1668 = 1668,
    _1669 = 1669,
    _1670 = 1670,
    _1671 = 1671,
    _1672 = 1672,
    _1673 = 1673,
    _1674 = 1674,
    _1675 = 1675,
    _1676 = 1676,
    _1677 = 1677,
    _1678 = 1678,
    _1679 = 1679,
    _1680 = 1680,
    _1681 = 1681,
    _1682 = 1682,
    _1683 = 1683,
    _1684 = 1684,
    _1685 = 1685,
    _1686 = 1686,
    _1687 = 1687,
    _1688 = 1688,
    _1689 = 1689,
    _1690 = 1690,
    _1691 = 1691,
    _1692 = 1692,
    _1693 = 1693,
    _1694 = 1694,
    _1695 = 1695,
    _1696 = 1696,
    _1697 = 1697,
    _1698 = 1698,
    _1699 = 1699,
    _1700 = 1700,
    _1701 = 1701,
    _1702 = 1702,
    _1703 = 1703,
    _1704 = 1704,
    _1705 = 1705,
    _1706 = 1706,
    _1707 = 1707,
    _1708 = 1708,
    _1709 = 1709,
    _1710 = 1710,
    _1711 = 1711,
    _1712 = 1712,
    _1713 = 1713,
    _1714 = 1714,
    _1715 = 1715,
    _1716 = 1716,
    _1717 = 1717,
    _1718 = 1718,
    _1719 = 1719,
    _1720 = 1720,
    _1721 = 1721,
    _1722 = 1722,
    _1723 = 1723,
    _1724 = 1724,
    _1725 = 1725,
    _1726 = 1726,
    _1727 = 1727,
    _1728 = 1728,
    _1729 = 1729,
    _1730 = 1730,
    _1731 = 1731,
    _1732 = 1732,
    _1733 = 1733,
    _1734 = 1734,
    _1735 = 1735,
    _1736 = 1736,
    _1737 = 1737,
    _1738 = 1738,
    _1739 = 1739,
    _1740 = 1740,
    _1741 = 1741,
    _1742 = 1742,
    _1743 = 1743,
    _1744 = 1744,
    _1745 = 1745,
    _1746 = 1746,
    _1747 = 1747,
    _1748 = 1748,
    _1749 = 1749,
    _1750 = 1750,
    _1751 = 1751,
    _1752 = 1752,
    _1753 = 1753,
    _1754 = 1754,
    _1755 = 1755,
    _1756 = 1756,
    _1757 = 1757,
    _1758 = 1758,
    _1759 = 1759,
    _1760 = 1760,
    _1761 = 1761,
    _1762 = 1762,
    _1763 = 1763,
    _1764 = 1764,
    _1765 = 1765,
    _1766 = 1766,
    _1767 = 1767,
    _1768 = 1768,
    _1769 = 1769,
    _1770 = 1770,
    _1771 = 1771,
    _1772 = 1772,
    _1773 = 1773,
    _1774 = 1774,
    _1775 = 1775,
    _1776 = 1776,
    _1777 = 1777,
    _1778 = 1778,
    _1779 = 1779,
    _1780 = 1780,
    _1781 = 1781,
    _1782 = 1782,
    _1783 = 1783,
    _1784 = 1784,
    _1785 = 1785,
    _1786 = 1786,
    _1787 = 1787,
    _1788 = 1788,
    _1789 = 1789,
    _1790 = 1790,
    _1791 = 1791,
    _1792 = 1792,
    _1793 = 1793,
    _1794 = 1794,
    _1795 = 1795,
    _1796 = 1796,
    _1797 = 1797,
    _1798 = 1798,
    _1799 = 1799,
    _1800 = 1800,
    _1801 = 1801,
    _1802 = 1802,
    _1803 = 1803,
    _1804 = 1804,
    _1805 = 1805,
    _1806 = 1806,
    _1807 = 1807,
    _1808 = 1808,
    _1809 = 1809,
    _1810 = 1810,
    _1811 = 1811,
    _1812 = 1812,
    _1813 = 1813,
    _1814 = 1814,
    _1815 = 1815,
    _1816 = 1816,
    _1817 = 1817,
    _1818 = 1818,
    _1819 = 1819,
    _1820 = 1820,
    _1821 = 1821,
    _1822 = 1822,
    _1823 = 1823,
    _1824 = 1824,
    _1825 = 1825,
    _1826 = 1826,
    _1827 = 1827,
    _1828 = 1828,
    _1829 = 1829,
    _1830 = 1830,
    _1831 = 1831,
    _1832 = 1832,
    _1833 = 1833,
    _1834 = 1834,
    _1835 = 1835,
    _1836 = 1836,
    _1837 = 1837,
    _1838 = 1838,
    _1839 = 1839,
    _1840 = 1840,
    _1841 = 1841,
    _1842 = 1842,
    _1843 = 1843,
    _1844 = 1844,
    _1845 = 1845,
    _1846 = 1846,
    _1847 = 1847,
    _1848 = 1848,
    _1849 = 1849,
    _1850 = 1850,
    _1851 = 1851,
    _1852 = 1852,
    _1853 = 1853,
    _1854 = 1854,
    _1855 = 1855,
    _1856 = 1856,
    _1857 = 1857,
    _1858 = 1858,
    _1859 = 1859,
    _1860 = 1860,
    _1861 = 1861,
    _1862 = 1862,
    _1863 = 1863,
    _1864 = 1864,
    _1865 = 1865,
    _1866 = 1866,
    _1867 = 1867,
    _1868 = 1868,
    _1869 = 1869,
    _1870 = 1870,
    _1871 = 1871,
    _1872 = 1872,
    _1873 = 1873,
    _1874 = 1874,
    _1875 = 1875,
    _1876 = 1876,
    _1877 = 1877,
    _1878 = 1878,
    _1879 = 1879,
    _1880 = 1880,
    _1881 = 1881,
    _1882 = 1882,
    _1883 = 1883,
    _1884 = 1884,
    _1885 = 1885,
    _1886 = 1886,
    _1887 = 1887,
    _1888 = 1888,
    _1889 = 1889,
    _1890 = 1890,
    _1891 = 1891,
    _1892 = 1892,
    _1893 = 1893,
    _1894 = 1894,
    _1895 = 1895,
    _1896 = 1896,
    _1897 = 1897,
    _1898 = 1898,
    _1899 = 1899,
    _1900 = 1900,
    _1901 = 1901,
    _1902 = 1902,
    _1903 = 1903,
    _1904 = 1904,
    _1905 = 1905,
    _1906 = 1906,
    _1907 = 1907,
    _1908 = 1908,
    _1909 = 1909,
    _1910 = 1910,
    _1911 = 1911,
    _1912 = 1912,
    _1913 = 1913,
    _1914 = 1914,
    _1915 = 1915,
    _1916 = 1916,
    _1917 = 1917,
    _1918 = 1918,
    _1919 = 1919,
    _1920 = 1920,
    _1921 = 1921,
    _1922 = 1922,
    _1923 = 1923,
    _1924 = 1924,
    _1925 = 1925,
    _1926 = 1926,
    _1927 = 1927,
    _1928 = 1928,
    _1929 = 1929,
    _1930 = 1930,
    _1931 = 1931,
    _1932 = 1932,
    _1933 = 1933,
    _1934 = 1934,
    _1935 = 1935,
    _1936 = 1936,
    _1937 = 1937,
    _1938 = 1938,
    _1939 = 1939,
    _1940 = 1940,
    _1941 = 1941,
    _1942 = 1942,
    _1943 = 1943,
    _1944 = 1944,
    _1945 = 1945,
    _1946 = 1946,
    _1947 = 1947,
    _1948 = 1948,
    _1949 = 1949,
    _1950 = 1950,
    _1951 = 1951,
    _1952 = 1952,
    _1953 = 1953,
    _1954 = 1954,
    _1955 = 1955,
    _1956 = 1956,
    _1957 = 1957,
    _1958 = 1958,
    _1959 = 1959,
    _1960 = 1960,
    _1961 = 1961,
    _1962 = 1962,
    _1963 = 1963,
    _1964 = 1964,
    _1965 = 1965,
    _1966 = 1966,
    _1967 = 1967,
    _1968 = 1968,
    _1969 = 1969,
    _1970 = 1970,
    _1971 = 1971,
    _1972 = 1972,
    _1973 = 1973,
    _1974 = 1974,
    _1975 = 1975,
    _1976 = 1976,
    _1977 = 1977,
    _1978 = 1978,
    _1979 = 1979,
    _1980 = 1980,
    _1981 = 1981,
    _1982 = 1982,
    _1983 = 1983,
    _1984 = 1984,
    _1985 = 1985,
    _1986 = 1986,
    _1987 = 1987,
    _1988 = 1988,
    _1989 = 1989,
    _1990 = 1990,
    _1991 = 1991,
    _1992 = 1992,
    _1993 = 1993,
    _1994 = 1994,
    _1995 = 1995,
    _1996 = 1996,
    _1997 = 1997,
    _1998 = 1998,
    _1999 = 1999,
    _2000 = 2000,
    _2001 = 2001,
    _2002 = 2002,
    _2003 = 2003,
    _2004 = 2004,
    _2005 = 2005,
    _2006 = 2006,
    _2007 = 2007,
    _2008 = 2008,
    _2009 = 2009,
    _2010 = 2010,
    _2011 = 2011,
    _2012 = 2012,
    _2013 = 2013,
    _2014 = 2014,
    _2015 = 2015,
    _2016 = 2016,
    _2017 = 2017,
    _2018 = 2018,
    _2019 = 2019,
    _2020 = 2020,
    _2021 = 2021,
    _2022 = 2022,
    _2023 = 2023,
    _2024 = 2024,
    _2025 = 2025,
    _2026 = 2026,
    _2027 = 2027,
    _2028 = 2028,
    _2029 = 2029,
    _2030 = 2030,
    _2031 = 2031,
    _2032 = 2032,
    _2033 = 2033,
    _2034 = 2034,
    _2035 = 2035,
    _2036 = 2036,
    _2037 = 2037,
    _2038 = 2038,
    _2039 = 2039,
    _2040 = 2040,
    _2041 = 2041,
    _2042 = 2042,
    _2043 = 2043,
    _2044 = 2044,
    _2045 = 2045,
    _2046 = 2046,
    _2047 = 2047,
    _2048 = 2048,
    _2049 = 2049,
    _2050 = 2050,
    _2051 = 2051,
    _2052 = 2052,
    _2053 = 2053,
    _2054 = 2054,
    _2055 = 2055,
    _2056 = 2056,
    _2057 = 2057,
    _2058 = 2058,
    _2059 = 2059,
    _2060 = 2060,
    _2061 = 2061,
    _2062 = 2062,
    _2063 = 2063,
    _2064 = 2064,
    _2065 = 2065,
    _2066 = 2066,
    _2067 = 2067,
    _2068 = 2068,
    _2069 = 2069,
    _2070 = 2070,
    _2071 = 2071,
    _2072 = 2072,
    _2073 = 2073,
    _2074 = 2074,
    _2075 = 2075,
    _2076 = 2076,
    _2077 = 2077,
    _2078 = 2078,
    _2079 = 2079,
    _2080 = 2080,
    _2081 = 2081,
    _2082 = 2082,
    _2083 = 2083,
    _2084 = 2084,
    _2085 = 2085,
    _2086 = 2086,
    _2087 = 2087,
    _2088 = 2088,
    _2089 = 2089,
    _2090 = 2090,
    _2091 = 2091,
    _2092 = 2092,
    _2093 = 2093,
    _2094 = 2094,
    _2095 = 2095,
    _2096 = 2096,
    _2097 = 2097,
    _2098 = 2098,
    _2099 = 2099,
    _2100 = 2100,
    _2101 = 2101,
    _2102 = 2102,
    _2103 = 2103,
    _2104 = 2104,
    _2105 = 2105,
    _2106 = 2106,
    _2107 = 2107,
    _2108 = 2108,
    _2109 = 2109,
    _2110 = 2110,
    _2111 = 2111,
    _2112 = 2112,
    _2113 = 2113,
    _2114 = 2114,
    _2115 = 2115,
    _2116 = 2116,
    _2117 = 2117,
    _2118 = 2118,
    _2119 = 2119,
    _2120 = 2120,
    _2121 = 2121,
    _2122 = 2122,
    _2123 = 2123,
    _2124 = 2124,
    _2125 = 2125,
    _2126 = 2126,
    _2127 = 2127,
    _2128 = 2128,
    _2129 = 2129,
    _2130 = 2130,
    _2131 = 2131,
    _2132 = 2132,
    _2133 = 2133,
    _2134 = 2134,
    _2135 = 2135,
    _2136 = 2136,
    _2137 = 2137,
    _2138 = 2138,
    _2139 = 2139,
    _2140 = 2140,
    _2141 = 2141,
    _2142 = 2142,
    _2143 = 2143,
    _2144 = 2144,
    _2145 = 2145,
    _2146 = 2146,
    _2147 = 2147,
    _2148 = 2148,
    _2149 = 2149,
    _2150 = 2150,
    _2151 = 2151,
    _2152 = 2152,
    _2153 = 2153,
    _2154 = 2154,
    _2155 = 2155,
    _2156 = 2156,
    _2157 = 2157,
    _2158 = 2158,
    _2159 = 2159,
    _2160 = 2160,
    _2161 = 2161,
    _2162 = 2162,
    _2163 = 2163,
    _2164 = 2164,
    _2165 = 2165,
    _2166 = 2166,
    _2167 = 2167,
    _2168 = 2168,
    _2169 = 2169,
    _2170 = 2170,
    _2171 = 2171,
    _2172 = 2172,
    _2173 = 2173,
    _2174 = 2174,
    _2175 = 2175,
    _2176 = 2176,
    _2177 = 2177,
    _2178 = 2178,
    _2179 = 2179,
    _2180 = 2180,
    _2181 = 2181,
    _2182 = 2182,
    _2183 = 2183,
    _2184 = 2184,
    _2185 = 2185,
    _2186 = 2186,
    _2187 = 2187,
    _2188 = 2188,
    _2189 = 2189,
    _2190 = 2190,
    _2191 = 2191,
    _2192 = 2192,
    _2193 = 2193,
    _2194 = 2194,
    _2195 = 2195,
    _2196 = 2196,
    _2197 = 2197,
    _2198 = 2198,
    _2199 = 2199,
    _2200 = 2200,
    _2201 = 2201,
    _2202 = 2202,
    _2203 = 2203,
    _2204 = 2204,
    _2205 = 2205,
    _2206 = 2206,
    _2207 = 2207,
    _2208 = 2208,
    _2209 = 2209,
    _2210 = 2210,
    _2211 = 2211,
    _2212 = 2212,
    _2213 = 2213,
    _2214 = 2214,
    _2215 = 2215,
    _2216 = 2216,
    _2217 = 2217,
    _2218 = 2218,
    _2219 = 2219,
    _2220 = 2220,
    _2221 = 2221,
    _2222 = 2222,
    _2223 = 2223,
    _2224 = 2224,
    _2225 = 2225,
    _2226 = 2226,
    _2227 = 2227,
    _2228 = 2228,
    _2229 = 2229,
    _2230 = 2230,
    _2231 = 2231,
    _2232 = 2232,
    _2233 = 2233,
    _2234 = 2234,
    _2235 = 2235,
    _2236 = 2236,
    _2237 = 2237,
    _2238 = 2238,
    _2239 = 2239,
    _2240 = 2240,
    _2241 = 2241,
    _2242 = 2242,
    _2243 = 2243,
    _2244 = 2244,
    _2245 = 2245,
    _2246 = 2246,
    _2247 = 2247,
    _2248 = 2248,
    _2249 = 2249,
    _2250 = 2250,
    _2251 = 2251,
    _2252 = 2252,
    _2253 = 2253,
    _2254 = 2254,
    _2255 = 2255,
    _2256 = 2256,
    _2257 = 2257,
    _2258 = 2258,
    _2259 = 2259,
    _2260 = 2260,
    _2261 = 2261,
    _2262 = 2262,
    _2263 = 2263,
    _2264 = 2264,
    _2265 = 2265,
    _2266 = 2266,
    _2267 = 2267,
    _2268 = 2268,
    _2269 = 2269,
    _2270 = 2270,
    _2271 = 2271,
    _2272 = 2272,
    _2273 = 2273,
    _2274 = 2274,
    _2275 = 2275,
    _2276 = 2276,
    _2277 = 2277,
    _2278 = 2278,
    _2279 = 2279,
    _2280 = 2280,
    _2281 = 2281,
    _2282 = 2282,
    _2283 = 2283,
    _2284 = 2284,
    _2285 = 2285,
    _2286 = 2286,
    _2287 = 2287,
    _2288 = 2288,
    _2289 = 2289,
    _2290 = 2290,
    _2291 = 2291,
    _2292 = 2292,
    _2293 = 2293,
    _2294 = 2294,
    _2295 = 2295,
    _2296 = 2296,
    _2297 = 2297,
    _2298 = 2298,
    _2299 = 2299,
    _2300 = 2300,
    _2301 = 2301,
    _2302 = 2302,
    _2303 = 2303,
    _2304 = 2304,
    _2305 = 2305,
    _2306 = 2306,
    _2307 = 2307,
    _2308 = 2308,
    _2309 = 2309,
    _2310 = 2310,
    _2311 = 2311,
    _2312 = 2312,
    _2313 = 2313,
    _2314 = 2314,
    _2315 = 2315,
    _2316 = 2316,
    _2317 = 2317,
    _2318 = 2318,
    _2319 = 2319,
    _2320 = 2320,
    _2321 = 2321,
    _2322 = 2322,
    _2323 = 2323,
    _2324 = 2324,
    _2325 = 2325,
    _2326 = 2326,
    _2327 = 2327,
    _2328 = 2328,
    _2329 = 2329,
    _2330 = 2330,
    _2331 = 2331,
    _2332 = 2332,
    _2333 = 2333,
    _2334 = 2334,
    _2335 = 2335,
    _2336 = 2336,
    _2337 = 2337,
    _2338 = 2338,
    _2339 = 2339,
    _2340 = 2340,
    _2341 = 2341,
    _2342 = 2342,
    _2343 = 2343,
    _2344 = 2344,
    _2345 = 2345,
    _2346 = 2346,
    _2347 = 2347,
    _2348 = 2348,
    _2349 = 2349,
    _2350 = 2350,
    _2351 = 2351,
    _2352 = 2352,
    _2353 = 2353,
    _2354 = 2354,
    _2355 = 2355,
    _2356 = 2356,
    _2357 = 2357,
    _2358 = 2358,
    _2359 = 2359,
    _2360 = 2360,
    _2361 = 2361,
    _2362 = 2362,
    _2363 = 2363,
    _2364 = 2364,
    _2365 = 2365,
    _2366 = 2366,
    _2367 = 2367,
    _2368 = 2368,
    _2369 = 2369,
    _2370 = 2370,
    _2371 = 2371,
    _2372 = 2372,
    _2373 = 2373,
    _2374 = 2374,
    _2375 = 2375,
    _2376 = 2376,
    _2377 = 2377,
    _2378 = 2378,
    _2379 = 2379,
    _2380 = 2380,
    _2381 = 2381,
    _2382 = 2382,
    _2383 = 2383,
    _2384 = 2384,
    _2385 = 2385,
    _2386 = 2386,
    _2387 = 2387,
    _2388 = 2388,
    _2389 = 2389,
    _2390 = 2390,
    _2391 = 2391,
    _2392 = 2392,
    _2393 = 2393,
    _2394 = 2394,
    _2395 = 2395,
    _2396 = 2396,
    _2397 = 2397,
    _2398 = 2398,
    _2399 = 2399,
    _2400 = 2400,
    _2401 = 2401,
    _2402 = 2402,
    _2403 = 2403,
    _2404 = 2404,
    _2405 = 2405,
    _2406 = 2406,
    _2407 = 2407,
    _2408 = 2408,
    _2409 = 2409,
    _2410 = 2410,
    _2411 = 2411,
    _2412 = 2412,
    _2413 = 2413,
    _2414 = 2414,
    _2415 = 2415,
    _2416 = 2416,
    _2417 = 2417,
    _2418 = 2418,
    _2419 = 2419,
    _2420 = 2420,
    _2421 = 2421,
    _2422 = 2422,
    _2423 = 2423,
    _2424 = 2424,
    _2425 = 2425,
    _2426 = 2426,
    _2427 = 2427,
    _2428 = 2428,
    _2429 = 2429,
    _2430 = 2430,
    _2431 = 2431,
    _2432 = 2432,
    _2433 = 2433,
    _2434 = 2434,
    _2435 = 2435,
    _2436 = 2436,
    _2437 = 2437,
    _2438 = 2438,
    _2439 = 2439,
    _2440 = 2440,
    _2441 = 2441,
    _2442 = 2442,
    _2443 = 2443,
    _2444 = 2444,
    _2445 = 2445,
    _2446 = 2446,
    _2447 = 2447,
    _2448 = 2448,
    _2449 = 2449,
    _2450 = 2450,
    _2451 = 2451,
    _2452 = 2452,
    _2453 = 2453,
    _2454 = 2454,
    _2455 = 2455,
    _2456 = 2456,
    _2457 = 2457,
    _2458 = 2458,
    _2459 = 2459,
    _2460 = 2460,
    _2461 = 2461,
    _2462 = 2462,
    _2463 = 2463,
    _2464 = 2464,
    _2465 = 2465,
    _2466 = 2466,
    _2467 = 2467,
    _2468 = 2468,
    _2469 = 2469,
    _2470 = 2470,
    _2471 = 2471,
    _2472 = 2472,
    _2473 = 2473,
    _2474 = 2474,
    _2475 = 2475,
    _2476 = 2476,
    _2477 = 2477,
    _2478 = 2478,
    _2479 = 2479,
    _2480 = 2480,
    _2481 = 2481,
    _2482 = 2482,
    _2483 = 2483,
    _2484 = 2484,
    _2485 = 2485,
    _2486 = 2486,
    _2487 = 2487,
    _2488 = 2488,
    _2489 = 2489,
    _2490 = 2490,
    _2491 = 2491,
    _2492 = 2492,
    _2493 = 2493,
    _2494 = 2494,
    _2495 = 2495,
    _2496 = 2496,
    _2497 = 2497,
    _2498 = 2498,
    _2499 = 2499,
    _2500 = 2500,
    _2501 = 2501,
    _2502 = 2502,
    _2503 = 2503,
    _2504 = 2504,
    _2505 = 2505,
    _2506 = 2506,
    _2507 = 2507,
    _2508 = 2508,
    _2509 = 2509,
    _2510 = 2510,
    _2511 = 2511,
    _2512 = 2512,
    _2513 = 2513,
    _2514 = 2514,
    _2515 = 2515,
    _2516 = 2516,
    _2517 = 2517,
    _2518 = 2518,
    _2519 = 2519,
    _2520 = 2520,
    _2521 = 2521,
    _2522 = 2522,
    _2523 = 2523,
    _2524 = 2524,
    _2525 = 2525,
    _2526 = 2526,
    _2527 = 2527,
    _2528 = 2528,
    _2529 = 2529,
    _2530 = 2530,
    _2531 = 2531,
    _2532 = 2532,
    _2533 = 2533,
    _2534 = 2534,
    _2535 = 2535,
    _2536 = 2536,
    _2537 = 2537,
    _2538 = 2538,
    _2539 = 2539,
    _2540 = 2540,
    _2541 = 2541,
    _2542 = 2542,
    _2543 = 2543,
    _2544 = 2544,
    _2545 = 2545,
    _2546 = 2546,
    _2547 = 2547,
    _2548 = 2548,
    _2549 = 2549,
    _2550 = 2550,
    _2551 = 2551,
    _2552 = 2552,
    _2553 = 2553,
    _2554 = 2554,
    _2555 = 2555,
    _2556 = 2556,
    _2557 = 2557,
    _2558 = 2558,
    _2559 = 2559,
    _2560 = 2560,
    _2561 = 2561,
    _2562 = 2562,
    _2563 = 2563,
    _2564 = 2564,
    _2565 = 2565,
    _2566 = 2566,
    _2567 = 2567,
    _2568 = 2568,
    _2569 = 2569,
    _2570 = 2570,
    _2571 = 2571,
    _2572 = 2572,
    _2573 = 2573,
    _2574 = 2574,
    _2575 = 2575,
    _2576 = 2576,
    _2577 = 2577,
    _2578 = 2578,
    _2579 = 2579,
    _2580 = 2580,
    _2581 = 2581,
    _2582 = 2582,
    _2583 = 2583,
    _2584 = 2584,
    _2585 = 2585,
    _2586 = 2586,
    _2587 = 2587,
    _2588 = 2588,
    _2589 = 2589,
    _2590 = 2590,
    _2591 = 2591,
    _2592 = 2592,
    _2593 = 2593,
    _2594 = 2594,
    _2595 = 2595,
    _2596 = 2596,
    _2597 = 2597,
    _2598 = 2598,
    _2599 = 2599,
    _2600 = 2600,
    _2601 = 2601,
    _2602 = 2602,
    _2603 = 2603,
    _2604 = 2604,
    _2605 = 2605,
    _2606 = 2606,
    _2607 = 2607,
    _2608 = 2608,
    _2609 = 2609,
    _2610 = 2610,
    _2611 = 2611,
    _2612 = 2612,
    _2613 = 2613,
    _2614 = 2614,
    _2615 = 2615,
    _2616 = 2616,
    _2617 = 2617,
    _2618 = 2618,
    _2619 = 2619,
    _2620 = 2620,
    _2621 = 2621,
    _2622 = 2622,
    _2623 = 2623,
    _2624 = 2624,
    _2625 = 2625,
    _2626 = 2626,
    _2627 = 2627,
    _2628 = 2628,
    _2629 = 2629,
    _2630 = 2630,
    _2631 = 2631,
    _2632 = 2632,
    _2633 = 2633,
    _2634 = 2634,
    _2635 = 2635,
    _2636 = 2636,
    _2637 = 2637,
    _2638 = 2638,
    _2639 = 2639,
    _2640 = 2640,
    _2641 = 2641,
    _2642 = 2642,
    _2643 = 2643,
    _2644 = 2644,
    _2645 = 2645,
    _2646 = 2646,
    _2647 = 2647,
    _2648 = 2648,
    _2649 = 2649,
    _2650 = 2650,
    _2651 = 2651,
    _2652 = 2652,
    _2653 = 2653,
    _2654 = 2654,
    _2655 = 2655,
    _2656 = 2656,
    _2657 = 2657,
    _2658 = 2658,
    _2659 = 2659,
    _2660 = 2660,
    _2661 = 2661,
    _2662 = 2662,
    _2663 = 2663,
    _2664 = 2664,
    _2665 = 2665,
    _2666 = 2666,
    _2667 = 2667,
    _2668 = 2668,
    _2669 = 2669,
    _2670 = 2670,
    _2671 = 2671,
    _2672 = 2672,
    _2673 = 2673,
    _2674 = 2674,
    _2675 = 2675,
    _2676 = 2676,
    _2677 = 2677,
    _2678 = 2678,
    _2679 = 2679,
    _2680 = 2680,
    _2681 = 2681,
    _2682 = 2682,
    _2683 = 2683,
    _2684 = 2684,
    _2685 = 2685,
    _2686 = 2686,
    _2687 = 2687,
    _2688 = 2688,
    _2689 = 2689,
    _2690 = 2690,
    _2691 = 2691,
    _2692 = 2692,
    _2693 = 2693,
    _2694 = 2694,
    _2695 = 2695,
    _2696 = 2696,
    _2697 = 2697,
    _2698 = 2698,
    _2699 = 2699,
    _2700 = 2700,
    _2701 = 2701,
    _2702 = 2702,
    _2703 = 2703,
    _2704 = 2704,
    _2705 = 2705,
    _2706 = 2706,
    _2707 = 2707,
    _2708 = 2708,
    _2709 = 2709,
    _2710 = 2710,
    _2711 = 2711,
    _2712 = 2712,
    _2713 = 2713,
    _2714 = 2714,
    _2715 = 2715,
    _2716 = 2716,
    _2717 = 2717,
    _2718 = 2718,
    _2719 = 2719,
    _2720 = 2720,
    _2721 = 2721,
    _2722 = 2722,
    _2723 = 2723,
    _2724 = 2724,
    _2725 = 2725,
    _2726 = 2726,
    _2727 = 2727,
    _2728 = 2728,
    _2729 = 2729,
    _2730 = 2730,
    _2731 = 2731,
    _2732 = 2732,
    _2733 = 2733,
    _2734 = 2734,
    _2735 = 2735,
    _2736 = 2736,
    _2737 = 2737,
    _2738 = 2738,
    _2739 = 2739,
    _2740 = 2740,
    _2741 = 2741,
    _2742 = 2742,
    _2743 = 2743,
    _2744 = 2744,
    _2745 = 2745,
    _2746 = 2746,
    _2747 = 2747,
    _2748 = 2748,
    _2749 = 2749,
    _2750 = 2750,
    _2751 = 2751,
    _2752 = 2752,
    _2753 = 2753,
    _2754 = 2754,
    _2755 = 2755,
    _2756 = 2756,
    _2757 = 2757,
    _2758 = 2758,
    _2759 = 2759,
    _2760 = 2760,
    _2761 = 2761,
    _2762 = 2762,
    _2763 = 2763,
    _2764 = 2764,
    _2765 = 2765,
    _2766 = 2766,
    _2767 = 2767,
    _2768 = 2768,
    _2769 = 2769,
    _2770 = 2770,
    _2771 = 2771,
    _2772 = 2772,
    _2773 = 2773,
    _2774 = 2774,
    _2775 = 2775,
    _2776 = 2776,
    _2777 = 2777,
    _2778 = 2778,
    _2779 = 2779,
    _2780 = 2780,
    _2781 = 2781,
    _2782 = 2782,
    _2783 = 2783,
    _2784 = 2784,
    _2785 = 2785,
    _2786 = 2786,
    _2787 = 2787,
    _2788 = 2788,
    _2789 = 2789,
    _2790 = 2790,
    _2791 = 2791,
    _2792 = 2792,
    _2793 = 2793,
    _2794 = 2794,
    _2795 = 2795,
    _2796 = 2796,
    _2797 = 2797,
    _2798 = 2798,
    _2799 = 2799,
    _2800 = 2800,
    _2801 = 2801,
    _2802 = 2802,
    _2803 = 2803,
    _2804 = 2804,
    _2805 = 2805,
    _2806 = 2806,
    _2807 = 2807,
    _2808 = 2808,
    _2809 = 2809,
    _2810 = 2810,
    _2811 = 2811,
    _2812 = 2812,
    _2813 = 2813,
    _2814 = 2814,
    _2815 = 2815,
    _2816 = 2816,
    _2817 = 2817,
    _2818 = 2818,
    _2819 = 2819,
    _2820 = 2820,
    _2821 = 2821,
    _2822 = 2822,
    _2823 = 2823,
    _2824 = 2824,
    _2825 = 2825,
    _2826 = 2826,
    _2827 = 2827,
    _2828 = 2828,
    _2829 = 2829,
    _2830 = 2830,
    _2831 = 2831,
    _2832 = 2832,
    _2833 = 2833,
    _2834 = 2834,
    _2835 = 2835,
    _2836 = 2836,
    _2837 = 2837,
    _2838 = 2838,
    _2839 = 2839,
    _2840 = 2840,
    _2841 = 2841,
    _2842 = 2842,
    _2843 = 2843,
    _2844 = 2844,
    _2845 = 2845,
    _2846 = 2846,
    _2847 = 2847,
    _2848 = 2848,
    _2849 = 2849,
    _2850 = 2850,
    _2851 = 2851,
    _2852 = 2852,
    _2853 = 2853,
    _2854 = 2854,
    _2855 = 2855,
    _2856 = 2856,
    _2857 = 2857,
    _2858 = 2858,
    _2859 = 2859,
    _2860 = 2860,
    _2861 = 2861,
    _2862 = 2862,
    _2863 = 2863,
    _2864 = 2864,
    _2865 = 2865,
    _2866 = 2866,
    _2867 = 2867,
    _2868 = 2868,
    _2869 = 2869,
    _2870 = 2870,
    _2871 = 2871,
    _2872 = 2872,
    _2873 = 2873,
    _2874 = 2874,
    _2875 = 2875,
    _2876 = 2876,
    _2877 = 2877,
    _2878 = 2878,
    _2879 = 2879,
    _2880 = 2880,
    _2881 = 2881,
    _2882 = 2882,
    _2883 = 2883,
    _2884 = 2884,
    _2885 = 2885,
    _2886 = 2886,
    _2887 = 2887,
    _2888 = 2888,
    _2889 = 2889,
    _2890 = 2890,
    _2891 = 2891,
    _2892 = 2892,
    _2893 = 2893,
    _2894 = 2894,
    _2895 = 2895,
    _2896 = 2896,
    _2897 = 2897,
    _2898 = 2898,
    _2899 = 2899,
    _2900 = 2900,
    _2901 = 2901,
    _2902 = 2902,
    _2903 = 2903,
    _2904 = 2904,
    _2905 = 2905,
    _2906 = 2906,
    _2907 = 2907,
    _2908 = 2908,
    _2909 = 2909,
    _2910 = 2910,
    _2911 = 2911,
    _2912 = 2912,
    _2913 = 2913,
    _2914 = 2914,
    _2915 = 2915,
    _2916 = 2916,
    _2917 = 2917,
    _2918 = 2918,
    _2919 = 2919,
    _2920 = 2920,
    _2921 = 2921,
    _2922 = 2922,
    _2923 = 2923,
    _2924 = 2924,
    _2925 = 2925,
    _2926 = 2926,
    _2927 = 2927,
    _2928 = 2928,
    _2929 = 2929,
    _2930 = 2930,
    _2931 = 2931,
    _2932 = 2932,
    _2933 = 2933,
    _2934 = 2934,
    _2935 = 2935,
    _2936 = 2936,
    _2937 = 2937,
    _2938 = 2938,
    _2939 = 2939,
    _2940 = 2940,
    _2941 = 2941,
    _2942 = 2942,
    _2943 = 2943,
    _2944 = 2944,
    _2945 = 2945,
    _2946 = 2946,
    _2947 = 2947,
    _2948 = 2948,
    _2949 = 2949,
    _2950 = 2950,
    _2951 = 2951,
    _2952 = 2952,
    _2953 = 2953,
    _2954 = 2954,
    _2955 = 2955,
    _2956 = 2956,
    _2957 = 2957,
    _2958 = 2958,
    _2959 = 2959,
    _2960 = 2960,
    _2961 = 2961,
    _2962 = 2962,
    _2963 = 2963,
    _2964 = 2964,
    _2965 = 2965,
    _2966 = 2966,
    _2967 = 2967,
    _2968 = 2968,
    _2969 = 2969,
    _2970 = 2970,
    _2971 = 2971,
    _2972 = 2972,
    _2973 = 2973,
    _2974 = 2974,
    _2975 = 2975,
    _2976 = 2976,
    _2977 = 2977,
    _2978 = 2978,
    _2979 = 2979,
    _2980 = 2980,
    _2981 = 2981,
    _2982 = 2982,
    _2983 = 2983,
    _2984 = 2984,
    _2985 = 2985,
    _2986 = 2986,
    _2987 = 2987,
    _2988 = 2988,
    _2989 = 2989,
    _2990 = 2990,
    _2991 = 2991,
    _2992 = 2992,
    _2993 = 2993,
    _2994 = 2994,
    _2995 = 2995,
    _2996 = 2996,
    _2997 = 2997,
    _2998 = 2998,
    _2999 = 2999,
    _3000 = 3000,
    _3001 = 3001,
    _3002 = 3002,
    _3003 = 3003,
    _3004 = 3004,
    _3005 = 3005,
    _3006 = 3006,
    _3007 = 3007,
    _3008 = 3008,
    _3009 = 3009,
    _3010 = 3010,
    _3011 = 3011,
    _3012 = 3012,
    _3013 = 3013,
    _3014 = 3014,
    _3015 = 3015,
    _3016 = 3016,
    _3017 = 3017,
    _3018 = 3018,
    _3019 = 3019,
    _3020 = 3020,
    _3021 = 3021,
    _3022 = 3022,
    _3023 = 3023,
    _3024 = 3024,
    _3025 = 3025,
    _3026 = 3026,
    _3027 = 3027,
    _3028 = 3028,
    _3029 = 3029,
    _3030 = 3030,
    _3031 = 3031,
    _3032 = 3032,
    _3033 = 3033,
    _3034 = 3034,
    _3035 = 3035,
    _3036 = 3036,
    _3037 = 3037,
    _3038 = 3038,
    _3039 = 3039,
    _3040 = 3040,
    _3041 = 3041,
    _3042 = 3042,
    _3043 = 3043,
    _3044 = 3044,
    _3045 = 3045,
    _3046 = 3046,
    _3047 = 3047,
    _3048 = 3048,
    _3049 = 3049,
    _3050 = 3050,
    _3051 = 3051,
    _3052 = 3052,
    _3053 = 3053,
    _3054 = 3054,
    _3055 = 3055,
    _3056 = 3056,
    _3057 = 3057,
    _3058 = 3058,
    _3059 = 3059,
    _3060 = 3060,
    _3061 = 3061,
    _3062 = 3062,
    _3063 = 3063,
    _3064 = 3064,
    _3065 = 3065,
    _3066 = 3066,
    _3067 = 3067,
    _3068 = 3068,
    _3069 = 3069,
    _3070 = 3070,
    _3071 = 3071,
    _3072 = 3072,
    _3073 = 3073,
    _3074 = 3074,
    _3075 = 3075,
    _3076 = 3076,
    _3077 = 3077,
    _3078 = 3078,
    _3079 = 3079,
    _3080 = 3080,
    _3081 = 3081,
    _3082 = 3082,
    _3083 = 3083,
    _3084 = 3084,
    _3085 = 3085,
    _3086 = 3086,
    _3087 = 3087,
    _3088 = 3088,
    _3089 = 3089,
    _3090 = 3090,
    _3091 = 3091,
    _3092 = 3092,
    _3093 = 3093,
    _3094 = 3094,
    _3095 = 3095,
    _3096 = 3096,
    _3097 = 3097,
    _3098 = 3098,
    _3099 = 3099,
    _3100 = 3100,
    _3101 = 3101,
    _3102 = 3102,
    _3103 = 3103,
    _3104 = 3104,
    _3105 = 3105,
    _3106 = 3106,
    _3107 = 3107,
    _3108 = 3108,
    _3109 = 3109,
    _3110 = 3110,
    _3111 = 3111,
    _3112 = 3112,
    _3113 = 3113,
    _3114 = 3114,
    _3115 = 3115,
    _3116 = 3116,
    _3117 = 3117,
    _3118 = 3118,
    _3119 = 3119,
    _3120 = 3120,
    _3121 = 3121,
    _3122 = 3122,
    _3123 = 3123,
    _3124 = 3124,
    _3125 = 3125,
    _3126 = 3126,
    _3127 = 3127,
    _3128 = 3128,
    _3129 = 3129,
    _3130 = 3130,
    _3131 = 3131,
    _3132 = 3132,
    _3133 = 3133,
    _3134 = 3134,
    _3135 = 3135,
    _3136 = 3136,
    _3137 = 3137,
    _3138 = 3138,
    _3139 = 3139,
    _3140 = 3140,
    _3141 = 3141,
    _3142 = 3142,
    _3143 = 3143,
    _3144 = 3144,
    _3145 = 3145,
    _3146 = 3146,
    _3147 = 3147,
    _3148 = 3148,
    _3149 = 3149,
    _3150 = 3150,
    _3151 = 3151,
    _3152 = 3152,
    _3153 = 3153,
    _3154 = 3154,
    _3155 = 3155,
    _3156 = 3156,
    _3157 = 3157,
    _3158 = 3158,
    _3159 = 3159,
    _3160 = 3160,
    _3161 = 3161,
    _3162 = 3162,
    _3163 = 3163,
    _3164 = 3164,
    _3165 = 3165,
    _3166 = 3166,
    _3167 = 3167,
    _3168 = 3168,
    _3169 = 3169,
    _3170 = 3170,
    _3171 = 3171,
    _3172 = 3172,
    _3173 = 3173,
    _3174 = 3174,
    _3175 = 3175,
    _3176 = 3176,
    _3177 = 3177,
    _3178 = 3178,
    _3179 = 3179,
    _3180 = 3180,
    _3181 = 3181,
    _3182 = 3182,
    _3183 = 3183,
    _3184 = 3184,
    _3185 = 3185,
    _3186 = 3186,
    _3187 = 3187,
    _3188 = 3188,
    _3189 = 3189,
    _3190 = 3190,
    _3191 = 3191,
    _3192 = 3192,
    _3193 = 3193,
    _3194 = 3194,
    _3195 = 3195,
    _3196 = 3196,
    _3197 = 3197,
    _3198 = 3198,
    _3199 = 3199,
    _3200 = 3200,
    _3201 = 3201,
    _3202 = 3202,
    _3203 = 3203,
    _3204 = 3204,
    _3205 = 3205,
    _3206 = 3206,
    _3207 = 3207,
    _3208 = 3208,
    _3209 = 3209,
    _3210 = 3210,
    _3211 = 3211,
    _3212 = 3212,
    _3213 = 3213,
    _3214 = 3214,
    _3215 = 3215,
    _3216 = 3216,
    _3217 = 3217,
    _3218 = 3218,
    _3219 = 3219,
    _3220 = 3220,
    _3221 = 3221,
    _3222 = 3222,
    _3223 = 3223,
    _3224 = 3224,
    _3225 = 3225,
    _3226 = 3226,
    _3227 = 3227,
    _3228 = 3228,
    _3229 = 3229,
    _3230 = 3230,
    _3231 = 3231,
    _3232 = 3232,
    _3233 = 3233,
    _3234 = 3234,
    _3235 = 3235,
    _3236 = 3236,
    _3237 = 3237,
    _3238 = 3238,
    _3239 = 3239,
    _3240 = 3240,
    _3241 = 3241,
    _3242 = 3242,
    _3243 = 3243,
    _3244 = 3244,
    _3245 = 3245,
    _3246 = 3246,
    _3247 = 3247,
    _3248 = 3248,
    _3249 = 3249,
    _3250 = 3250,
    _3251 = 3251,
    _3252 = 3252,
    _3253 = 3253,
    _3254 = 3254,
    _3255 = 3255,
    _3256 = 3256,
    _3257 = 3257,
    _3258 = 3258,
    _3259 = 3259,
    _3260 = 3260,
    _3261 = 3261,
    _3262 = 3262,
    _3263 = 3263,
    _3264 = 3264,
    _3265 = 3265,
    _3266 = 3266,
    _3267 = 3267,
    _3268 = 3268,
    _3269 = 3269,
    _3270 = 3270,
    _3271 = 3271,
    _3272 = 3272,
    _3273 = 3273,
    _3274 = 3274,
    _3275 = 3275,
    _3276 = 3276,
    _3277 = 3277,
    _3278 = 3278,
    _3279 = 3279,
    _3280 = 3280,
    _3281 = 3281,
    _3282 = 3282,
    _3283 = 3283,
    _3284 = 3284,
    _3285 = 3285,
    _3286 = 3286,
    _3287 = 3287,
    _3288 = 3288,
    _3289 = 3289,
    _3290 = 3290,
    _3291 = 3291,
    _3292 = 3292,
    _3293 = 3293,
    _3294 = 3294,
    _3295 = 3295,
    _3296 = 3296,
    _3297 = 3297,
    _3298 = 3298,
    _3299 = 3299,
    _3300 = 3300,
    _3301 = 3301,
    _3302 = 3302,
    _3303 = 3303,
    _3304 = 3304,
    _3305 = 3305,
    _3306 = 3306,
    _3307 = 3307,
    _3308 = 3308,
    _3309 = 3309,
    _3310 = 3310,
    _3311 = 3311,
    _3312 = 3312,
    _3313 = 3313,
    _3314 = 3314,
    _3315 = 3315,
    _3316 = 3316,
    _3317 = 3317,
    _3318 = 3318,
    _3319 = 3319,
    _3320 = 3320,
    _3321 = 3321,
    _3322 = 3322,
    _3323 = 3323,
    _3324 = 3324,
    _3325 = 3325,
    _3326 = 3326,
    _3327 = 3327,
    _3328 = 3328,
    _3329 = 3329,
    _3330 = 3330,
    _3331 = 3331,
    _3332 = 3332,
    _3333 = 3333,
    _3334 = 3334,
    _3335 = 3335,
    _3336 = 3336,
    _3337 = 3337,
    _3338 = 3338,
    _3339 = 3339,
    _3340 = 3340,
    _3341 = 3341,
    _3342 = 3342,
    _3343 = 3343,
    _3344 = 3344,
    _3345 = 3345,
    _3346 = 3346,
    _3347 = 3347,
    _3348 = 3348,
    _3349 = 3349,
    _3350 = 3350,
    _3351 = 3351,
    _3352 = 3352,
    _3353 = 3353,
    _3354 = 3354,
    _3355 = 3355,
    _3356 = 3356,
    _3357 = 3357,
    _3358 = 3358,
    _3359 = 3359,
    _3360 = 3360,
    _3361 = 3361,
    _3362 = 3362,
    _3363 = 3363,
    _3364 = 3364,
    _3365 = 3365,
    _3366 = 3366,
    _3367 = 3367,
    _3368 = 3368,
    _3369 = 3369,
    _3370 = 3370,
    _3371 = 3371,
    _3372 = 3372,
    _3373 = 3373,
    _3374 = 3374,
    _3375 = 3375,
    _3376 = 3376,
    _3377 = 3377,
    _3378 = 3378,
    _3379 = 3379,
    _3380 = 3380,
    _3381 = 3381,
    _3382 = 3382,
    _3383 = 3383,
    _3384 = 3384,
    _3385 = 3385,
    _3386 = 3386,
    _3387 = 3387,
    _3388 = 3388,
    _3389 = 3389,
    _3390 = 3390,
    _3391 = 3391,
    _3392 = 3392,
    _3393 = 3393,
    _3394 = 3394,
    _3395 = 3395,
    _3396 = 3396,
    _3397 = 3397,
    _3398 = 3398,
    _3399 = 3399,
    _3400 = 3400,
    _3401 = 3401,
    _3402 = 3402,
    _3403 = 3403,
    _3404 = 3404,
    _3405 = 3405,
    _3406 = 3406,
    _3407 = 3407,
    _3408 = 3408,
    _3409 = 3409,
    _3410 = 3410,
    _3411 = 3411,
    _3412 = 3412,
    _3413 = 3413,
    _3414 = 3414,
    _3415 = 3415,
    _3416 = 3416,
    _3417 = 3417,
    _3418 = 3418,
    _3419 = 3419,
    _3420 = 3420,
    _3421 = 3421,
    _3422 = 3422,
    _3423 = 3423,
    _3424 = 3424,
    _3425 = 3425,
    _3426 = 3426,
    _3427 = 3427,
    _3428 = 3428,
    _3429 = 3429,
    _3430 = 3430,
    _3431 = 3431,
    _3432 = 3432,
    _3433 = 3433,
    _3434 = 3434,
    _3435 = 3435,
    _3436 = 3436,
    _3437 = 3437,
    _3438 = 3438,
    _3439 = 3439,
    _3440 = 3440,
    _3441 = 3441,
    _3442 = 3442,
    _3443 = 3443,
    _3444 = 3444,
    _3445 = 3445,
    _3446 = 3446,
    _3447 = 3447,
    _3448 = 3448,
    _3449 = 3449,
    _3450 = 3450,
    _3451 = 3451,
    _3452 = 3452,
    _3453 = 3453,
    _3454 = 3454,
    _3455 = 3455,
    _3456 = 3456,
    _3457 = 3457,
    _3458 = 3458,
    _3459 = 3459,
    _3460 = 3460,
    _3461 = 3461,
    _3462 = 3462,
    _3463 = 3463,
    _3464 = 3464,
    _3465 = 3465,
    _3466 = 3466,
    _3467 = 3467,
    _3468 = 3468,
    _3469 = 3469,
    _3470 = 3470,
    _3471 = 3471,
    _3472 = 3472,
    _3473 = 3473,
    _3474 = 3474,
    _3475 = 3475,
    _3476 = 3476,
    _3477 = 3477,
    _3478 = 3478,
    _3479 = 3479,
    _3480 = 3480,
    _3481 = 3481,
    _3482 = 3482,
    _3483 = 3483,
    _3484 = 3484,
    _3485 = 3485,
    _3486 = 3486,
    _3487 = 3487,
    _3488 = 3488,
    _3489 = 3489,
    _3490 = 3490,
    _3491 = 3491,
    _3492 = 3492,
    _3493 = 3493,
    _3494 = 3494,
    _3495 = 3495,
    _3496 = 3496,
    _3497 = 3497,
    _3498 = 3498,
    _3499 = 3499,
    _3500 = 3500,
    _3501 = 3501,
    _3502 = 3502,
    _3503 = 3503,
    _3504 = 3504,
    _3505 = 3505,
    _3506 = 3506,
    _3507 = 3507,
    _3508 = 3508,
    _3509 = 3509,
    _3510 = 3510,
    _3511 = 3511,
    _3512 = 3512,
    _3513 = 3513,
    _3514 = 3514,
    _3515 = 3515,
    _3516 = 3516,
    _3517 = 3517,
    _3518 = 3518,
    _3519 = 3519,
    _3520 = 3520,
    _3521 = 3521,
    _3522 = 3522,
    _3523 = 3523,
    _3524 = 3524,
    _3525 = 3525,
    _3526 = 3526,
    _3527 = 3527,
    _3528 = 3528,
    _3529 = 3529,
    _3530 = 3530,
    _3531 = 3531,
    _3532 = 3532,
    _3533 = 3533,
    _3534 = 3534,
    _3535 = 3535,
    _3536 = 3536,
    _3537 = 3537,
    _3538 = 3538,
    _3539 = 3539,
    _3540 = 3540,
    _3541 = 3541,
    _3542 = 3542,
    _3543 = 3543,
    _3544 = 3544,
    _3545 = 3545,
    _3546 = 3546,
    _3547 = 3547,
    _3548 = 3548,
    _3549 = 3549,
    _3550 = 3550,
    _3551 = 3551,
    _3552 = 3552,
    _3553 = 3553,
    _3554 = 3554,
    _3555 = 3555,
    _3556 = 3556,
    _3557 = 3557,
    _3558 = 3558,
    _3559 = 3559,
    _3560 = 3560,
    _3561 = 3561,
    _3562 = 3562,
    _3563 = 3563,
    _3564 = 3564,
    _3565 = 3565,
    _3566 = 3566,
    _3567 = 3567,
    _3568 = 3568,
    _3569 = 3569,
    _3570 = 3570,
    _3571 = 3571,
    _3572 = 3572,
    _3573 = 3573,
    _3574 = 3574,
    _3575 = 3575,
    _3576 = 3576,
    _3577 = 3577,
    _3578 = 3578,
    _3579 = 3579,
    _3580 = 3580,
    _3581 = 3581,
    _3582 = 3582,
    _3583 = 3583,
    _3584 = 3584,
    _3585 = 3585,
    _3586 = 3586,
    _3587 = 3587,
    _3588 = 3588,
    _3589 = 3589,
    _3590 = 3590,
    _3591 = 3591,
    _3592 = 3592,
    _3593 = 3593,
    _3594 = 3594,
    _3595 = 3595,
    _3596 = 3596,
    _3597 = 3597,
    _3598 = 3598,
    _3599 = 3599,
    _3600 = 3600,
    _3601 = 3601,
    _3602 = 3602,
    _3603 = 3603,
    _3604 = 3604,
    _3605 = 3605,
    _3606 = 3606,
    _3607 = 3607,
    _3608 = 3608,
    _3609 = 3609,
    _3610 = 3610,
    _3611 = 3611,
    _3612 = 3612,
    _3613 = 3613,
    _3614 = 3614,
    _3615 = 3615,
    _3616 = 3616,
    _3617 = 3617,
    _3618 = 3618,
    _3619 = 3619,
    _3620 = 3620,
    _3621 = 3621,
    _3622 = 3622,
    _3623 = 3623,
    _3624 = 3624,
    _3625 = 3625,
    _3626 = 3626,
    _3627 = 3627,
    _3628 = 3628,
    _3629 = 3629,
    _3630 = 3630,
    _3631 = 3631,
    _3632 = 3632,
    _3633 = 3633,
    _3634 = 3634,
    _3635 = 3635,
    _3636 = 3636,
    _3637 = 3637,
    _3638 = 3638,
    _3639 = 3639,
    _3640 = 3640,
    _3641 = 3641,
    _3642 = 3642,
    _3643 = 3643,
    _3644 = 3644,
    _3645 = 3645,
    _3646 = 3646,
    _3647 = 3647,
    _3648 = 3648,
    _3649 = 3649,
    _3650 = 3650,
    _3651 = 3651,
    _3652 = 3652,
    _3653 = 3653,
    _3654 = 3654,
    _3655 = 3655,
    _3656 = 3656,
    _3657 = 3657,
    _3658 = 3658,
    _3659 = 3659,
    _3660 = 3660,
    _3661 = 3661,
    _3662 = 3662,
    _3663 = 3663,
    _3664 = 3664,
    _3665 = 3665,
    _3666 = 3666,
    _3667 = 3667,
    _3668 = 3668,
    _3669 = 3669,
    _3670 = 3670,
    _3671 = 3671,
    _3672 = 3672,
    _3673 = 3673,
    _3674 = 3674,
    _3675 = 3675,
    _3676 = 3676,
    _3677 = 3677,
    _3678 = 3678,
    _3679 = 3679,
    _3680 = 3680,
    _3681 = 3681,
    _3682 = 3682,
    _3683 = 3683,
    _3684 = 3684,
    _3685 = 3685,
    _3686 = 3686,
    _3687 = 3687,
    _3688 = 3688,
    _3689 = 3689,
    _3690 = 3690,
    _3691 = 3691,
    _3692 = 3692,
    _3693 = 3693,
    _3694 = 3694,
    _3695 = 3695,
    _3696 = 3696,
    _3697 = 3697,
    _3698 = 3698,
    _3699 = 3699,
    _3700 = 3700,
    _3701 = 3701,
    _3702 = 3702,
    _3703 = 3703,
    _3704 = 3704,
    _3705 = 3705,
    _3706 = 3706,
    _3707 = 3707,
    _3708 = 3708,
    _3709 = 3709,
    _3710 = 3710,
    _3711 = 3711,
    _3712 = 3712,
    _3713 = 3713,
    _3714 = 3714,
    _3715 = 3715,
    _3716 = 3716,
    _3717 = 3717,
    _3718 = 3718,
    _3719 = 3719,
    _3720 = 3720,
    _3721 = 3721,
    _3722 = 3722,
    _3723 = 3723,
    _3724 = 3724,
    _3725 = 3725,
    _3726 = 3726,
    _3727 = 3727,
    _3728 = 3728,
    _3729 = 3729,
    _3730 = 3730,
    _3731 = 3731,
    _3732 = 3732,
    _3733 = 3733,
    _3734 = 3734,
    _3735 = 3735,
    _3736 = 3736,
    _3737 = 3737,
    _3738 = 3738,
    _3739 = 3739,
    _3740 = 3740,
    _3741 = 3741,
    _3742 = 3742,
    _3743 = 3743,
    _3744 = 3744,
    _3745 = 3745,
    _3746 = 3746,
    _3747 = 3747,
    _3748 = 3748,
    _3749 = 3749,
    _3750 = 3750,
    _3751 = 3751,
    _3752 = 3752,
    _3753 = 3753,
    _3754 = 3754,
    _3755 = 3755,
    _3756 = 3756,
    _3757 = 3757,
    _3758 = 3758,
    _3759 = 3759,
    _3760 = 3760,
    _3761 = 3761,
    _3762 = 3762,
    _3763 = 3763,
    _3764 = 3764,
    _3765 = 3765,
    _3766 = 3766,
    _3767 = 3767,
    _3768 = 3768,
    _3769 = 3769,
    _3770 = 3770,
    _3771 = 3771,
    _3772 = 3772,
    _3773 = 3773,
    _3774 = 3774,
    _3775 = 3775,
    _3776 = 3776,
    _3777 = 3777,
    _3778 = 3778,
    _3779 = 3779,
    _3780 = 3780,
    _3781 = 3781,
    _3782 = 3782,
    _3783 = 3783,
    _3784 = 3784,
    _3785 = 3785,
    _3786 = 3786,
    _3787 = 3787,
    _3788 = 3788,
    _3789 = 3789,
    _3790 = 3790,
    _3791 = 3791,
    _3792 = 3792,
    _3793 = 3793,
    _3794 = 3794,
    _3795 = 3795,
    _3796 = 3796,
    _3797 = 3797,
    _3798 = 3798,
    _3799 = 3799,
    _3800 = 3800,
    _3801 = 3801,
    _3802 = 3802,
    _3803 = 3803,
    _3804 = 3804,
    _3805 = 3805,
    _3806 = 3806,
    _3807 = 3807,
    _3808 = 3808,
    _3809 = 3809,
    _3810 = 3810,
    _3811 = 3811,
    _3812 = 3812,
    _3813 = 3813,
    _3814 = 3814,
    _3815 = 3815,
    _3816 = 3816,
    _3817 = 3817,
    _3818 = 3818,
    _3819 = 3819,
    _3820 = 3820,
    _3821 = 3821,
    _3822 = 3822,
    _3823 = 3823,
    _3824 = 3824,
    _3825 = 3825,
    _3826 = 3826,
    _3827 = 3827,
    _3828 = 3828,
    _3829 = 3829,
    _3830 = 3830,
    _3831 = 3831,
    _3832 = 3832,
    _3833 = 3833,
    _3834 = 3834,
    _3835 = 3835,
    _3836 = 3836,
    _3837 = 3837,
    _3838 = 3838,
    _3839 = 3839,
    _3840 = 3840,
    _3841 = 3841,
    _3842 = 3842,
    _3843 = 3843,
    _3844 = 3844,
    _3845 = 3845,
    _3846 = 3846,
    _3847 = 3847,
    _3848 = 3848,
    _3849 = 3849,
    _3850 = 3850,
    _3851 = 3851,
    _3852 = 3852,
    _3853 = 3853,
    _3854 = 3854,
    _3855 = 3855,
    _3856 = 3856,
    _3857 = 3857,
    _3858 = 3858,
    _3859 = 3859,
    _3860 = 3860,
    _3861 = 3861,
    _3862 = 3862,
    _3863 = 3863,
    _3864 = 3864,
    _3865 = 3865,
    _3866 = 3866,
    _3867 = 3867,
    _3868 = 3868,
    _3869 = 3869,
    _3870 = 3870,
    _3871 = 3871,
    _3872 = 3872,
    _3873 = 3873,
    _3874 = 3874,
    _3875 = 3875,
    _3876 = 3876,
    _3877 = 3877,
    _3878 = 3878,
    _3879 = 3879,
    _3880 = 3880,
    _3881 = 3881,
    _3882 = 3882,
    _3883 = 3883,
    _3884 = 3884,
    _3885 = 3885,
    _3886 = 3886,
    _3887 = 3887,
    _3888 = 3888,
    _3889 = 3889,
    _3890 = 3890,
    _3891 = 3891,
    _3892 = 3892,
    _3893 = 3893,
    _3894 = 3894,
    _3895 = 3895,
    _3896 = 3896,
    _3897 = 3897,
    _3898 = 3898,
    _3899 = 3899,
    _3900 = 3900,
    _3901 = 3901,
    _3902 = 3902,
    _3903 = 3903,
    _3904 = 3904,
    _3905 = 3905,
    _3906 = 3906,
    _3907 = 3907,
    _3908 = 3908,
    _3909 = 3909,
    _3910 = 3910,
    _3911 = 3911,
    _3912 = 3912,
    _3913 = 3913,
    _3914 = 3914,
    _3915 = 3915,
    _3916 = 3916,
    _3917 = 3917,
    _3918 = 3918,
    _3919 = 3919,
    _3920 = 3920,
    _3921 = 3921,
    _3922 = 3922,
    _3923 = 3923,
    _3924 = 3924,
    _3925 = 3925,
    _3926 = 3926,
    _3927 = 3927,
    _3928 = 3928,
    _3929 = 3929,
    _3930 = 3930,
    _3931 = 3931,
    _3932 = 3932,
    _3933 = 3933,
    _3934 = 3934,
    _3935 = 3935,
    _3936 = 3936,
    _3937 = 3937,
    _3938 = 3938,
    _3939 = 3939,
    _3940 = 3940,
    _3941 = 3941,
    _3942 = 3942,
    _3943 = 3943,
    _3944 = 3944,
    _3945 = 3945,
    _3946 = 3946,
    _3947 = 3947,
    _3948 = 3948,
    _3949 = 3949,
    _3950 = 3950,
    _3951 = 3951,
    _3952 = 3952,
    _3953 = 3953,
    _3954 = 3954,
    _3955 = 3955,
    _3956 = 3956,
    _3957 = 3957,
    _3958 = 3958,
    _3959 = 3959,
    _3960 = 3960,
    _3961 = 3961,
    _3962 = 3962,
    _3963 = 3963,
    _3964 = 3964,
    _3965 = 3965,
    _3966 = 3966,
    _3967 = 3967,
    _3968 = 3968,
    _3969 = 3969,
    _3970 = 3970,
    _3971 = 3971,
    _3972 = 3972,
    _3973 = 3973,
    _3974 = 3974,
    _3975 = 3975,
    _3976 = 3976,
    _3977 = 3977,
    _3978 = 3978,
    _3979 = 3979,
    _3980 = 3980,
    _3981 = 3981,
    _3982 = 3982,
    _3983 = 3983,
    _3984 = 3984,
    _3985 = 3985,
    _3986 = 3986,
    _3987 = 3987,
    _3988 = 3988,
    _3989 = 3989,
    _3990 = 3990,
    _3991 = 3991,
    _3992 = 3992,
    _3993 = 3993,
    _3994 = 3994,
    _3995 = 3995,
    _3996 = 3996,
    _3997 = 3997,
    _3998 = 3998,
    _3999 = 3999,
    _4000 = 4000,
    _4001 = 4001,
    _4002 = 4002,
    _4003 = 4003,
    _4004 = 4004,
    _4005 = 4005,
    _4006 = 4006,
    _4007 = 4007,
    _4008 = 4008,
    _4009 = 4009,
    _4010 = 4010,
    _4011 = 4011,
    _4012 = 4012,
    _4013 = 4013,
    _4014 = 4014,
    _4015 = 4015,
    _4016 = 4016,
    _4017 = 4017,
    _4018 = 4018,
    _4019 = 4019,
    _4020 = 4020,
    _4021 = 4021,
    _4022 = 4022,
    _4023 = 4023,
    _4024 = 4024,
    _4025 = 4025,
    _4026 = 4026,
    _4027 = 4027,
    _4028 = 4028,
    _4029 = 4029,
    _4030 = 4030,
    _4031 = 4031,
    _4032 = 4032,
    _4033 = 4033,
    _4034 = 4034,
    _4035 = 4035,
    _4036 = 4036,
    _4037 = 4037,
    _4038 = 4038,
    _4039 = 4039,
    _4040 = 4040,
    _4041 = 4041,
    _4042 = 4042,
    _4043 = 4043,
    _4044 = 4044,
    _4045 = 4045,
    _4046 = 4046,
    _4047 = 4047,
    _4048 = 4048,
    _4049 = 4049,
    _4050 = 4050,
    _4051 = 4051,
    _4052 = 4052,
    _4053 = 4053,
    _4054 = 4054,
    _4055 = 4055,
    _4056 = 4056,
    _4057 = 4057,
    _4058 = 4058,
    _4059 = 4059,
    _4060 = 4060,
    _4061 = 4061,
    _4062 = 4062,
    _4063 = 4063,
    _4064 = 4064,
    _4065 = 4065,
    _4066 = 4066,
    _4067 = 4067,
    _4068 = 4068,
    _4069 = 4069,
    _4070 = 4070,
    _4071 = 4071,
    _4072 = 4072,
    _4073 = 4073,
    _4074 = 4074,
    _4075 = 4075,
    _4076 = 4076,
    _4077 = 4077,
    _4078 = 4078,
    _4079 = 4079,
    _4080 = 4080,
    _4081 = 4081,
    _4082 = 4082,
    _4083 = 4083,
    _4084 = 4084,
    _4085 = 4085,
    _4086 = 4086,
    _4087 = 4087,
    _4088 = 4088,
    _4089 = 4089,
    _4090 = 4090,
    _4091 = 4091,
    _4092 = 4092,
    _4093 = 4093,
    _4094 = 4094,
    _4095 = 4095,
    _4096 = 4096,
    _4097 = 4097,
    _4098 = 4098,
    _4099 = 4099,
    _4100 = 4100,
    _4101 = 4101,
    _4102 = 4102,
    _4103 = 4103,
    _4104 = 4104,
    _4105 = 4105,
    _4106 = 4106,
    _4107 = 4107,
    _4108 = 4108,
    _4109 = 4109,
    _4110 = 4110,
    _4111 = 4111,
    _4112 = 4112,
    _4113 = 4113,
    _4114 = 4114,
    _4115 = 4115,
    _4116 = 4116,
    _4117 = 4117,
    _4118 = 4118,
    _4119 = 4119,
    _4120 = 4120,
    _4121 = 4121,
    _4122 = 4122,
    _4123 = 4123,
    _4124 = 4124,
    _4125 = 4125,
    _4126 = 4126,
    _4127 = 4127,
    _4128 = 4128,
    _4129 = 4129,
    _4130 = 4130,
    _4131 = 4131,
    _4132 = 4132,
    _4133 = 4133,
    _4134 = 4134,
    _4135 = 4135,
    _4136 = 4136,
    _4137 = 4137,
    _4138 = 4138,
    _4139 = 4139,
    _4140 = 4140,
    _4141 = 4141,
    _4142 = 4142,
    _4143 = 4143,
    _4144 = 4144,
    _4145 = 4145,
    _4146 = 4146,
    _4147 = 4147,
    _4148 = 4148,
    _4149 = 4149,
    _4150 = 4150,
    _4151 = 4151,
    _4152 = 4152,
    _4153 = 4153,
    _4154 = 4154,
    _4155 = 4155,
    _4156 = 4156,
    _4157 = 4157,
    _4158 = 4158,
    _4159 = 4159,
    _4160 = 4160,
    _4161 = 4161,
    _4162 = 4162,
    _4163 = 4163,
    _4164 = 4164,
    _4165 = 4165,
    _4166 = 4166,
    _4167 = 4167,
    _4168 = 4168,
    _4169 = 4169,
    _4170 = 4170,
    _4171 = 4171,
    _4172 = 4172,
    _4173 = 4173,
    _4174 = 4174,
    _4175 = 4175,
    _4176 = 4176,
    _4177 = 4177,
    _4178 = 4178,
    _4179 = 4179,
    _4180 = 4180,
    _4181 = 4181,
    _4182 = 4182,
    _4183 = 4183,
    _4184 = 4184,
    _4185 = 4185,
    _4186 = 4186,
    _4187 = 4187,
    _4188 = 4188,
    _4189 = 4189,
    _4190 = 4190,
    _4191 = 4191,
    _4192 = 4192,
    _4193 = 4193,
    _4194 = 4194,
    _4195 = 4195,
    _4196 = 4196,
    _4197 = 4197,
    _4198 = 4198,
    _4199 = 4199,
    _4200 = 4200,
    _4201 = 4201,
    _4202 = 4202,
    _4203 = 4203,
    _4204 = 4204,
    _4205 = 4205,
    _4206 = 4206,
    _4207 = 4207,
    _4208 = 4208,
    _4209 = 4209,
    _4210 = 4210,
    _4211 = 4211,
    _4212 = 4212,
    _4213 = 4213,
    _4214 = 4214,
    _4215 = 4215,
    _4216 = 4216,
    _4217 = 4217,
    _4218 = 4218,
    _4219 = 4219,
    _4220 = 4220,
    _4221 = 4221,
    _4222 = 4222,
    _4223 = 4223,
    _4224 = 4224,
    _4225 = 4225,
    _4226 = 4226,
    _4227 = 4227,
    _4228 = 4228,
    _4229 = 4229,
    _4230 = 4230,
    _4231 = 4231,
    _4232 = 4232,
    _4233 = 4233,
    _4234 = 4234,
    _4235 = 4235,
    _4236 = 4236,
    _4237 = 4237,
    _4238 = 4238,
    _4239 = 4239,
    _4240 = 4240,
    _4241 = 4241,
    _4242 = 4242,
    _4243 = 4243,
    _4244 = 4244,
    _4245 = 4245,
    _4246 = 4246,
    _4247 = 4247,
    _4248 = 4248,
    _4249 = 4249,
    _4250 = 4250,
    _4251 = 4251,
    _4252 = 4252,
    _4253 = 4253,
    _4254 = 4254,
    _4255 = 4255,
    _4256 = 4256,
    _4257 = 4257,
    _4258 = 4258,
    _4259 = 4259,
    _4260 = 4260,
    _4261 = 4261,
    _4262 = 4262,
    _4263 = 4263,
    _4264 = 4264,
    _4265 = 4265,
    _4266 = 4266,
    _4267 = 4267,
    _4268 = 4268,
    _4269 = 4269,
    _4270 = 4270,
    _4271 = 4271,
    _4272 = 4272,
    _4273 = 4273,
    _4274 = 4274,
    _4275 = 4275,
    _4276 = 4276,
    _4277 = 4277,
    _4278 = 4278,
    _4279 = 4279,
    _4280 = 4280,
    _4281 = 4281,
    _4282 = 4282,
    _4283 = 4283,
    _4284 = 4284,
    _4285 = 4285,
    _4286 = 4286,
    _4287 = 4287,
    _4288 = 4288,
    _4289 = 4289,
    _4290 = 4290,
    _4291 = 4291,
    _4292 = 4292,
    _4293 = 4293,
    _4294 = 4294,
    _4295 = 4295,
    _4296 = 4296,
    _4297 = 4297,
    _4298 = 4298,
    _4299 = 4299,
    _4300 = 4300,
    _4301 = 4301,
    _4302 = 4302,
    _4303 = 4303,
    _4304 = 4304,
    _4305 = 4305,
    _4306 = 4306,
    _4307 = 4307,
    _4308 = 4308,
    _4309 = 4309,
    _4310 = 4310,
    _4311 = 4311,
    _4312 = 4312,
    _4313 = 4313,
    _4314 = 4314,
    _4315 = 4315,
    _4316 = 4316,
    _4317 = 4317,
    _4318 = 4318,
    _4319 = 4319,
    _4320 = 4320,
    _4321 = 4321,
    _4322 = 4322,
    _4323 = 4323,
    _4324 = 4324,
    _4325 = 4325,
    _4326 = 4326,
    _4327 = 4327,
    _4328 = 4328,
    _4329 = 4329,
    _4330 = 4330,
    _4331 = 4331,
    _4332 = 4332,
    _4333 = 4333,
    _4334 = 4334,
    _4335 = 4335,
    _4336 = 4336,
    _4337 = 4337,
    _4338 = 4338,
    _4339 = 4339,
    _4340 = 4340,
    _4341 = 4341,
    _4342 = 4342,
    _4343 = 4343,
    _4344 = 4344,
    _4345 = 4345,
    _4346 = 4346,
    _4347 = 4347,
    _4348 = 4348,
    _4349 = 4349,
    _4350 = 4350,
    _4351 = 4351,
    _4352 = 4352,
    _4353 = 4353,
    _4354 = 4354,
    _4355 = 4355,
    _4356 = 4356,
    _4357 = 4357,
    _4358 = 4358,
    _4359 = 4359,
    _4360 = 4360,
    _4361 = 4361,
    _4362 = 4362,
    _4363 = 4363,
    _4364 = 4364,
    _4365 = 4365,
    _4366 = 4366,
    _4367 = 4367,
    _4368 = 4368,
    _4369 = 4369,
    _4370 = 4370,
    _4371 = 4371,
    _4372 = 4372,
    _4373 = 4373,
    _4374 = 4374,
    _4375 = 4375,
    _4376 = 4376,
    _4377 = 4377,
    _4378 = 4378,
    _4379 = 4379,
    _4380 = 4380,
    _4381 = 4381,
    _4382 = 4382,
    _4383 = 4383,
    _4384 = 4384,
    _4385 = 4385,
    _4386 = 4386,
    _4387 = 4387,
    _4388 = 4388,
    _4389 = 4389,
    _4390 = 4390,
    _4391 = 4391,
    _4392 = 4392,
    _4393 = 4393,
    _4394 = 4394,
    _4395 = 4395,
    _4396 = 4396,
    _4397 = 4397,
    _4398 = 4398,
    _4399 = 4399,
    _4400 = 4400,
    _4401 = 4401,
    _4402 = 4402,
    _4403 = 4403,
    _4404 = 4404,
    _4405 = 4405,
    _4406 = 4406,
    _4407 = 4407,
    _4408 = 4408,
    _4409 = 4409,
    _4410 = 4410,
    _4411 = 4411,
    _4412 = 4412,
    _4413 = 4413,
    _4414 = 4414,
    _4415 = 4415,
    _4416 = 4416,
    _4417 = 4417,
    _4418 = 4418,
    _4419 = 4419,
    _4420 = 4420,
    _4421 = 4421,
    _4422 = 4422,
    _4423 = 4423,
    _4424 = 4424,
    _4425 = 4425,
    _4426 = 4426,
    _4427 = 4427,
    _4428 = 4428,
    _4429 = 4429,
    _4430 = 4430,
    _4431 = 4431,
    _4432 = 4432,
    _4433 = 4433,
    _4434 = 4434,
    _4435 = 4435,
    _4436 = 4436,
    _4437 = 4437,
    _4438 = 4438,
    _4439 = 4439,
    _4440 = 4440,
    _4441 = 4441,
    _4442 = 4442,
    _4443 = 4443,
    _4444 = 4444,
    _4445 = 4445,
    _4446 = 4446,
    _4447 = 4447,
    _4448 = 4448,
    _4449 = 4449,
    _4450 = 4450,
    _4451 = 4451,
    _4452 = 4452,
    _4453 = 4453,
    _4454 = 4454,
    _4455 = 4455,
    _4456 = 4456,
    _4457 = 4457,
    _4458 = 4458,
    _4459 = 4459,
    _4460 = 4460,
    _4461 = 4461,
    _4462 = 4462,
    _4463 = 4463,
    _4464 = 4464,
    _4465 = 4465,
    _4466 = 4466,
    _4467 = 4467,
    _4468 = 4468,
    _4469 = 4469,
    _4470 = 4470,
    _4471 = 4471,
    _4472 = 4472,
    _4473 = 4473,
    _4474 = 4474,
    _4475 = 4475,
    _4476 = 4476,
    _4477 = 4477,
    _4478 = 4478,
    _4479 = 4479,
    _4480 = 4480,
    _4481 = 4481,
    _4482 = 4482,
    _4483 = 4483,
    _4484 = 4484,
    _4485 = 4485,
    _4486 = 4486,
    _4487 = 4487,
    _4488 = 4488,
    _4489 = 4489,
    _4490 = 4490,
    _4491 = 4491,
    _4492 = 4492,
    _4493 = 4493,
    _4494 = 4494,
    _4495 = 4495,
    _4496 = 4496,
    _4497 = 4497,
    _4498 = 4498,
    _4499 = 4499,
    _4500 = 4500,
    _4501 = 4501,
    _4502 = 4502,
    _4503 = 4503,
    _4504 = 4504,
    _4505 = 4505,
    _4506 = 4506,
    _4507 = 4507,
    _4508 = 4508,
    _4509 = 4509,
    _4510 = 4510,
    _4511 = 4511,
    _4512 = 4512,
    _4513 = 4513,
    _4514 = 4514,
    _4515 = 4515,
    _4516 = 4516,
    _4517 = 4517,
    _4518 = 4518,
    _4519 = 4519,
    _4520 = 4520,
    _4521 = 4521,
    _4522 = 4522,
    _4523 = 4523,
    _4524 = 4524,
    _4525 = 4525,
    _4526 = 4526,
    _4527 = 4527,
    _4528 = 4528,
    _4529 = 4529,
    _4530 = 4530,
    _4531 = 4531,
    _4532 = 4532,
    _4533 = 4533,
    _4534 = 4534,
    _4535 = 4535,
    _4536 = 4536,
    _4537 = 4537,
    _4538 = 4538,
    _4539 = 4539,
    _4540 = 4540,
    _4541 = 4541,
    _4542 = 4542,
    _4543 = 4543,
    _4544 = 4544,
    _4545 = 4545,
    _4546 = 4546,
    _4547 = 4547,
    _4548 = 4548,
    _4549 = 4549,
    _4550 = 4550,
    _4551 = 4551,
    _4552 = 4552,
    _4553 = 4553,
    _4554 = 4554,
    _4555 = 4555,
    _4556 = 4556,
    _4557 = 4557,
    _4558 = 4558,
    _4559 = 4559,
    _4560 = 4560,
    _4561 = 4561,
    _4562 = 4562,
    _4563 = 4563,
    _4564 = 4564,
    _4565 = 4565,
    _4566 = 4566,
    _4567 = 4567,
    _4568 = 4568,
    _4569 = 4569,
    _4570 = 4570,
    _4571 = 4571,
    _4572 = 4572,
    _4573 = 4573,
    _4574 = 4574,
    _4575 = 4575,
    _4576 = 4576,
    _4577 = 4577,
    _4578 = 4578,
    _4579 = 4579,
    _4580 = 4580,
    _4581 = 4581,
    _4582 = 4582,
    _4583 = 4583,
    _4584 = 4584,
    _4585 = 4585,
    _4586 = 4586,
    _4587 = 4587,
    _4588 = 4588,
    _4589 = 4589,
    _4590 = 4590,
    _4591 = 4591,
    _4592 = 4592,
    _4593 = 4593,
    _4594 = 4594,
    _4595 = 4595,
    _4596 = 4596,
    _4597 = 4597,
    _4598 = 4598,
    _4599 = 4599,
    _4600 = 4600,
    _4601 = 4601,
    _4602 = 4602,
    _4603 = 4603,
    _4604 = 4604,
    _4605 = 4605,
    _4606 = 4606,
    _4607 = 4607,
    _4608 = 4608,
    _4609 = 4609,
    _4610 = 4610,
    _4611 = 4611,
    _4612 = 4612,
    _4613 = 4613,
    _4614 = 4614,
    _4615 = 4615,
    _4616 = 4616,
    _4617 = 4617,
    _4618 = 4618,
    _4619 = 4619,
    _4620 = 4620,
    _4621 = 4621,
    _4622 = 4622,
    _4623 = 4623,
    _4624 = 4624,
    _4625 = 4625,
    _4626 = 4626,
    _4627 = 4627,
    _4628 = 4628,
    _4629 = 4629,
    _4630 = 4630,
    _4631 = 4631,
    _4632 = 4632,
    _4633 = 4633,
    _4634 = 4634,
    _4635 = 4635,
    _4636 = 4636,
    _4637 = 4637,
    _4638 = 4638,
    _4639 = 4639,
    _4640 = 4640,
    _4641 = 4641,
    _4642 = 4642,
    _4643 = 4643,
    _4644 = 4644,
    _4645 = 4645,
    _4646 = 4646,
    _4647 = 4647,
    _4648 = 4648,
    _4649 = 4649,
    _4650 = 4650,
    _4651 = 4651,
    _4652 = 4652,
    _4653 = 4653,
    _4654 = 4654,
    _4655 = 4655,
    _4656 = 4656,
    _4657 = 4657,
    _4658 = 4658,
    _4659 = 4659,
    _4660 = 4660,
    _4661 = 4661,
    _4662 = 4662,
    _4663 = 4663,
    _4664 = 4664,
    _4665 = 4665,
    _4666 = 4666,
    _4667 = 4667,
    _4668 = 4668,
    _4669 = 4669,
    _4670 = 4670,
    _4671 = 4671,
    _4672 = 4672,
    _4673 = 4673,
    _4674 = 4674,
    _4675 = 4675,
    _4676 = 4676,
    _4677 = 4677,
    _4678 = 4678,
    _4679 = 4679,
    _4680 = 4680,
    _4681 = 4681,
    _4682 = 4682,
    _4683 = 4683,
    _4684 = 4684,
    _4685 = 4685,
    _4686 = 4686,
    _4687 = 4687,
    _4688 = 4688,
    _4689 = 4689,
    _4690 = 4690,
    _4691 = 4691,
    _4692 = 4692,
    _4693 = 4693,
    _4694 = 4694,
    _4695 = 4695,
    _4696 = 4696,
    _4697 = 4697,
    _4698 = 4698,
    _4699 = 4699,
    _4700 = 4700,
    _4701 = 4701,
    _4702 = 4702,
    _4703 = 4703,
    _4704 = 4704,
    _4705 = 4705,
    _4706 = 4706,
    _4707 = 4707,
    _4708 = 4708,
    _4709 = 4709,
    _4710 = 4710,
    _4711 = 4711,
    _4712 = 4712,
    _4713 = 4713,
    _4714 = 4714,
    _4715 = 4715,
    _4716 = 4716,
    _4717 = 4717,
    _4718 = 4718,
    _4719 = 4719,
    _4720 = 4720,
    _4721 = 4721,
    _4722 = 4722,
    _4723 = 4723,
    _4724 = 4724,
    _4725 = 4725,
    _4726 = 4726,
    _4727 = 4727,
    _4728 = 4728,
    _4729 = 4729,
    _4730 = 4730,
    _4731 = 4731,
    _4732 = 4732,
    _4733 = 4733,
    _4734 = 4734,
    _4735 = 4735,
    _4736 = 4736,
    _4737 = 4737,
    _4738 = 4738,
    _4739 = 4739,
    _4740 = 4740,
    _4741 = 4741,
    _4742 = 4742,
    _4743 = 4743,
    _4744 = 4744,
    _4745 = 4745,
    _4746 = 4746,
    _4747 = 4747,
    _4748 = 4748,
    _4749 = 4749,
    _4750 = 4750,
    _4751 = 4751,
    _4752 = 4752,
    _4753 = 4753,
    _4754 = 4754,
    _4755 = 4755,
    _4756 = 4756,
    _4757 = 4757,
    _4758 = 4758,
    _4759 = 4759,
    _4760 = 4760,
    _4761 = 4761,
    _4762 = 4762,
    _4763 = 4763,
    _4764 = 4764,
    _4765 = 4765,
    _4766 = 4766,
    _4767 = 4767,
    _4768 = 4768,
    _4769 = 4769,
    _4770 = 4770,
    _4771 = 4771,
    _4772 = 4772,
    _4773 = 4773,
    _4774 = 4774,
    _4775 = 4775,
    _4776 = 4776,
    _4777 = 4777,
    _4778 = 4778,
    _4779 = 4779,
    _4780 = 4780,
    _4781 = 4781,
    _4782 = 4782,
    _4783 = 4783,
    _4784 = 4784,
    _4785 = 4785,
    _4786 = 4786,
    _4787 = 4787,
    _4788 = 4788,
    _4789 = 4789,
    _4790 = 4790,
    _4791 = 4791,
    _4792 = 4792,
    _4793 = 4793,
    _4794 = 4794,
    _4795 = 4795,
    _4796 = 4796,
    _4797 = 4797,
    _4798 = 4798,
    _4799 = 4799,
    _4800 = 4800,
    _4801 = 4801,
    _4802 = 4802,
    _4803 = 4803,
    _4804 = 4804,
    _4805 = 4805,
    _4806 = 4806,
    _4807 = 4807,
    _4808 = 4808,
    _4809 = 4809,
    _4810 = 4810,
    _4811 = 4811,
    _4812 = 4812,
    _4813 = 4813,
    _4814 = 4814,
    _4815 = 4815,
    _4816 = 4816,
    _4817 = 4817,
    _4818 = 4818,
    _4819 = 4819,
    _4820 = 4820,
    _4821 = 4821,
    _4822 = 4822,
    _4823 = 4823,
    _4824 = 4824,
    _4825 = 4825,
    _4826 = 4826,
    _4827 = 4827,
    _4828 = 4828,
    _4829 = 4829,
    _4830 = 4830,
    _4831 = 4831,
    _4832 = 4832,
    _4833 = 4833,
    _4834 = 4834,
    _4835 = 4835,
    _4836 = 4836,
    _4837 = 4837,
    _4838 = 4838,
    _4839 = 4839,
    _4840 = 4840,
    _4841 = 4841,
    _4842 = 4842,
    _4843 = 4843,
    _4844 = 4844,
    _4845 = 4845,
    _4846 = 4846,
    _4847 = 4847,
    _4848 = 4848,
    _4849 = 4849,
    _4850 = 4850,
    _4851 = 4851,
    _4852 = 4852,
    _4853 = 4853,
    _4854 = 4854,
    _4855 = 4855,
    _4856 = 4856,
    _4857 = 4857,
    _4858 = 4858,
    _4859 = 4859,
    _4860 = 4860,
    _4861 = 4861,
    _4862 = 4862,
    _4863 = 4863,
    _4864 = 4864,
    _4865 = 4865,
    _4866 = 4866,
    _4867 = 4867,
    _4868 = 4868,
    _4869 = 4869,
    _4870 = 4870,
    _4871 = 4871,
    _4872 = 4872,
    _4873 = 4873,
    _4874 = 4874,
    _4875 = 4875,
    _4876 = 4876,
    _4877 = 4877,
    _4878 = 4878,
    _4879 = 4879,
    _4880 = 4880,
    _4881 = 4881,
    _4882 = 4882,
    _4883 = 4883,
    _4884 = 4884,
    _4885 = 4885,
    _4886 = 4886,
    _4887 = 4887,
    _4888 = 4888,
    _4889 = 4889,
    _4890 = 4890,
    _4891 = 4891,
    _4892 = 4892,
    _4893 = 4893,
    _4894 = 4894,
    _4895 = 4895,
    _4896 = 4896,
    _4897 = 4897,
    _4898 = 4898,
    _4899 = 4899,
    _4900 = 4900,
    _4901 = 4901,
    _4902 = 4902,
    _4903 = 4903,
    _4904 = 4904,
    _4905 = 4905,
    _4906 = 4906,
    _4907 = 4907,
    _4908 = 4908,
    _4909 = 4909,
    _4910 = 4910,
    _4911 = 4911,
    _4912 = 4912,
    _4913 = 4913,
    _4914 = 4914,
    _4915 = 4915,
    _4916 = 4916,
    _4917 = 4917,
    _4918 = 4918,
    _4919 = 4919,
    _4920 = 4920,
    _4921 = 4921,
    _4922 = 4922,
    _4923 = 4923,
    _4924 = 4924,
    _4925 = 4925,
    _4926 = 4926,
    _4927 = 4927,
    _4928 = 4928,
    _4929 = 4929,
    _4930 = 4930,
    _4931 = 4931,
    _4932 = 4932,
    _4933 = 4933,
    _4934 = 4934,
    _4935 = 4935,
    _4936 = 4936,
    _4937 = 4937,
    _4938 = 4938,
    _4939 = 4939,
    _4940 = 4940,
    _4941 = 4941,
    _4942 = 4942,
    _4943 = 4943,
    _4944 = 4944,
    _4945 = 4945,
    _4946 = 4946,
    _4947 = 4947,
    _4948 = 4948,
    _4949 = 4949,
    _4950 = 4950,
    _4951 = 4951,
    _4952 = 4952,
    _4953 = 4953,
    _4954 = 4954,
    _4955 = 4955,
    _4956 = 4956,
    _4957 = 4957,
    _4958 = 4958,
    _4959 = 4959,
    _4960 = 4960,
    _4961 = 4961,
    _4962 = 4962,
    _4963 = 4963,
    _4964 = 4964,
    _4965 = 4965,
    _4966 = 4966,
    _4967 = 4967,
    _4968 = 4968,
    _4969 = 4969,
    _4970 = 4970,
    _4971 = 4971,
    _4972 = 4972,
    _4973 = 4973,
    _4974 = 4974,
    _4975 = 4975,
    _4976 = 4976,
    _4977 = 4977,
    _4978 = 4978,
    _4979 = 4979,
    _4980 = 4980,
    _4981 = 4981,
    _4982 = 4982,
    _4983 = 4983,
    _4984 = 4984,
    _4985 = 4985,
    _4986 = 4986,
    _4987 = 4987,
    _4988 = 4988,
    _4989 = 4989,
    _4990 = 4990,
    _4991 = 4991,
    _4992 = 4992,
    _4993 = 4993,
    _4994 = 4994,
    _4995 = 4995,
    _4996 = 4996,
    _4997 = 4997,
    _4998 = 4998,
    _4999 = 4999,
    _5000 = 5000,
    _5001 = 5001,
    _5002 = 5002,
    _5003 = 5003,
    _5004 = 5004,
    _5005 = 5005,
    _5006 = 5006,
    _5007 = 5007,
    _5008 = 5008,
    _5009 = 5009,
    _5010 = 5010,
    _5011 = 5011,
    _5012 = 5012,
    _5013 = 5013,
    _5014 = 5014,
    _5015 = 5015,
    _5016 = 5016,
    _5017 = 5017,
    _5018 = 5018,
    _5019 = 5019,
    _5020 = 5020,
    _5021 = 5021,
    _5022 = 5022,
    _5023 = 5023,
    _5024 = 5024,
    _5025 = 5025,
    _5026 = 5026,
    _5027 = 5027,
    _5028 = 5028,
    _5029 = 5029,
    _5030 = 5030,
    _5031 = 5031,
    _5032 = 5032,
    _5033 = 5033,
    _5034 = 5034,
    _5035 = 5035,
    _5036 = 5036,
    _5037 = 5037,
    _5038 = 5038,
    _5039 = 5039,
    _5040 = 5040,
    _5041 = 5041,
    _5042 = 5042,
    _5043 = 5043,
    _5044 = 5044,
    _5045 = 5045,
    _5046 = 5046,
    _5047 = 5047,
    _5048 = 5048,
    _5049 = 5049,
    _5050 = 5050,
    _5051 = 5051,
    _5052 = 5052,
    _5053 = 5053,
    _5054 = 5054,
    _5055 = 5055,
    _5056 = 5056,
    _5057 = 5057,
    _5058 = 5058,
    _5059 = 5059,
    _5060 = 5060,
    _5061 = 5061,
    _5062 = 5062,
    _5063 = 5063,
    _5064 = 5064,
    _5065 = 5065,
    _5066 = 5066,
    _5067 = 5067,
    _5068 = 5068,
    _5069 = 5069,
    _5070 = 5070,
    _5071 = 5071,
    _5072 = 5072,
    _5073 = 5073,
    _5074 = 5074,
    _5075 = 5075,
    _5076 = 5076,
    _5077 = 5077,
    _5078 = 5078,
    _5079 = 5079,
    _5080 = 5080,
    _5081 = 5081,
    _5082 = 5082,
    _5083 = 5083,
    _5084 = 5084,
    _5085 = 5085,
    _5086 = 5086,
    _5087 = 5087,
    _5088 = 5088,
    _5089 = 5089,
    _5090 = 5090,
    _5091 = 5091,
    _5092 = 5092,
    _5093 = 5093,
    _5094 = 5094,
    _5095 = 5095,
    _5096 = 5096,
    _5097 = 5097,
    _5098 = 5098,
    _5099 = 5099,
    _5100 = 5100,
    _5101 = 5101,
    _5102 = 5102,
    _5103 = 5103,
    _5104 = 5104,
    _5105 = 5105,
    _5106 = 5106,
    _5107 = 5107,
    _5108 = 5108,
    _5109 = 5109,
    _5110 = 5110,
    _5111 = 5111,
    _5112 = 5112,
    _5113 = 5113,
    _5114 = 5114,
    _5115 = 5115,
    _5116 = 5116,
    _5117 = 5117,
    _5118 = 5118,
    _5119 = 5119,
    _5120 = 5120,
    _5121 = 5121,
    _5122 = 5122,
    _5123 = 5123,
    _5124 = 5124,
    _5125 = 5125,
    _5126 = 5126,
    _5127 = 5127,
    _5128 = 5128,
    _5129 = 5129,
    _5130 = 5130,
    _5131 = 5131,
    _5132 = 5132,
    _5133 = 5133,
    _5134 = 5134,
    _5135 = 5135,
    _5136 = 5136,
    _5137 = 5137,
    _5138 = 5138,
    _5139 = 5139,
    _5140 = 5140,
    _5141 = 5141,
    _5142 = 5142,
    _5143 = 5143,
    _5144 = 5144,
    _5145 = 5145,
    _5146 = 5146,
    _5147 = 5147,
    _5148 = 5148,
    _5149 = 5149,
    _5150 = 5150,
    _5151 = 5151,
    _5152 = 5152,
    _5153 = 5153,
    _5154 = 5154,
    _5155 = 5155,
    _5156 = 5156,
    _5157 = 5157,
    _5158 = 5158,
    _5159 = 5159,
    _5160 = 5160,
    _5161 = 5161,
    _5162 = 5162,
    _5163 = 5163,
    _5164 = 5164,
    _5165 = 5165,
    _5166 = 5166,
    _5167 = 5167,
    _5168 = 5168,
    _5169 = 5169,
    _5170 = 5170,
    _5171 = 5171,
    _5172 = 5172,
    _5173 = 5173,
    _5174 = 5174,
    _5175 = 5175,
    _5176 = 5176,
    _5177 = 5177,
    _5178 = 5178,
    _5179 = 5179,
    _5180 = 5180,
    _5181 = 5181,
    _5182 = 5182,
    _5183 = 5183,
    _5184 = 5184,
    _5185 = 5185,
    _5186 = 5186,
    _5187 = 5187,
    _5188 = 5188,
    _5189 = 5189,
    _5190 = 5190,
    _5191 = 5191,
    _5192 = 5192,
    _5193 = 5193,
    _5194 = 5194,
    _5195 = 5195,
    _5196 = 5196,
    _5197 = 5197,
    _5198 = 5198,
    _5199 = 5199,
    _5200 = 5200,
    _5201 = 5201,
    _5202 = 5202,
    _5203 = 5203,
    _5204 = 5204,
    _5205 = 5205,
    _5206 = 5206,
    _5207 = 5207,
    _5208 = 5208,
    _5209 = 5209,
    _5210 = 5210,
    _5211 = 5211,
    _5212 = 5212,
    _5213 = 5213,
    _5214 = 5214,
    _5215 = 5215,
    _5216 = 5216,
    _5217 = 5217,
    _5218 = 5218,
    _5219 = 5219,
    _5220 = 5220,
    _5221 = 5221,
    _5222 = 5222,
    _5223 = 5223,
    _5224 = 5224,
    _5225 = 5225,
    _5226 = 5226,
    _5227 = 5227,
    _5228 = 5228,
    _5229 = 5229,
    _5230 = 5230,
    _5231 = 5231,
    _5232 = 5232,
    _5233 = 5233,
    _5234 = 5234,
    _5235 = 5235,
    _5236 = 5236,
    _5237 = 5237,
    _5238 = 5238,
    _5239 = 5239,
    _5240 = 5240,
    _5241 = 5241,
    _5242 = 5242,
    _5243 = 5243,
    _5244 = 5244,
    _5245 = 5245,
    _5246 = 5246,
    _5247 = 5247,
    _5248 = 5248,
    _5249 = 5249,
    _5250 = 5250,
    _5251 = 5251,
    _5252 = 5252,
    _5253 = 5253,
    _5254 = 5254,
    _5255 = 5255,
    _5256 = 5256,
    _5257 = 5257,
    _5258 = 5258,
    _5259 = 5259,
    _5260 = 5260,
    _5261 = 5261,
    _5262 = 5262,
    _5263 = 5263,
    _5264 = 5264,
    _5265 = 5265,
    _5266 = 5266,
    _5267 = 5267,
    _5268 = 5268,
    _5269 = 5269,
    _5270 = 5270,
    _5271 = 5271,
    _5272 = 5272,
    _5273 = 5273,
    _5274 = 5274,
    _5275 = 5275,
    _5276 = 5276,
    _5277 = 5277,
    _5278 = 5278,
    _5279 = 5279,
    _5280 = 5280,
    _5281 = 5281,
    _5282 = 5282,
    _5283 = 5283,
    _5284 = 5284,
    _5285 = 5285,
    _5286 = 5286,
    _5287 = 5287,
    _5288 = 5288,
    _5289 = 5289,
    _5290 = 5290,
    _5291 = 5291,
    _5292 = 5292,
    _5293 = 5293,
    _5294 = 5294,
    _5295 = 5295,
    _5296 = 5296,
    _5297 = 5297,
    _5298 = 5298,
    _5299 = 5299,
    _5300 = 5300,
    _5301 = 5301,
    _5302 = 5302,
    _5303 = 5303,
    _5304 = 5304,
    _5305 = 5305,
    _5306 = 5306,
    _5307 = 5307,
    _5308 = 5308,
    _5309 = 5309,
    _5310 = 5310,
    _5311 = 5311,
    _5312 = 5312,
    _5313 = 5313,
    _5314 = 5314,
    _5315 = 5315,
    _5316 = 5316,
    _5317 = 5317,
    _5318 = 5318,
    _5319 = 5319,
    _5320 = 5320,
    _5321 = 5321,
    _5322 = 5322,
    _5323 = 5323,
    _5324 = 5324,
    _5325 = 5325,
    _5326 = 5326,
    _5327 = 5327,
    _5328 = 5328,
    _5329 = 5329,
    _5330 = 5330,
    _5331 = 5331,
    _5332 = 5332,
    _5333 = 5333,
    _5334 = 5334,
    _5335 = 5335,
    _5336 = 5336,
    _5337 = 5337,
    _5338 = 5338,
    _5339 = 5339,
    _5340 = 5340,
    _5341 = 5341,
    _5342 = 5342,
    _5343 = 5343,
    _5344 = 5344,
    _5345 = 5345,
    _5346 = 5346,
    _5347 = 5347,
    _5348 = 5348,
    _5349 = 5349,
    _5350 = 5350,
    _5351 = 5351,
    _5352 = 5352,
    _5353 = 5353,
    _5354 = 5354,
    _5355 = 5355,
    _5356 = 5356,
    _5357 = 5357,
    _5358 = 5358,
    _5359 = 5359,
    _5360 = 5360,
    _5361 = 5361,
    _5362 = 5362,
    _5363 = 5363,
    _5364 = 5364,
    _5365 = 5365,
    _5366 = 5366,
    _5367 = 5367,
    _5368 = 5368,
    _5369 = 5369,
    _5370 = 5370,
    _5371 = 5371,
    _5372 = 5372,
    _5373 = 5373,
    _5374 = 5374,
    _5375 = 5375,
    _5376 = 5376,
    _5377 = 5377,
    _5378 = 5378,
    _5379 = 5379,
    _5380 = 5380,
    _5381 = 5381,
    _5382 = 5382,
    _5383 = 5383,
    _5384 = 5384,
    _5385 = 5385,
    _5386 = 5386,
    _5387 = 5387,
    _5388 = 5388,
    _5389 = 5389,
    _5390 = 5390,
    _5391 = 5391,
    _5392 = 5392,
    _5393 = 5393,
    _5394 = 5394,
    _5395 = 5395,
    _5396 = 5396,
    _5397 = 5397,
    _5398 = 5398,
    _5399 = 5399,
    _5400 = 5400,
    _5401 = 5401,
    _5402 = 5402,
    _5403 = 5403,
    _5404 = 5404,
    _5405 = 5405,
    _5406 = 5406,
    _5407 = 5407,
    _5408 = 5408,
    _5409 = 5409,
    _5410 = 5410,
    _5411 = 5411,
    _5412 = 5412,
    _5413 = 5413,
    _5414 = 5414,
    _5415 = 5415,
    _5416 = 5416,
    _5417 = 5417,
    _5418 = 5418,
    _5419 = 5419,
    _5420 = 5420,
    _5421 = 5421,
    _5422 = 5422,
    _5423 = 5423,
    _5424 = 5424,
    _5425 = 5425,
    _5426 = 5426,
    _5427 = 5427,
    _5428 = 5428,
    _5429 = 5429,
    _5430 = 5430,
    _5431 = 5431,
    _5432 = 5432,
    _5433 = 5433,
    _5434 = 5434,
    _5435 = 5435,
    _5436 = 5436,
    _5437 = 5437,
    _5438 = 5438,
    _5439 = 5439,
    _5440 = 5440,
    _5441 = 5441,
    _5442 = 5442,
    _5443 = 5443,
    _5444 = 5444,
    _5445 = 5445,
    _5446 = 5446,
    _5447 = 5447,
    _5448 = 5448,
    _5449 = 5449,
    _5450 = 5450,
    _5451 = 5451,
    _5452 = 5452,
    _5453 = 5453,
    _5454 = 5454,
    _5455 = 5455,
    _5456 = 5456,
    _5457 = 5457,
    _5458 = 5458,
    _5459 = 5459,
    _5460 = 5460,
    _5461 = 5461,
    _5462 = 5462,
    _5463 = 5463,
    _5464 = 5464,
    _5465 = 5465,
    _5466 = 5466,
    _5467 = 5467,
    _5468 = 5468,
    _5469 = 5469,
    _5470 = 5470,
    _5471 = 5471,
    _5472 = 5472,
    _5473 = 5473,
    _5474 = 5474,
    _5475 = 5475,
    _5476 = 5476,
    _5477 = 5477,
    _5478 = 5478,
    _5479 = 5479,
    _5480 = 5480,
    _5481 = 5481,
    _5482 = 5482,
    _5483 = 5483,
    _5484 = 5484,
    _5485 = 5485,
    _5486 = 5486,
    _5487 = 5487,
    _5488 = 5488,
    _5489 = 5489,
    _5490 = 5490,
    _5491 = 5491,
    _5492 = 5492,
    _5493 = 5493,
    _5494 = 5494,
    _5495 = 5495,
    _5496 = 5496,
    _5497 = 5497,
    _5498 = 5498,
    _5499 = 5499,
    _5500 = 5500,
    _5501 = 5501,
    _5502 = 5502,
    _5503 = 5503,
    _5504 = 5504,
    _5505 = 5505,
    _5506 = 5506,
    _5507 = 5507,
    _5508 = 5508,
    _5509 = 5509,
    _5510 = 5510,
    _5511 = 5511,
    _5512 = 5512,
    _5513 = 5513,
    _5514 = 5514,
    _5515 = 5515,
    _5516 = 5516,
    _5517 = 5517,
    _5518 = 5518,
    _5519 = 5519,
    _5520 = 5520,
    _5521 = 5521,
    _5522 = 5522,
    _5523 = 5523,
    _5524 = 5524,
    _5525 = 5525,
    _5526 = 5526,
    _5527 = 5527,
    _5528 = 5528,
    _5529 = 5529,
    _5530 = 5530,
    _5531 = 5531,
    _5532 = 5532,
    _5533 = 5533,
    _5534 = 5534,
    _5535 = 5535,
    _5536 = 5536,
    _5537 = 5537,
    _5538 = 5538,
    _5539 = 5539,
    _5540 = 5540,
    _5541 = 5541,
    _5542 = 5542,
    _5543 = 5543,
    _5544 = 5544,
    _5545 = 5545,
    _5546 = 5546,
    _5547 = 5547,
    _5548 = 5548,
    _5549 = 5549,
    _5550 = 5550,
    _5551 = 5551,
    _5552 = 5552,
    _5553 = 5553,
    _5554 = 5554,
    _5555 = 5555,
    _5556 = 5556,
    _5557 = 5557,
    _5558 = 5558,
    _5559 = 5559,
    _5560 = 5560,
    _5561 = 5561,
    _5562 = 5562,
    _5563 = 5563,
    _5564 = 5564,
    _5565 = 5565,
    _5566 = 5566,
    _5567 = 5567,
    _5568 = 5568,
    _5569 = 5569,
    _5570 = 5570,
    _5571 = 5571,
    _5572 = 5572,
    _5573 = 5573,
    _5574 = 5574,
    _5575 = 5575,
    _5576 = 5576,
    _5577 = 5577,
    _5578 = 5578,
    _5579 = 5579,
    _5580 = 5580,
    _5581 = 5581,
    _5582 = 5582,
    _5583 = 5583,
    _5584 = 5584,
    _5585 = 5585,
    _5586 = 5586,
    _5587 = 5587,
    _5588 = 5588,
    _5589 = 5589,
    _5590 = 5590,
    _5591 = 5591,
    _5592 = 5592,
    _5593 = 5593,
    _5594 = 5594,
    _5595 = 5595,
    _5596 = 5596,
    _5597 = 5597,
    _5598 = 5598,
    _5599 = 5599,
    _5600 = 5600,
    _5601 = 5601,
    _5602 = 5602,
    _5603 = 5603,
    _5604 = 5604,
    _5605 = 5605,
    _5606 = 5606,
    _5607 = 5607,
    _5608 = 5608,
    _5609 = 5609,
    _5610 = 5610,
    _5611 = 5611,
    _5612 = 5612,
    _5613 = 5613,
    _5614 = 5614,
    _5615 = 5615,
    _5616 = 5616,
    _5617 = 5617,
    _5618 = 5618,
    _5619 = 5619,
    _5620 = 5620,
    _5621 = 5621,
    _5622 = 5622,
    _5623 = 5623,
    _5624 = 5624,
    _5625 = 5625,
    _5626 = 5626,
    _5627 = 5627,
    _5628 = 5628,
    _5629 = 5629,
    _5630 = 5630,
    _5631 = 5631,
    _5632 = 5632,
    _5633 = 5633,
    _5634 = 5634,
    _5635 = 5635,
    _5636 = 5636,
    _5637 = 5637,
    _5638 = 5638,
    _5639 = 5639,
    _5640 = 5640,
    _5641 = 5641,
    _5642 = 5642,
    _5643 = 5643,
    _5644 = 5644,
    _5645 = 5645,
    _5646 = 5646,
    _5647 = 5647,
    _5648 = 5648,
    _5649 = 5649,
    _5650 = 5650,
    _5651 = 5651,
    _5652 = 5652,
    _5653 = 5653,
    _5654 = 5654,
    _5655 = 5655,
    _5656 = 5656,
    _5657 = 5657,
    _5658 = 5658,
    _5659 = 5659,
    _5660 = 5660,
    _5661 = 5661,
    _5662 = 5662,
    _5663 = 5663,
    _5664 = 5664,
    _5665 = 5665,
    _5666 = 5666,
    _5667 = 5667,
    _5668 = 5668,
    _5669 = 5669,
    _5670 = 5670,
    _5671 = 5671,
    _5672 = 5672,
    _5673 = 5673,
    _5674 = 5674,
    _5675 = 5675,
    _5676 = 5676,
    _5677 = 5677,
    _5678 = 5678,
    _5679 = 5679,
    _5680 = 5680,
    _5681 = 5681,
    _5682 = 5682,
    _5683 = 5683,
    _5684 = 5684,
    _5685 = 5685,
    _5686 = 5686,
    _5687 = 5687,
    _5688 = 5688,
    _5689 = 5689,
    _5690 = 5690,
    _5691 = 5691,
    _5692 = 5692,
    _5693 = 5693,
    _5694 = 5694,
    _5695 = 5695,
    _5696 = 5696,
    _5697 = 5697,
    _5698 = 5698,
    _5699 = 5699,
    _5700 = 5700,
    _5701 = 5701,
    _5702 = 5702,
    _5703 = 5703,
    _5704 = 5704,
    _5705 = 5705,
    _5706 = 5706,
    _5707 = 5707,
    _5708 = 5708,
    _5709 = 5709,
    _5710 = 5710,
    _5711 = 5711,
    _5712 = 5712,
    _5713 = 5713,
    _5714 = 5714,
    _5715 = 5715,
    _5716 = 5716,
    _5717 = 5717,
    _5718 = 5718,
    _5719 = 5719,
    _5720 = 5720,
    _5721 = 5721,
    _5722 = 5722,
    _5723 = 5723,
    _5724 = 5724,
    _5725 = 5725,
    _5726 = 5726,
    _5727 = 5727,
    _5728 = 5728,
    _5729 = 5729,
    _5730 = 5730,
    _5731 = 5731,
    _5732 = 5732,
    _5733 = 5733,
    _5734 = 5734,
    _5735 = 5735,
    _5736 = 5736,
    _5737 = 5737,
    _5738 = 5738,
    _5739 = 5739,
    _5740 = 5740,
    _5741 = 5741,
    _5742 = 5742,
    _5743 = 5743,
    _5744 = 5744,
    _5745 = 5745,
    _5746 = 5746,
    _5747 = 5747,
    _5748 = 5748,
    _5749 = 5749,
    _5750 = 5750,
    _5751 = 5751,
    _5752 = 5752,
    _5753 = 5753,
    _5754 = 5754,
    _5755 = 5755,
    _5756 = 5756,
    _5757 = 5757,
    _5758 = 5758,
    _5759 = 5759,
    _5760 = 5760,
    _5761 = 5761,
    _5762 = 5762,
    _5763 = 5763,
    _5764 = 5764,
    _5765 = 5765,
    _5766 = 5766,
    _5767 = 5767,
    _5768 = 5768,
    _5769 = 5769,
    _5770 = 5770,
    _5771 = 5771,
    _5772 = 5772,
    _5773 = 5773,
    _5774 = 5774,
    _5775 = 5775,
    _5776 = 5776,
    _5777 = 5777,
    _5778 = 5778,
    _5779 = 5779,
    _5780 = 5780,
    _5781 = 5781,
    _5782 = 5782,
    _5783 = 5783,
    _5784 = 5784,
    _5785 = 5785,
    _5786 = 5786,
    _5787 = 5787,
    _5788 = 5788,
    _5789 = 5789,
    _5790 = 5790,
    _5791 = 5791,
    _5792 = 5792,
    _5793 = 5793,
    _5794 = 5794,
    _5795 = 5795,
    _5796 = 5796,
    _5797 = 5797,
    _5798 = 5798,
    _5799 = 5799,
    _5800 = 5800,
    _5801 = 5801,
    _5802 = 5802,
    _5803 = 5803,
    _5804 = 5804,
    _5805 = 5805,
    _5806 = 5806,
    _5807 = 5807,
    _5808 = 5808,
    _5809 = 5809,
    _5810 = 5810,
    _5811 = 5811,
    _5812 = 5812,
    _5813 = 5813,
    _5814 = 5814,
    _5815 = 5815,
    _5816 = 5816,
    _5817 = 5817,
    _5818 = 5818,
    _5819 = 5819,
    _5820 = 5820,
    _5821 = 5821,
    _5822 = 5822,
    _5823 = 5823,
    _5824 = 5824,
    _5825 = 5825,
    _5826 = 5826,
    _5827 = 5827,
    _5828 = 5828,
    _5829 = 5829,
    _5830 = 5830,
    _5831 = 5831,
    _5832 = 5832,
    _5833 = 5833,
    _5834 = 5834,
    _5835 = 5835,
    _5836 = 5836,
    _5837 = 5837,
    _5838 = 5838,
    _5839 = 5839,
    _5840 = 5840,
    _5841 = 5841,
    _5842 = 5842,
    _5843 = 5843,
    _5844 = 5844,
    _5845 = 5845,
    _5846 = 5846,
    _5847 = 5847,
    _5848 = 5848,
    _5849 = 5849,
    _5850 = 5850,
    _5851 = 5851,
    _5852 = 5852,
    _5853 = 5853,
    _5854 = 5854,
    _5855 = 5855,
    _5856 = 5856,
    _5857 = 5857,
    _5858 = 5858,
    _5859 = 5859,
    _5860 = 5860,
    _5861 = 5861,
    _5862 = 5862,
    _5863 = 5863,
    _5864 = 5864,
    _5865 = 5865,
    _5866 = 5866,
    _5867 = 5867,
    _5868 = 5868,
    _5869 = 5869,
    _5870 = 5870,
    _5871 = 5871,
    _5872 = 5872,
    _5873 = 5873,
    _5874 = 5874,
    _5875 = 5875,
    _5876 = 5876,
    _5877 = 5877,
    _5878 = 5878,
    _5879 = 5879,
    _5880 = 5880,
    _5881 = 5881,
    _5882 = 5882,
    _5883 = 5883,
    _5884 = 5884,
    _5885 = 5885,
    _5886 = 5886,
    _5887 = 5887,
    _5888 = 5888,
    _5889 = 5889,
    _5890 = 5890,
    _5891 = 5891,
    _5892 = 5892,
    _5893 = 5893,
    _5894 = 5894,
    _5895 = 5895,
    _5896 = 5896,
    _5897 = 5897,
    _5898 = 5898,
    _5899 = 5899,
    _5900 = 5900,
    _5901 = 5901,
    _5902 = 5902,
    _5903 = 5903,
    _5904 = 5904,
    _5905 = 5905,
    _5906 = 5906,
    _5907 = 5907,
    _5908 = 5908,
    _5909 = 5909,
    _5910 = 5910,
    _5911 = 5911,
    _5912 = 5912,
    _5913 = 5913,
    _5914 = 5914,
    _5915 = 5915,
    _5916 = 5916,
    _5917 = 5917,
    _5918 = 5918,
    _5919 = 5919,
    _5920 = 5920,
    _5921 = 5921,
    _5922 = 5922,
    _5923 = 5923,
    _5924 = 5924,
    _5925 = 5925,
    _5926 = 5926,
    _5927 = 5927,
    _5928 = 5928,
    _5929 = 5929,
    _5930 = 5930,
    _5931 = 5931,
    _5932 = 5932,
    _5933 = 5933,
    _5934 = 5934,
    _5935 = 5935,
    _5936 = 5936,
    _5937 = 5937,
    _5938 = 5938,
    _5939 = 5939,
    _5940 = 5940,
    _5941 = 5941,
    _5942 = 5942,
    _5943 = 5943,
    _5944 = 5944,
    _5945 = 5945,
    _5946 = 5946,
    _5947 = 5947,
    _5948 = 5948,
    _5949 = 5949,
    _5950 = 5950,
    _5951 = 5951,
    _5952 = 5952,
    _5953 = 5953,
    _5954 = 5954,
    _5955 = 5955,
    _5956 = 5956,
    _5957 = 5957,
    _5958 = 5958,
    _5959 = 5959,
    _5960 = 5960,
    _5961 = 5961,
    _5962 = 5962,
    _5963 = 5963,
    _5964 = 5964,
    _5965 = 5965,
    _5966 = 5966,
    _5967 = 5967,
    _5968 = 5968,
    _5969 = 5969,
    _5970 = 5970,
    _5971 = 5971,
    _5972 = 5972,
    _5973 = 5973,
    _5974 = 5974,
    _5975 = 5975,
    _5976 = 5976,
    _5977 = 5977,
    _5978 = 5978,
    _5979 = 5979,
    _5980 = 5980,
    _5981 = 5981,
    _5982 = 5982,
    _5983 = 5983,
    _5984 = 5984,
    _5985 = 5985,
    _5986 = 5986,
    _5987 = 5987,
    _5988 = 5988,
    _5989 = 5989,
    _5990 = 5990,
    _5991 = 5991,
    _5992 = 5992,
    _5993 = 5993,
    _5994 = 5994,
    _5995 = 5995,
    _5996 = 5996,
    _5997 = 5997,
    _5998 = 5998,
    _5999 = 5999,
    _6000 = 6000,
    _6001 = 6001,
    _6002 = 6002,
    _6003 = 6003,
    _6004 = 6004,
    _6005 = 6005,
    _6006 = 6006,
    _6007 = 6007,
    _6008 = 6008,
    _6009 = 6009,
    _6010 = 6010,
    _6011 = 6011,
    _6012 = 6012,
    _6013 = 6013,
    _6014 = 6014,
    _6015 = 6015,
    _6016 = 6016,
    _6017 = 6017,
    _6018 = 6018,
    _6019 = 6019,
    _6020 = 6020,
    _6021 = 6021,
    _6022 = 6022,
    _6023 = 6023,
    _6024 = 6024,
    _6025 = 6025,
    _6026 = 6026,
    _6027 = 6027,
    _6028 = 6028,
    _6029 = 6029,
    _6030 = 6030,
    _6031 = 6031,
    _6032 = 6032,
    _6033 = 6033,
    _6034 = 6034,
    _6035 = 6035,
    _6036 = 6036,
    _6037 = 6037,
    _6038 = 6038,
    _6039 = 6039,
    _6040 = 6040,
    _6041 = 6041,
    _6042 = 6042,
    _6043 = 6043,
    _6044 = 6044,
    _6045 = 6045,
    _6046 = 6046,
    _6047 = 6047,
    _6048 = 6048,
    _6049 = 6049,
    _6050 = 6050,
    _6051 = 6051,
    _6052 = 6052,
    _6053 = 6053,
    _6054 = 6054,
    _6055 = 6055,
    _6056 = 6056,
    _6057 = 6057,
    _6058 = 6058,
    _6059 = 6059,
    _6060 = 6060,
    _6061 = 6061,
    _6062 = 6062,
    _6063 = 6063,
    _6064 = 6064,
    _6065 = 6065,
    _6066 = 6066,
    _6067 = 6067,
    _6068 = 6068,
    _6069 = 6069,
    _6070 = 6070,
    _6071 = 6071,
    _6072 = 6072,
    _6073 = 6073,
    _6074 = 6074,
    _6075 = 6075,
    _6076 = 6076,
    _6077 = 6077,
    _6078 = 6078,
    _6079 = 6079,
    _6080 = 6080,
    _6081 = 6081,
    _6082 = 6082,
    _6083 = 6083,
    _6084 = 6084,
    _6085 = 6085,
    _6086 = 6086,
    _6087 = 6087,
    _6088 = 6088,
    _6089 = 6089,
    _6090 = 6090,
    _6091 = 6091,
    _6092 = 6092,
    _6093 = 6093,
    _6094 = 6094,
    _6095 = 6095,
    _6096 = 6096,
    _6097 = 6097,
    _6098 = 6098,
    _6099 = 6099,
    _6100 = 6100,
    _6101 = 6101,
    _6102 = 6102,
    _6103 = 6103,
    _6104 = 6104,
    _6105 = 6105,
    _6106 = 6106,
    _6107 = 6107,
    _6108 = 6108,
    _6109 = 6109,
    _6110 = 6110,
    _6111 = 6111,
    _6112 = 6112,
    _6113 = 6113,
    _6114 = 6114,
    _6115 = 6115,
    _6116 = 6116,
    _6117 = 6117,
    _6118 = 6118,
    _6119 = 6119,
    _6120 = 6120,
    _6121 = 6121,
    _6122 = 6122,
    _6123 = 6123,
    _6124 = 6124,
    _6125 = 6125,
    _6126 = 6126,
    _6127 = 6127,
    _6128 = 6128,
    _6129 = 6129,
    _6130 = 6130,
    _6131 = 6131,
    _6132 = 6132,
    _6133 = 6133,
    _6134 = 6134,
    _6135 = 6135,
    _6136 = 6136,
    _6137 = 6137,
    _6138 = 6138,
    _6139 = 6139,
    _6140 = 6140,
    _6141 = 6141,
    _6142 = 6142,
    _6143 = 6143,
    _6144 = 6144,
    _6145 = 6145,
    _6146 = 6146,
    _6147 = 6147,
    _6148 = 6148,
    _6149 = 6149,
    _6150 = 6150,
    _6151 = 6151,
    _6152 = 6152,
    _6153 = 6153,
    _6154 = 6154,
    _6155 = 6155,
    _6156 = 6156,
    _6157 = 6157,
    _6158 = 6158,
    _6159 = 6159,
    _6160 = 6160,
    _6161 = 6161,
    _6162 = 6162,
    _6163 = 6163,
    _6164 = 6164,
    _6165 = 6165,
    _6166 = 6166,
    _6167 = 6167,
    _6168 = 6168,
    _6169 = 6169,
    _6170 = 6170,
    _6171 = 6171,
    _6172 = 6172,
    _6173 = 6173,
    _6174 = 6174,
    _6175 = 6175,
    _6176 = 6176,
    _6177 = 6177,
    _6178 = 6178,
    _6179 = 6179,
    _6180 = 6180,
    _6181 = 6181,
    _6182 = 6182,
    _6183 = 6183,
    _6184 = 6184,
    _6185 = 6185,
    _6186 = 6186,
    _6187 = 6187,
    _6188 = 6188,
    _6189 = 6189,
    _6190 = 6190,
    _6191 = 6191,
    _6192 = 6192,
    _6193 = 6193,
    _6194 = 6194,
    _6195 = 6195,
    _6196 = 6196,
    _6197 = 6197,
    _6198 = 6198,
    _6199 = 6199,
    _6200 = 6200,
    _6201 = 6201,
    _6202 = 6202,
    _6203 = 6203,
    _6204 = 6204,
    _6205 = 6205,
    _6206 = 6206,
    _6207 = 6207,
    _6208 = 6208,
    _6209 = 6209,
    _6210 = 6210,
    _6211 = 6211,
    _6212 = 6212,
    _6213 = 6213,
    _6214 = 6214,
    _6215 = 6215,
    _6216 = 6216,
    _6217 = 6217,
    _6218 = 6218,
    _6219 = 6219,
    _6220 = 6220,
    _6221 = 6221,
    _6222 = 6222,
    _6223 = 6223,
    _6224 = 6224,
    _6225 = 6225,
    _6226 = 6226,
    _6227 = 6227,
    _6228 = 6228,
    _6229 = 6229,
    _6230 = 6230,
    _6231 = 6231,
    _6232 = 6232,
    _6233 = 6233,
    _6234 = 6234,
    _6235 = 6235,
    _6236 = 6236,
    _6237 = 6237,
    _6238 = 6238,
    _6239 = 6239,
    _6240 = 6240,
    _6241 = 6241,
    _6242 = 6242,
    _6243 = 6243,
    _6244 = 6244,
    _6245 = 6245,
    _6246 = 6246,
    _6247 = 6247,
    _6248 = 6248,
    _6249 = 6249,
    _6250 = 6250,
    _6251 = 6251,
    _6252 = 6252,
    _6253 = 6253,
    _6254 = 6254,
    _6255 = 6255,
    _6256 = 6256,
    _6257 = 6257,
    _6258 = 6258,
    _6259 = 6259,
    _6260 = 6260,
    _6261 = 6261,
    _6262 = 6262,
    _6263 = 6263,
    _6264 = 6264,
    _6265 = 6265,
    _6266 = 6266,
    _6267 = 6267,
    _6268 = 6268,
    _6269 = 6269,
    _6270 = 6270,
    _6271 = 6271,
    _6272 = 6272,
    _6273 = 6273,
    _6274 = 6274,
    _6275 = 6275,
    _6276 = 6276,
    _6277 = 6277,
    _6278 = 6278,
    _6279 = 6279,
    _6280 = 6280,
    _6281 = 6281,
    _6282 = 6282,
    _6283 = 6283,
    _6284 = 6284,
    _6285 = 6285,
    _6286 = 6286,
    _6287 = 6287,
    _6288 = 6288,
    _6289 = 6289,
    _6290 = 6290,
    _6291 = 6291,
    _6292 = 6292,
    _6293 = 6293,
    _6294 = 6294,
    _6295 = 6295,
    _6296 = 6296,
    _6297 = 6297,
    _6298 = 6298,
    _6299 = 6299,
    _6300 = 6300,
    _6301 = 6301,
    _6302 = 6302,
    _6303 = 6303,
    _6304 = 6304,
    _6305 = 6305,
    _6306 = 6306,
    _6307 = 6307,
    _6308 = 6308,
    _6309 = 6309,
    _6310 = 6310,
    _6311 = 6311,
    _6312 = 6312,
    _6313 = 6313,
    _6314 = 6314,
    _6315 = 6315,
    _6316 = 6316,
    _6317 = 6317,
    _6318 = 6318,
    _6319 = 6319,
    _6320 = 6320,
    _6321 = 6321,
    _6322 = 6322,
    _6323 = 6323,
    _6324 = 6324,
    _6325 = 6325,
    _6326 = 6326,
    _6327 = 6327,
    _6328 = 6328,
    _6329 = 6329,
    _6330 = 6330,
    _6331 = 6331,
    _6332 = 6332,
    _6333 = 6333,
    _6334 = 6334,
    _6335 = 6335,
    _6336 = 6336,
    _6337 = 6337,
    _6338 = 6338,
    _6339 = 6339,
    _6340 = 6340,
    _6341 = 6341,
    _6342 = 6342,
    _6343 = 6343,
    _6344 = 6344,
    _6345 = 6345,
    _6346 = 6346,
    _6347 = 6347,
    _6348 = 6348,
    _6349 = 6349,
    _6350 = 6350,
    _6351 = 6351,
    _6352 = 6352,
    _6353 = 6353,
    _6354 = 6354,
    _6355 = 6355,
    _6356 = 6356,
    _6357 = 6357,
    _6358 = 6358,
    _6359 = 6359,
    _6360 = 6360,
    _6361 = 6361,
    _6362 = 6362,
    _6363 = 6363,
    _6364 = 6364,
    _6365 = 6365,
    _6366 = 6366,
    _6367 = 6367,
    _6368 = 6368,
    _6369 = 6369,
    _6370 = 6370,
    _6371 = 6371,
    _6372 = 6372,
    _6373 = 6373,
    _6374 = 6374,
    _6375 = 6375,
    _6376 = 6376,
    _6377 = 6377,
    _6378 = 6378,
    _6379 = 6379,
    _6380 = 6380,
    _6381 = 6381,
    _6382 = 6382,
    _6383 = 6383,
    _6384 = 6384,
    _6385 = 6385,
    _6386 = 6386,
    _6387 = 6387,
    _6388 = 6388,
    _6389 = 6389,
    _6390 = 6390,
    _6391 = 6391,
    _6392 = 6392,
    _6393 = 6393,
    _6394 = 6394,
    _6395 = 6395,
    _6396 = 6396,
    _6397 = 6397,
    _6398 = 6398,
    _6399 = 6399,
    _6400 = 6400,
    _6401 = 6401,
    _6402 = 6402,
    _6403 = 6403,
    _6404 = 6404,
    _6405 = 6405,
    _6406 = 6406,
    _6407 = 6407,
    _6408 = 6408,
    _6409 = 6409,
    _6410 = 6410,
    _6411 = 6411,
    _6412 = 6412,
    _6413 = 6413,
    _6414 = 6414,
    _6415 = 6415,
    _6416 = 6416,
    _6417 = 6417,
    _6418 = 6418,
    _6419 = 6419,
    _6420 = 6420,
    _6421 = 6421,
    _6422 = 6422,
    _6423 = 6423,
    _6424 = 6424,
    _6425 = 6425,
    _6426 = 6426,
    _6427 = 6427,
    _6428 = 6428,
    _6429 = 6429,
    _6430 = 6430,
    _6431 = 6431,
    _6432 = 6432,
    _6433 = 6433,
    _6434 = 6434,
    _6435 = 6435,
    _6436 = 6436,
    _6437 = 6437,
    _6438 = 6438,
    _6439 = 6439,
    _6440 = 6440,
    _6441 = 6441,
    _6442 = 6442,
    _6443 = 6443,
    _6444 = 6444,
    _6445 = 6445,
    _6446 = 6446,
    _6447 = 6447,
    _6448 = 6448,
    _6449 = 6449,
    _6450 = 6450,
    _6451 = 6451,
    _6452 = 6452,
    _6453 = 6453,
    _6454 = 6454,
    _6455 = 6455,
    _6456 = 6456,
    _6457 = 6457,
    _6458 = 6458,
    _6459 = 6459,
    _6460 = 6460,
    _6461 = 6461,
    _6462 = 6462,
    _6463 = 6463,
    _6464 = 6464,
    _6465 = 6465,
    _6466 = 6466,
    _6467 = 6467,
    _6468 = 6468,
    _6469 = 6469,
    _6470 = 6470,
    _6471 = 6471,
    _6472 = 6472,
    _6473 = 6473,
    _6474 = 6474,
    _6475 = 6475,
    _6476 = 6476,
    _6477 = 6477,
    _6478 = 6478,
    _6479 = 6479,
    _6480 = 6480,
    _6481 = 6481,
    _6482 = 6482,
    _6483 = 6483,
    _6484 = 6484,
    _6485 = 6485,
    _6486 = 6486,
    _6487 = 6487,
    _6488 = 6488,
    _6489 = 6489,
    _6490 = 6490,
    _6491 = 6491,
    _6492 = 6492,
    _6493 = 6493,
    _6494 = 6494,
    _6495 = 6495,
    _6496 = 6496,
    _6497 = 6497,
    _6498 = 6498,
    _6499 = 6499,
    _6500 = 6500,
    _6501 = 6501,
    _6502 = 6502,
    _6503 = 6503,
    _6504 = 6504,
    _6505 = 6505,
    _6506 = 6506,
    _6507 = 6507,
    _6508 = 6508,
    _6509 = 6509,
    _6510 = 6510,
    _6511 = 6511,
    _6512 = 6512,
    _6513 = 6513,
    _6514 = 6514,
    _6515 = 6515,
    _6516 = 6516,
    _6517 = 6517,
    _6518 = 6518,
    _6519 = 6519,
    _6520 = 6520,
    _6521 = 6521,
    _6522 = 6522,
    _6523 = 6523,
    _6524 = 6524,
    _6525 = 6525,
    _6526 = 6526,
    _6527 = 6527,
    _6528 = 6528,
    _6529 = 6529,
    _6530 = 6530,
    _6531 = 6531,
    _6532 = 6532,
    _6533 = 6533,
    _6534 = 6534,
    _6535 = 6535,
    _6536 = 6536,
    _6537 = 6537,
    _6538 = 6538,
    _6539 = 6539,
    _6540 = 6540,
    _6541 = 6541,
    _6542 = 6542,
    _6543 = 6543,
    _6544 = 6544,
    _6545 = 6545,
    _6546 = 6546,
    _6547 = 6547,
    _6548 = 6548,
    _6549 = 6549,
    _6550 = 6550,
    _6551 = 6551,
    _6552 = 6552,
    _6553 = 6553,
    _6554 = 6554,
    _6555 = 6555,
    _6556 = 6556,
    _6557 = 6557,
    _6558 = 6558,
    _6559 = 6559,
    _6560 = 6560,
    _6561 = 6561,
    _6562 = 6562,
    _6563 = 6563,
    _6564 = 6564,
    _6565 = 6565,
    _6566 = 6566,
    _6567 = 6567,
    _6568 = 6568,
    _6569 = 6569,
    _6570 = 6570,
    _6571 = 6571,
    _6572 = 6572,
    _6573 = 6573,
    _6574 = 6574,
    _6575 = 6575,
    _6576 = 6576,
    _6577 = 6577,
    _6578 = 6578,
    _6579 = 6579,
    _6580 = 6580,
    _6581 = 6581,
    _6582 = 6582,
    _6583 = 6583,
    _6584 = 6584,
    _6585 = 6585,
    _6586 = 6586,
    _6587 = 6587,
    _6588 = 6588,
    _6589 = 6589,
    _6590 = 6590,
    _6591 = 6591,
    _6592 = 6592,
    _6593 = 6593,
    _6594 = 6594,
    _6595 = 6595,
    _6596 = 6596,
    _6597 = 6597,
    _6598 = 6598,
    _6599 = 6599,
    _6600 = 6600,
    _6601 = 6601,
    _6602 = 6602,
    _6603 = 6603,
    _6604 = 6604,
    _6605 = 6605,
    _6606 = 6606,
    _6607 = 6607,
    _6608 = 6608,
    _6609 = 6609,
    _6610 = 6610,
    _6611 = 6611,
    _6612 = 6612,
    _6613 = 6613,
    _6614 = 6614,
    _6615 = 6615,
    _6616 = 6616,
    _6617 = 6617,
    _6618 = 6618,
    _6619 = 6619,
    _6620 = 6620,
    _6621 = 6621,
    _6622 = 6622,
    _6623 = 6623,
    _6624 = 6624,
    _6625 = 6625,
    _6626 = 6626,
    _6627 = 6627,
    _6628 = 6628,
    _6629 = 6629,
    _6630 = 6630,
    _6631 = 6631,
    _6632 = 6632,
    _6633 = 6633,
    _6634 = 6634,
    _6635 = 6635,
    _6636 = 6636,
    _6637 = 6637,
    _6638 = 6638,
    _6639 = 6639,
    _6640 = 6640,
    _6641 = 6641,
    _6642 = 6642,
    _6643 = 6643,
    _6644 = 6644,
    _6645 = 6645,
    _6646 = 6646,
    _6647 = 6647,
    _6648 = 6648,
    _6649 = 6649,
    _6650 = 6650,
    _6651 = 6651,
    _6652 = 6652,
    _6653 = 6653,
    _6654 = 6654,
    _6655 = 6655,
    _6656 = 6656,
    _6657 = 6657,
    _6658 = 6658,
    _6659 = 6659,
    _6660 = 6660,
    _6661 = 6661,
    _6662 = 6662,
    _6663 = 6663,
    _6664 = 6664,
    _6665 = 6665,
    _6666 = 6666,
    _6667 = 6667,
    _6668 = 6668,
    _6669 = 6669,
    _6670 = 6670,
    _6671 = 6671,
    _6672 = 6672,
    _6673 = 6673,
    _6674 = 6674,
    _6675 = 6675,
    _6676 = 6676,
    _6677 = 6677,
    _6678 = 6678,
    _6679 = 6679,
    _6680 = 6680,
    _6681 = 6681,
    _6682 = 6682,
    _6683 = 6683,
    _6684 = 6684,
    _6685 = 6685,
    _6686 = 6686,
    _6687 = 6687,
    _6688 = 6688,
    _6689 = 6689,
    _6690 = 6690,
    _6691 = 6691,
    _6692 = 6692,
    _6693 = 6693,
    _6694 = 6694,
    _6695 = 6695,
    _6696 = 6696,
    _6697 = 6697,
    _6698 = 6698,
    _6699 = 6699,
    _6700 = 6700,
    _6701 = 6701,
    _6702 = 6702,
    _6703 = 6703,
    _6704 = 6704,
    _6705 = 6705,
    _6706 = 6706,
    _6707 = 6707,
    _6708 = 6708,
    _6709 = 6709,
    _6710 = 6710,
    _6711 = 6711,
    _6712 = 6712,
    _6713 = 6713,
    _6714 = 6714,
    _6715 = 6715,
    _6716 = 6716,
    _6717 = 6717,
    _6718 = 6718,
    _6719 = 6719,
    _6720 = 6720,
    _6721 = 6721,
    _6722 = 6722,
    _6723 = 6723,
    _6724 = 6724,
    _6725 = 6725,
    _6726 = 6726,
    _6727 = 6727,
    _6728 = 6728,
    _6729 = 6729,
    _6730 = 6730,
    _6731 = 6731,
    _6732 = 6732,
    _6733 = 6733,
    _6734 = 6734,
    _6735 = 6735,
    _6736 = 6736,
    _6737 = 6737,
    _6738 = 6738,
    _6739 = 6739,
    _6740 = 6740,
    _6741 = 6741,
    _6742 = 6742,
    _6743 = 6743,
    _6744 = 6744,
    _6745 = 6745,
    _6746 = 6746,
    _6747 = 6747,
    _6748 = 6748,
    _6749 = 6749,
    _6750 = 6750,
    _6751 = 6751,
    _6752 = 6752,
    _6753 = 6753,
    _6754 = 6754,
    _6755 = 6755,
    _6756 = 6756,
    _6757 = 6757,
    _6758 = 6758,
    _6759 = 6759,
    _6760 = 6760,
    _6761 = 6761,
    _6762 = 6762,
    _6763 = 6763,
    _6764 = 6764,
    _6765 = 6765,
    _6766 = 6766,
    _6767 = 6767,
    _6768 = 6768,
    _6769 = 6769,
    _6770 = 6770,
    _6771 = 6771,
    _6772 = 6772,
    _6773 = 6773,
    _6774 = 6774,
    _6775 = 6775,
    _6776 = 6776,
    _6777 = 6777,
    _6778 = 6778,
    _6779 = 6779,
    _6780 = 6780,
    _6781 = 6781,
    _6782 = 6782,
    _6783 = 6783,
    _6784 = 6784,
    _6785 = 6785,
    _6786 = 6786,
    _6787 = 6787,
    _6788 = 6788,
    _6789 = 6789,
    _6790 = 6790,
    _6791 = 6791,
    _6792 = 6792,
    _6793 = 6793,
    _6794 = 6794,
    _6795 = 6795,
    _6796 = 6796,
    _6797 = 6797,
    _6798 = 6798,
    _6799 = 6799,
    _6800 = 6800,
    _6801 = 6801,
    _6802 = 6802,
    _6803 = 6803,
    _6804 = 6804,
    _6805 = 6805,
    _6806 = 6806,
    _6807 = 6807,
    _6808 = 6808,
    _6809 = 6809,
    _6810 = 6810,
    _6811 = 6811,
    _6812 = 6812,
    _6813 = 6813,
    _6814 = 6814,
    _6815 = 6815,
    _6816 = 6816,
    _6817 = 6817,
    _6818 = 6818,
    _6819 = 6819,
    _6820 = 6820,
    _6821 = 6821,
    _6822 = 6822,
    _6823 = 6823,
    _6824 = 6824,
    _6825 = 6825,
    _6826 = 6826,
    _6827 = 6827,
    _6828 = 6828,
    _6829 = 6829,
    _6830 = 6830,
    _6831 = 6831,
    _6832 = 6832,
    _6833 = 6833,
    _6834 = 6834,
    _6835 = 6835,
    _6836 = 6836,
    _6837 = 6837,
    _6838 = 6838,
    _6839 = 6839,
    _6840 = 6840,
    _6841 = 6841,
    _6842 = 6842,
    _6843 = 6843,
    _6844 = 6844,
    _6845 = 6845,
    _6846 = 6846,
    _6847 = 6847,
    _6848 = 6848,
    _6849 = 6849,
    _6850 = 6850,
    _6851 = 6851,
    _6852 = 6852,
    _6853 = 6853,
    _6854 = 6854,
    _6855 = 6855,
    _6856 = 6856,
    _6857 = 6857,
    _6858 = 6858,
    _6859 = 6859,
    _6860 = 6860,
    _6861 = 6861,
    _6862 = 6862,
    _6863 = 6863,
    _6864 = 6864,
    _6865 = 6865,
    _6866 = 6866,
    _6867 = 6867,
    _6868 = 6868,
    _6869 = 6869,
    _6870 = 6870,
    _6871 = 6871,
    _6872 = 6872,
    _6873 = 6873,
    _6874 = 6874,
    _6875 = 6875,
    _6876 = 6876,
    _6877 = 6877,
    _6878 = 6878,
    _6879 = 6879,
    _6880 = 6880,
    _6881 = 6881,
    _6882 = 6882,
    _6883 = 6883,
    _6884 = 6884,
    _6885 = 6885,
    _6886 = 6886,
    _6887 = 6887,
    _6888 = 6888,
    _6889 = 6889,
    _6890 = 6890,
    _6891 = 6891,
    _6892 = 6892,
    _6893 = 6893,
    _6894 = 6894,
    _6895 = 6895,
    _6896 = 6896,
    _6897 = 6897,
    _6898 = 6898,
    _6899 = 6899,
    _6900 = 6900,
    _6901 = 6901,
    _6902 = 6902,
    _6903 = 6903,
    _6904 = 6904,
    _6905 = 6905,
    _6906 = 6906,
    _6907 = 6907,
    _6908 = 6908,
    _6909 = 6909,
    _6910 = 6910,
    _6911 = 6911,
    _6912 = 6912,
    _6913 = 6913,
    _6914 = 6914,
    _6915 = 6915,
    _6916 = 6916,
    _6917 = 6917,
    _6918 = 6918,
    _6919 = 6919,
    _6920 = 6920,
    _6921 = 6921,
    _6922 = 6922,
    _6923 = 6923,
    _6924 = 6924,
    _6925 = 6925,
    _6926 = 6926,
    _6927 = 6927,
    _6928 = 6928,
    _6929 = 6929,
    _6930 = 6930,
    _6931 = 6931,
    _6932 = 6932,
    _6933 = 6933,
    _6934 = 6934,
    _6935 = 6935,
    _6936 = 6936,
    _6937 = 6937,
    _6938 = 6938,
    _6939 = 6939,
    _6940 = 6940,
    _6941 = 6941,
    _6942 = 6942,
    _6943 = 6943,
    _6944 = 6944,
    _6945 = 6945,
    _6946 = 6946,
    _6947 = 6947,
    _6948 = 6948,
    _6949 = 6949,
    _6950 = 6950,
    _6951 = 6951,
    _6952 = 6952,
    _6953 = 6953,
    _6954 = 6954,
    _6955 = 6955,
    _6956 = 6956,
    _6957 = 6957,
    _6958 = 6958,
    _6959 = 6959,
    _6960 = 6960,
    _6961 = 6961,
    _6962 = 6962,
    _6963 = 6963,
    _6964 = 6964,
    _6965 = 6965,
    _6966 = 6966,
    _6967 = 6967,
    _6968 = 6968,
    _6969 = 6969,
    _6970 = 6970,
    _6971 = 6971,
    _6972 = 6972,
    _6973 = 6973,
    _6974 = 6974,
    _6975 = 6975,
    _6976 = 6976,
    _6977 = 6977,
    _6978 = 6978,
    _6979 = 6979,
    _6980 = 6980,
    _6981 = 6981,
    _6982 = 6982,
    _6983 = 6983,
    _6984 = 6984,
    _6985 = 6985,
    _6986 = 6986,
    _6987 = 6987,
    _6988 = 6988,
    _6989 = 6989,
    _6990 = 6990,
    _6991 = 6991,
    _6992 = 6992,
    _6993 = 6993,
    _6994 = 6994,
    _6995 = 6995,
    _6996 = 6996,
    _6997 = 6997,
    _6998 = 6998,
    _6999 = 6999,
    _7000 = 7000,
    _7001 = 7001,
    _7002 = 7002,
    _7003 = 7003,
    _7004 = 7004,
    _7005 = 7005,
    _7006 = 7006,
    _7007 = 7007,
    _7008 = 7008,
    _7009 = 7009,
    _7010 = 7010,
    _7011 = 7011,
    _7012 = 7012,
    _7013 = 7013,
    _7014 = 7014,
    _7015 = 7015,
    _7016 = 7016,
    _7017 = 7017,
    _7018 = 7018,
    _7019 = 7019,
    _7020 = 7020,
    _7021 = 7021,
    _7022 = 7022,
    _7023 = 7023,
    _7024 = 7024,
    _7025 = 7025,
    _7026 = 7026,
    _7027 = 7027,
    _7028 = 7028,
    _7029 = 7029,
    _7030 = 7030,
    _7031 = 7031,
    _7032 = 7032,
    _7033 = 7033,
    _7034 = 7034,
    _7035 = 7035,
    _7036 = 7036,
    _7037 = 7037,
    _7038 = 7038,
    _7039 = 7039,
    _7040 = 7040,
    _7041 = 7041,
    _7042 = 7042,
    _7043 = 7043,
    _7044 = 7044,
    _7045 = 7045,
    _7046 = 7046,
    _7047 = 7047,
    _7048 = 7048,
    _7049 = 7049,
    _7050 = 7050,
    _7051 = 7051,
    _7052 = 7052,
    _7053 = 7053,
    _7054 = 7054,
    _7055 = 7055,
    _7056 = 7056,
    _7057 = 7057,
    _7058 = 7058,
    _7059 = 7059,
    _7060 = 7060,
    _7061 = 7061,
    _7062 = 7062,
    _7063 = 7063,
    _7064 = 7064,
    _7065 = 7065,
    _7066 = 7066,
    _7067 = 7067,
    _7068 = 7068,
    _7069 = 7069,
    _7070 = 7070,
    _7071 = 7071,
    _7072 = 7072,
    _7073 = 7073,
    _7074 = 7074,
    _7075 = 7075,
    _7076 = 7076,
    _7077 = 7077,
    _7078 = 7078,
    _7079 = 7079,
    _7080 = 7080,
    _7081 = 7081,
    _7082 = 7082,
    _7083 = 7083,
    _7084 = 7084,
    _7085 = 7085,
    _7086 = 7086,
    _7087 = 7087,
    _7088 = 7088,
    _7089 = 7089,
    _7090 = 7090,
    _7091 = 7091,
    _7092 = 7092,
    _7093 = 7093,
    _7094 = 7094,
    _7095 = 7095,
    _7096 = 7096,
    _7097 = 7097,
    _7098 = 7098,
    _7099 = 7099,
    _7100 = 7100,
    _7101 = 7101,
    _7102 = 7102,
    _7103 = 7103,
    _7104 = 7104,
    _7105 = 7105,
    _7106 = 7106,
    _7107 = 7107,
    _7108 = 7108,
    _7109 = 7109,
    _7110 = 7110,
    _7111 = 7111,
    _7112 = 7112,
    _7113 = 7113,
    _7114 = 7114,
    _7115 = 7115,
    _7116 = 7116,
    _7117 = 7117,
    _7118 = 7118,
    _7119 = 7119,
    _7120 = 7120,
    _7121 = 7121,
    _7122 = 7122,
    _7123 = 7123,
    _7124 = 7124,
    _7125 = 7125,
    _7126 = 7126,
    _7127 = 7127,
    _7128 = 7128,
    _7129 = 7129,
    _7130 = 7130,
    _7131 = 7131,
    _7132 = 7132,
    _7133 = 7133,
    _7134 = 7134,
    _7135 = 7135,
    _7136 = 7136,
    _7137 = 7137,
    _7138 = 7138,
    _7139 = 7139,
    _7140 = 7140,
    _7141 = 7141,
    _7142 = 7142,
    _7143 = 7143,
    _7144 = 7144,
    _7145 = 7145,
    _7146 = 7146,
    _7147 = 7147,
    _7148 = 7148,
    _7149 = 7149,
    _7150 = 7150,
    _7151 = 7151,
    _7152 = 7152,
    _7153 = 7153,
    _7154 = 7154,
    _7155 = 7155,
    _7156 = 7156,
    _7157 = 7157,
    _7158 = 7158,
    _7159 = 7159,
    _7160 = 7160,
    _7161 = 7161,
    _7162 = 7162,
    _7163 = 7163,
    _7164 = 7164,
    _7165 = 7165,
    _7166 = 7166,
    _7167 = 7167,
    _7168 = 7168,
    _7169 = 7169,
    _7170 = 7170,
    _7171 = 7171,
    _7172 = 7172,
    _7173 = 7173,
    _7174 = 7174,
    _7175 = 7175,
    _7176 = 7176,
    _7177 = 7177,
    _7178 = 7178,
    _7179 = 7179,
    _7180 = 7180,
    _7181 = 7181,
    _7182 = 7182,
    _7183 = 7183,
    _7184 = 7184,
    _7185 = 7185,
    _7186 = 7186,
    _7187 = 7187,
    _7188 = 7188,
    _7189 = 7189,
    _7190 = 7190,
    _7191 = 7191,
    _7192 = 7192,
    _7193 = 7193,
    _7194 = 7194,
    _7195 = 7195,
    _7196 = 7196,
    _7197 = 7197,
    _7198 = 7198,
    _7199 = 7199,
    _7200 = 7200,
    _7201 = 7201,
    _7202 = 7202,
    _7203 = 7203,
    _7204 = 7204,
    _7205 = 7205,
    _7206 = 7206,
    _7207 = 7207,
    _7208 = 7208,
    _7209 = 7209,
    _7210 = 7210,
    _7211 = 7211,
    _7212 = 7212,
    _7213 = 7213,
    _7214 = 7214,
    _7215 = 7215,
    _7216 = 7216,
    _7217 = 7217,
    _7218 = 7218,
    _7219 = 7219,
    _7220 = 7220,
    _7221 = 7221,
    _7222 = 7222,
    _7223 = 7223,
    _7224 = 7224,
    _7225 = 7225,
    _7226 = 7226,
    _7227 = 7227,
    _7228 = 7228,
    _7229 = 7229,
    _7230 = 7230,
    _7231 = 7231,
    _7232 = 7232,
    _7233 = 7233,
    _7234 = 7234,
    _7235 = 7235,
    _7236 = 7236,
    _7237 = 7237,
    _7238 = 7238,
    _7239 = 7239,
    _7240 = 7240,
    _7241 = 7241,
    _7242 = 7242,
    _7243 = 7243,
    _7244 = 7244,
    _7245 = 7245,
    _7246 = 7246,
    _7247 = 7247,
    _7248 = 7248,
    _7249 = 7249,
    _7250 = 7250,
    _7251 = 7251,
    _7252 = 7252,
    _7253 = 7253,
    _7254 = 7254,
    _7255 = 7255,
    _7256 = 7256,
    _7257 = 7257,
    _7258 = 7258,
    _7259 = 7259,
    _7260 = 7260,
    _7261 = 7261,
    _7262 = 7262,
    _7263 = 7263,
    _7264 = 7264,
    _7265 = 7265,
    _7266 = 7266,
    _7267 = 7267,
    _7268 = 7268,
    _7269 = 7269,
    _7270 = 7270,
    _7271 = 7271,
    _7272 = 7272,
    _7273 = 7273,
    _7274 = 7274,
    _7275 = 7275,
    _7276 = 7276,
    _7277 = 7277,
    _7278 = 7278,
    _7279 = 7279,
    _7280 = 7280,
    _7281 = 7281,
    _7282 = 7282,
    _7283 = 7283,
    _7284 = 7284,
    _7285 = 7285,
    _7286 = 7286,
    _7287 = 7287,
    _7288 = 7288,
    _7289 = 7289,
    _7290 = 7290,
    _7291 = 7291,
    _7292 = 7292,
    _7293 = 7293,
    _7294 = 7294,
    _7295 = 7295,
    _7296 = 7296,
    _7297 = 7297,
    _7298 = 7298,
    _7299 = 7299,
    _7300 = 7300,
    _7301 = 7301,
    _7302 = 7302,
    _7303 = 7303,
    _7304 = 7304,
    _7305 = 7305,
    _7306 = 7306,
    _7307 = 7307,
    _7308 = 7308,
    _7309 = 7309,
    _7310 = 7310,
    _7311 = 7311,
    _7312 = 7312,
    _7313 = 7313,
    _7314 = 7314,
    _7315 = 7315,
    _7316 = 7316,
    _7317 = 7317,
    _7318 = 7318,
    _7319 = 7319,
    _7320 = 7320,
    _7321 = 7321,
    _7322 = 7322,
    _7323 = 7323,
    _7324 = 7324,
    _7325 = 7325,
    _7326 = 7326,
    _7327 = 7327,
    _7328 = 7328,
    _7329 = 7329,
    _7330 = 7330,
    _7331 = 7331,
    _7332 = 7332,
    _7333 = 7333,
    _7334 = 7334,
    _7335 = 7335,
    _7336 = 7336,
    _7337 = 7337,
    _7338 = 7338,
    _7339 = 7339,
    _7340 = 7340,
    _7341 = 7341,
    _7342 = 7342,
    _7343 = 7343,
    _7344 = 7344,
    _7345 = 7345,
    _7346 = 7346,
    _7347 = 7347,
    _7348 = 7348,
    _7349 = 7349,
    _7350 = 7350,
    _7351 = 7351,
    _7352 = 7352,
    _7353 = 7353,
    _7354 = 7354,
    _7355 = 7355,
    _7356 = 7356,
    _7357 = 7357,
    _7358 = 7358,
    _7359 = 7359,
    _7360 = 7360,
    _7361 = 7361,
    _7362 = 7362,
    _7363 = 7363,
    _7364 = 7364,
    _7365 = 7365,
    _7366 = 7366,
    _7367 = 7367,
    _7368 = 7368,
    _7369 = 7369,
    _7370 = 7370,
    _7371 = 7371,
    _7372 = 7372,
    _7373 = 7373,
    _7374 = 7374,
    _7375 = 7375,
    _7376 = 7376,
    _7377 = 7377,
    _7378 = 7378,
    _7379 = 7379,
    _7380 = 7380,
    _7381 = 7381,
    _7382 = 7382,
    _7383 = 7383,
    _7384 = 7384,
    _7385 = 7385,
    _7386 = 7386,
    _7387 = 7387,
    _7388 = 7388,
    _7389 = 7389,
    _7390 = 7390,
    _7391 = 7391,
    _7392 = 7392,
    _7393 = 7393,
    _7394 = 7394,
    _7395 = 7395,
    _7396 = 7396,
    _7397 = 7397,
    _7398 = 7398,
    _7399 = 7399,
    _7400 = 7400,
    _7401 = 7401,
    _7402 = 7402,
    _7403 = 7403,
    _7404 = 7404,
    _7405 = 7405,
    _7406 = 7406,
    _7407 = 7407,
    _7408 = 7408,
    _7409 = 7409,
    _7410 = 7410,
    _7411 = 7411,
    _7412 = 7412,
    _7413 = 7413,
    _7414 = 7414,
    _7415 = 7415,
    _7416 = 7416,
    _7417 = 7417,
    _7418 = 7418,
    _7419 = 7419,
    _7420 = 7420,
    _7421 = 7421,
    _7422 = 7422,
    _7423 = 7423,
    _7424 = 7424,
    _7425 = 7425,
    _7426 = 7426,
    _7427 = 7427,
    _7428 = 7428,
    _7429 = 7429,
    _7430 = 7430,
    _7431 = 7431,
    _7432 = 7432,
    _7433 = 7433,
    _7434 = 7434,
    _7435 = 7435,
    _7436 = 7436,
    _7437 = 7437,
    _7438 = 7438,
    _7439 = 7439,
    _7440 = 7440,
    _7441 = 7441,
    _7442 = 7442,
    _7443 = 7443,
    _7444 = 7444,
    _7445 = 7445,
    _7446 = 7446,
    _7447 = 7447,
    _7448 = 7448,
    _7449 = 7449,
    _7450 = 7450,
    _7451 = 7451,
    _7452 = 7452,
    _7453 = 7453,
    _7454 = 7454,
    _7455 = 7455,
    _7456 = 7456,
    _7457 = 7457,
    _7458 = 7458,
    _7459 = 7459,
    _7460 = 7460,
    _7461 = 7461,
    _7462 = 7462,
    _7463 = 7463,
    _7464 = 7464,
    _7465 = 7465,
    _7466 = 7466,
    _7467 = 7467,
    _7468 = 7468,
    _7469 = 7469,
    _7470 = 7470,
    _7471 = 7471,
    _7472 = 7472,
    _7473 = 7473,
    _7474 = 7474,
    _7475 = 7475,
    _7476 = 7476,
    _7477 = 7477,
    _7478 = 7478,
    _7479 = 7479,
    _7480 = 7480,
    _7481 = 7481,
    _7482 = 7482,
    _7483 = 7483,
    _7484 = 7484,
    _7485 = 7485,
    _7486 = 7486,
    _7487 = 7487,
    _7488 = 7488,
    _7489 = 7489,
    _7490 = 7490,
    _7491 = 7491,
    _7492 = 7492,
    _7493 = 7493,
    _7494 = 7494,
    _7495 = 7495,
    _7496 = 7496,
    _7497 = 7497,
    _7498 = 7498,
    _7499 = 7499,
    _7500 = 7500,
    _7501 = 7501,
    _7502 = 7502,
    _7503 = 7503,
    _7504 = 7504,
    _7505 = 7505,
    _7506 = 7506,
    _7507 = 7507,
    _7508 = 7508,
    _7509 = 7509,
    _7510 = 7510,
    _7511 = 7511,
    _7512 = 7512,
    _7513 = 7513,
    _7514 = 7514,
    _7515 = 7515,
    _7516 = 7516,
    _7517 = 7517,
    _7518 = 7518,
    _7519 = 7519,
    _7520 = 7520,
    _7521 = 7521,
    _7522 = 7522,
    _7523 = 7523,
    _7524 = 7524,
    _7525 = 7525,
    _7526 = 7526,
    _7527 = 7527,
    _7528 = 7528,
    _7529 = 7529,
    _7530 = 7530,
    _7531 = 7531,
    _7532 = 7532,
    _7533 = 7533,
    _7534 = 7534,
    _7535 = 7535,
    _7536 = 7536,
    _7537 = 7537,
    _7538 = 7538,
    _7539 = 7539,
    _7540 = 7540,
    _7541 = 7541,
    _7542 = 7542,
    _7543 = 7543,
    _7544 = 7544,
    _7545 = 7545,
    _7546 = 7546,
    _7547 = 7547,
    _7548 = 7548,
    _7549 = 7549,
    _7550 = 7550,
    _7551 = 7551,
    _7552 = 7552,
    _7553 = 7553,
    _7554 = 7554,
    _7555 = 7555,
    _7556 = 7556,
    _7557 = 7557,
    _7558 = 7558,
    _7559 = 7559,
    _7560 = 7560,
    _7561 = 7561,
    _7562 = 7562,
    _7563 = 7563,
    _7564 = 7564,
    _7565 = 7565,
    _7566 = 7566,
    _7567 = 7567,
    _7568 = 7568,
    _7569 = 7569,
    _7570 = 7570,
    _7571 = 7571,
    _7572 = 7572,
    _7573 = 7573,
    _7574 = 7574,
    _7575 = 7575,
    _7576 = 7576,
    _7577 = 7577,
    _7578 = 7578,
    _7579 = 7579,
    _7580 = 7580,
    _7581 = 7581,
    _7582 = 7582,
    _7583 = 7583,
    _7584 = 7584,
    _7585 = 7585,
    _7586 = 7586,
    _7587 = 7587,
    _7588 = 7588,
    _7589 = 7589,
    _7590 = 7590,
    _7591 = 7591,
    _7592 = 7592,
    _7593 = 7593,
    _7594 = 7594,
    _7595 = 7595,
    _7596 = 7596,
    _7597 = 7597,
    _7598 = 7598,
    _7599 = 7599,
    _7600 = 7600,
    _7601 = 7601,
    _7602 = 7602,
    _7603 = 7603,
    _7604 = 7604,
    _7605 = 7605,
    _7606 = 7606,
    _7607 = 7607,
    _7608 = 7608,
    _7609 = 7609,
    _7610 = 7610,
    _7611 = 7611,
    _7612 = 7612,
    _7613 = 7613,
    _7614 = 7614,
    _7615 = 7615,
    _7616 = 7616,
    _7617 = 7617,
    _7618 = 7618,
    _7619 = 7619,
    _7620 = 7620,
    _7621 = 7621,
    _7622 = 7622,
    _7623 = 7623,
    _7624 = 7624,
    _7625 = 7625,
    _7626 = 7626,
    _7627 = 7627,
    _7628 = 7628,
    _7629 = 7629,
    _7630 = 7630,
    _7631 = 7631,
    _7632 = 7632,
    _7633 = 7633,
    _7634 = 7634,
    _7635 = 7635,
    _7636 = 7636,
    _7637 = 7637,
    _7638 = 7638,
    _7639 = 7639,
    _7640 = 7640,
    _7641 = 7641,
    _7642 = 7642,
    _7643 = 7643,
    _7644 = 7644,
    _7645 = 7645,
    _7646 = 7646,
    _7647 = 7647,
    _7648 = 7648,
    _7649 = 7649,
    _7650 = 7650,
    _7651 = 7651,
    _7652 = 7652,
    _7653 = 7653,
    _7654 = 7654,
    _7655 = 7655,
    _7656 = 7656,
    _7657 = 7657,
    _7658 = 7658,
    _7659 = 7659,
    _7660 = 7660,
    _7661 = 7661,
    _7662 = 7662,
    _7663 = 7663,
    _7664 = 7664,
    _7665 = 7665,
    _7666 = 7666,
    _7667 = 7667,
    _7668 = 7668,
    _7669 = 7669,
    _7670 = 7670,
    _7671 = 7671,
    _7672 = 7672,
    _7673 = 7673,
    _7674 = 7674,
    _7675 = 7675,
    _7676 = 7676,
    _7677 = 7677,
    _7678 = 7678,
    _7679 = 7679,
    _7680 = 7680,
    _7681 = 7681,
    _7682 = 7682,
    _7683 = 7683,
    _7684 = 7684,
    _7685 = 7685,
    _7686 = 7686,
    _7687 = 7687,
    _7688 = 7688,
    _7689 = 7689,
    _7690 = 7690,
    _7691 = 7691,
    _7692 = 7692,
    _7693 = 7693,
    _7694 = 7694,
    _7695 = 7695,
    _7696 = 7696,
    _7697 = 7697,
    _7698 = 7698,
    _7699 = 7699,
    _7700 = 7700,
    _7701 = 7701,
    _7702 = 7702,
    _7703 = 7703,
    _7704 = 7704,
    _7705 = 7705,
    _7706 = 7706,
    _7707 = 7707,
    _7708 = 7708,
    _7709 = 7709,
    _7710 = 7710,
    _7711 = 7711,
    _7712 = 7712,
    _7713 = 7713,
    _7714 = 7714,
    _7715 = 7715,
    _7716 = 7716,
    _7717 = 7717,
    _7718 = 7718,
    _7719 = 7719,
    _7720 = 7720,
    _7721 = 7721,
    _7722 = 7722,
    _7723 = 7723,
    _7724 = 7724,
    _7725 = 7725,
    _7726 = 7726,
    _7727 = 7727,
    _7728 = 7728,
    _7729 = 7729,
    _7730 = 7730,
    _7731 = 7731,
    _7732 = 7732,
    _7733 = 7733,
    _7734 = 7734,
    _7735 = 7735,
    _7736 = 7736,
    _7737 = 7737,
    _7738 = 7738,
    _7739 = 7739,
    _7740 = 7740,
    _7741 = 7741,
    _7742 = 7742,
    _7743 = 7743,
    _7744 = 7744,
    _7745 = 7745,
    _7746 = 7746,
    _7747 = 7747,
    _7748 = 7748,
    _7749 = 7749,
    _7750 = 7750,
    _7751 = 7751,
    _7752 = 7752,
    _7753 = 7753,
    _7754 = 7754,
    _7755 = 7755,
    _7756 = 7756,
    _7757 = 7757,
    _7758 = 7758,
    _7759 = 7759,
    _7760 = 7760,
    _7761 = 7761,
    _7762 = 7762,
    _7763 = 7763,
    _7764 = 7764,
    _7765 = 7765,
    _7766 = 7766,
    _7767 = 7767,
    _7768 = 7768,
    _7769 = 7769,
    _7770 = 7770,
    _7771 = 7771,
    _7772 = 7772,
    _7773 = 7773,
    _7774 = 7774,
    _7775 = 7775,
    _7776 = 7776,
    _7777 = 7777,
    _7778 = 7778,
    _7779 = 7779,
    _7780 = 7780,
    _7781 = 7781,
    _7782 = 7782,
    _7783 = 7783,
    _7784 = 7784,
    _7785 = 7785,
    _7786 = 7786,
    _7787 = 7787,
    _7788 = 7788,
    _7789 = 7789,
    _7790 = 7790,
    _7791 = 7791,
    _7792 = 7792,
    _7793 = 7793,
    _7794 = 7794,
    _7795 = 7795,
    _7796 = 7796,
    _7797 = 7797,
    _7798 = 7798,
    _7799 = 7799,
    _7800 = 7800,
    _7801 = 7801,
    _7802 = 7802,
    _7803 = 7803,
    _7804 = 7804,
    _7805 = 7805,
    _7806 = 7806,
    _7807 = 7807,
    _7808 = 7808,
    _7809 = 7809,
    _7810 = 7810,
    _7811 = 7811,
    _7812 = 7812,
    _7813 = 7813,
    _7814 = 7814,
    _7815 = 7815,
    _7816 = 7816,
    _7817 = 7817,
    _7818 = 7818,
    _7819 = 7819,
    _7820 = 7820,
    _7821 = 7821,
    _7822 = 7822,
    _7823 = 7823,
    _7824 = 7824,
    _7825 = 7825,
    _7826 = 7826,
    _7827 = 7827,
    _7828 = 7828,
    _7829 = 7829,
    _7830 = 7830,
    _7831 = 7831,
    _7832 = 7832,
    _7833 = 7833,
    _7834 = 7834,
    _7835 = 7835,
    _7836 = 7836,
    _7837 = 7837,
    _7838 = 7838,
    _7839 = 7839,
    _7840 = 7840,
    _7841 = 7841,
    _7842 = 7842,
    _7843 = 7843,
    _7844 = 7844,
    _7845 = 7845,
    _7846 = 7846,
    _7847 = 7847,
    _7848 = 7848,
    _7849 = 7849,
    _7850 = 7850,
    _7851 = 7851,
    _7852 = 7852,
    _7853 = 7853,
    _7854 = 7854,
    _7855 = 7855,
    _7856 = 7856,
    _7857 = 7857,
    _7858 = 7858,
    _7859 = 7859,
    _7860 = 7860,
    _7861 = 7861,
    _7862 = 7862,
    _7863 = 7863,
    _7864 = 7864,
    _7865 = 7865,
    _7866 = 7866,
    _7867 = 7867,
    _7868 = 7868,
    _7869 = 7869,
    _7870 = 7870,
    _7871 = 7871,
    _7872 = 7872,
    _7873 = 7873,
    _7874 = 7874,
    _7875 = 7875,
    _7876 = 7876,
    _7877 = 7877,
    _7878 = 7878,
    _7879 = 7879,
    _7880 = 7880,
    _7881 = 7881,
    _7882 = 7882,
    _7883 = 7883,
    _7884 = 7884,
    _7885 = 7885,
    _7886 = 7886,
    _7887 = 7887,
    _7888 = 7888,
    _7889 = 7889,
    _7890 = 7890,
    _7891 = 7891,
    _7892 = 7892,
    _7893 = 7893,
    _7894 = 7894,
    _7895 = 7895,
    _7896 = 7896,
    _7897 = 7897,
    _7898 = 7898,
    _7899 = 7899,
    _7900 = 7900,
    _7901 = 7901,
    _7902 = 7902,
    _7903 = 7903,
    _7904 = 7904,
    _7905 = 7905,
    _7906 = 7906,
    _7907 = 7907,
    _7908 = 7908,
    _7909 = 7909,
    _7910 = 7910,
    _7911 = 7911,
    _7912 = 7912,
    _7913 = 7913,
    _7914 = 7914,
    _7915 = 7915,
    _7916 = 7916,
    _7917 = 7917,
    _7918 = 7918,
    _7919 = 7919,
    _7920 = 7920,
    _7921 = 7921,
    _7922 = 7922,
    _7923 = 7923,
    _7924 = 7924,
    _7925 = 7925,
    _7926 = 7926,
    _7927 = 7927,
    _7928 = 7928,
    _7929 = 7929,
    _7930 = 7930,
    _7931 = 7931,
    _7932 = 7932,
    _7933 = 7933,
    _7934 = 7934,
    _7935 = 7935,
    _7936 = 7936,
    _7937 = 7937,
    _7938 = 7938,
    _7939 = 7939,
    _7940 = 7940,
    _7941 = 7941,
    _7942 = 7942,
    _7943 = 7943,
    _7944 = 7944,
    _7945 = 7945,
    _7946 = 7946,
    _7947 = 7947,
    _7948 = 7948,
    _7949 = 7949,
    _7950 = 7950,
    _7951 = 7951,
    _7952 = 7952,
    _7953 = 7953,
    _7954 = 7954,
    _7955 = 7955,
    _7956 = 7956,
    _7957 = 7957,
    _7958 = 7958,
    _7959 = 7959,
    _7960 = 7960,
    _7961 = 7961,
    _7962 = 7962,
    _7963 = 7963,
    _7964 = 7964,
    _7965 = 7965,
    _7966 = 7966,
    _7967 = 7967,
    _7968 = 7968,
    _7969 = 7969,
    _7970 = 7970,
    _7971 = 7971,
    _7972 = 7972,
    _7973 = 7973,
    _7974 = 7974,
    _7975 = 7975,
    _7976 = 7976,
    _7977 = 7977,
    _7978 = 7978,
    _7979 = 7979,
    _7980 = 7980,
    _7981 = 7981,
    _7982 = 7982,
    _7983 = 7983,
    _7984 = 7984,
    _7985 = 7985,
    _7986 = 7986,
    _7987 = 7987,
    _7988 = 7988,
    _7989 = 7989,
    _7990 = 7990,
    _7991 = 7991,
    _7992 = 7992,
    _7993 = 7993,
    _7994 = 7994,
    _7995 = 7995,
    _7996 = 7996,
    _7997 = 7997,
    _7998 = 7998,
    _7999 = 7999,
    _8000 = 8000,
    _8001 = 8001,
    _8002 = 8002,
    _8003 = 8003,
    _8004 = 8004,
    _8005 = 8005,
    _8006 = 8006,
    _8007 = 8007,
    _8008 = 8008,
    _8009 = 8009,
    _8010 = 8010,
    _8011 = 8011,
    _8012 = 8012,
    _8013 = 8013,
    _8014 = 8014,
    _8015 = 8015,
    _8016 = 8016,
    _8017 = 8017,
    _8018 = 8018,
    _8019 = 8019,
    _8020 = 8020,
    _8021 = 8021,
    _8022 = 8022,
    _8023 = 8023,
    _8024 = 8024,
    _8025 = 8025,
    _8026 = 8026,
    _8027 = 8027,
    _8028 = 8028,
    _8029 = 8029,
    _8030 = 8030,
    _8031 = 8031,
    _8032 = 8032,
    _8033 = 8033,
    _8034 = 8034,
    _8035 = 8035,
    _8036 = 8036,
    _8037 = 8037,
    _8038 = 8038,
    _8039 = 8039,
    _8040 = 8040,
    _8041 = 8041,
    _8042 = 8042,
    _8043 = 8043,
    _8044 = 8044,
    _8045 = 8045,
    _8046 = 8046,
    _8047 = 8047,
    _8048 = 8048,
    _8049 = 8049,
    _8050 = 8050,
    _8051 = 8051,
    _8052 = 8052,
    _8053 = 8053,
    _8054 = 8054,
    _8055 = 8055,
    _8056 = 8056,
    _8057 = 8057,
    _8058 = 8058,
    _8059 = 8059,
    _8060 = 8060,
    _8061 = 8061,
    _8062 = 8062,
    _8063 = 8063,
    _8064 = 8064,
    _8065 = 8065,
    _8066 = 8066,
    _8067 = 8067,
    _8068 = 8068,
    _8069 = 8069,
    _8070 = 8070,
    _8071 = 8071,
    _8072 = 8072,
    _8073 = 8073,
    _8074 = 8074,
    _8075 = 8075,
    _8076 = 8076,
    _8077 = 8077,
    _8078 = 8078,
    _8079 = 8079,
    _8080 = 8080,
    _8081 = 8081,
    _8082 = 8082,
    _8083 = 8083,
    _8084 = 8084,
    _8085 = 8085,
    _8086 = 8086,
    _8087 = 8087,
    _8088 = 8088,
    _8089 = 8089,
    _8090 = 8090,
    _8091 = 8091,
    _8092 = 8092,
    _8093 = 8093,
    _8094 = 8094,
    _8095 = 8095,
    _8096 = 8096,
    _8097 = 8097,
    _8098 = 8098,
    _8099 = 8099,
    _8100 = 8100,
    _8101 = 8101,
    _8102 = 8102,
    _8103 = 8103,
    _8104 = 8104,
    _8105 = 8105,
    _8106 = 8106,
    _8107 = 8107,
    _8108 = 8108,
    _8109 = 8109,
    _8110 = 8110,
    _8111 = 8111,
    _8112 = 8112,
    _8113 = 8113,
    _8114 = 8114,
    _8115 = 8115,
    _8116 = 8116,
    _8117 = 8117,
    _8118 = 8118,
    _8119 = 8119,
    _8120 = 8120,
    _8121 = 8121,
    _8122 = 8122,
    _8123 = 8123,
    _8124 = 8124,
    _8125 = 8125,
    _8126 = 8126,
    _8127 = 8127,
    _8128 = 8128,
    _8129 = 8129,
    _8130 = 8130,
    _8131 = 8131,
    _8132 = 8132,
    _8133 = 8133,
    _8134 = 8134,
    _8135 = 8135,
    _8136 = 8136,
    _8137 = 8137,
    _8138 = 8138,
    _8139 = 8139,
    _8140 = 8140,
    _8141 = 8141,
    _8142 = 8142,
    _8143 = 8143,
    _8144 = 8144,
    _8145 = 8145,
    _8146 = 8146,
    _8147 = 8147,
    _8148 = 8148,
    _8149 = 8149,
    _8150 = 8150,
    _8151 = 8151,
    _8152 = 8152,
    _8153 = 8153,
    _8154 = 8154,
    _8155 = 8155,
    _8156 = 8156,
    _8157 = 8157,
    _8158 = 8158,
    _8159 = 8159,
    _8160 = 8160,
    _8161 = 8161,
    _8162 = 8162,
    _8163 = 8163,
    _8164 = 8164,
    _8165 = 8165,
    _8166 = 8166,
    _8167 = 8167,
    _8168 = 8168,
    _8169 = 8169,
    _8170 = 8170,
    _8171 = 8171,
    _8172 = 8172,
    _8173 = 8173,
    _8174 = 8174,
    _8175 = 8175,
    _8176 = 8176,
    _8177 = 8177,
    _8178 = 8178,
    _8179 = 8179,
    _8180 = 8180,
    _8181 = 8181,
    _8182 = 8182,
    _8183 = 8183,
    _8184 = 8184,
    _8185 = 8185,
    _8186 = 8186,
    _8187 = 8187,
    _8188 = 8188,
    _8189 = 8189,
    _8190 = 8190,
    _8191 = 8191,
    _8192 = 8192,
    _8193 = 8193,
    _8194 = 8194,
    _8195 = 8195,
    _8196 = 8196,
    _8197 = 8197,
    _8198 = 8198,
    _8199 = 8199,
    _8200 = 8200,
    _8201 = 8201,
    _8202 = 8202,
    _8203 = 8203,
    _8204 = 8204,
    _8205 = 8205,
    _8206 = 8206,
    _8207 = 8207,
    _8208 = 8208,
    _8209 = 8209,
    _8210 = 8210,
    _8211 = 8211,
    _8212 = 8212,
    _8213 = 8213,
    _8214 = 8214,
    _8215 = 8215,
    _8216 = 8216,
    _8217 = 8217,
    _8218 = 8218,
    _8219 = 8219,
    _8220 = 8220,
    _8221 = 8221,
    _8222 = 8222,
    _8223 = 8223,
    _8224 = 8224,
    _8225 = 8225,
    _8226 = 8226,
    _8227 = 8227,
    _8228 = 8228,
    _8229 = 8229,
    _8230 = 8230,
    _8231 = 8231,
    _8232 = 8232,
    _8233 = 8233,
    _8234 = 8234,
    _8235 = 8235,
    _8236 = 8236,
    _8237 = 8237,
    _8238 = 8238,
    _8239 = 8239,
    _8240 = 8240,
    _8241 = 8241,
    _8242 = 8242,
    _8243 = 8243,
    _8244 = 8244,
    _8245 = 8245,
    _8246 = 8246,
    _8247 = 8247,
    _8248 = 8248,
    _8249 = 8249,
    _8250 = 8250,
    _8251 = 8251,
    _8252 = 8252,
    _8253 = 8253,
    _8254 = 8254,
    _8255 = 8255,
    _8256 = 8256,
    _8257 = 8257,
    _8258 = 8258,
}

export enum LanguageLevel {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
}

export enum LanguageScope {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export enum LayoutKind {
    _0 = 0,
    _2 = 2,
    _3 = 3,
}

export class MemberInfo implements IMemberInfo {
    memberType?: MemberTypes;
    readonly name?: string | undefined;
    declaringType?: Type;
    reflectedType?: Type;
    module?: Module;
    readonly customAttributes?: CustomAttributeData[] | undefined;
    readonly isCollectible?: boolean;
    readonly metadataToken?: number;

    constructor(data?: IMemberInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.memberType = _data["memberType"];
            (<any>this).name = _data["name"];
            this.declaringType = _data["declaringType"] ? Type.fromJS(_data["declaringType"]) : <any>undefined;
            this.reflectedType = _data["reflectedType"] ? Type.fromJS(_data["reflectedType"]) : <any>undefined;
            this.module = _data["module"] ? Module.fromJS(_data["module"]) : <any>undefined;
            if (Array.isArray(_data["customAttributes"])) {
                (<any>this).customAttributes = [] as any;
                for (let item of _data["customAttributes"])
                    (<any>this).customAttributes!.push(CustomAttributeData.fromJS(item));
            }
            (<any>this).isCollectible = _data["isCollectible"];
            (<any>this).metadataToken = _data["metadataToken"];
        }
    }

    static fromJS(data: any): MemberInfo {
        data = typeof data === 'object' ? data : {};
        let result = new MemberInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["memberType"] = this.memberType;
        data["name"] = this.name;
        data["declaringType"] = this.declaringType ? this.declaringType.toJSON() : <any>undefined;
        data["reflectedType"] = this.reflectedType ? this.reflectedType.toJSON() : <any>undefined;
        data["module"] = this.module ? this.module.toJSON() : <any>undefined;
        if (Array.isArray(this.customAttributes)) {
            data["customAttributes"] = [];
            for (let item of this.customAttributes)
                data["customAttributes"].push(item ? item.toJSON() : <any>undefined);
        }
        data["isCollectible"] = this.isCollectible;
        data["metadataToken"] = this.metadataToken;
        return data;
    }
}

export interface IMemberInfo {
    memberType?: MemberTypes;
    name?: string | undefined;
    declaringType?: Type;
    reflectedType?: Type;
    module?: Module;
    customAttributes?: CustomAttributeData[] | undefined;
    isCollectible?: boolean;
    metadataToken?: number;
}

export enum MemberTypes {
    _1 = 1,
    _2 = 2,
    _4 = 4,
    _8 = 8,
    _16 = 16,
    _32 = 32,
    _64 = 64,
    _128 = 128,
    _191 = 191,
}

export enum MethodAttributes {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
    _7 = 7,
    _8 = 8,
    _16 = 16,
    _32 = 32,
    _64 = 64,
    _128 = 128,
    _256 = 256,
    _512 = 512,
    _1024 = 1024,
    _2048 = 2048,
    _4096 = 4096,
    _8192 = 8192,
    _16384 = 16384,
    _32768 = 32768,
    _53248 = 53248,
}

export class MethodBase implements IMethodBase {
    memberType?: MemberTypes;
    readonly name?: string | undefined;
    declaringType?: Type;
    reflectedType?: Type;
    module?: Module;
    readonly customAttributes?: CustomAttributeData[] | undefined;
    readonly isCollectible?: boolean;
    readonly metadataToken?: number;
    attributes?: MethodAttributes;
    methodImplementationFlags?: MethodImplAttributes;
    callingConvention?: CallingConventions;
    readonly isAbstract?: boolean;
    readonly isConstructor?: boolean;
    readonly isFinal?: boolean;
    readonly isHideBySig?: boolean;
    readonly isSpecialName?: boolean;
    readonly isStatic?: boolean;
    readonly isVirtual?: boolean;
    readonly isAssembly?: boolean;
    readonly isFamily?: boolean;
    readonly isFamilyAndAssembly?: boolean;
    readonly isFamilyOrAssembly?: boolean;
    readonly isPrivate?: boolean;
    readonly isPublic?: boolean;
    readonly isConstructedGenericMethod?: boolean;
    readonly isGenericMethod?: boolean;
    readonly isGenericMethodDefinition?: boolean;
    readonly containsGenericParameters?: boolean;
    methodHandle?: RuntimeMethodHandle;
    readonly isSecurityCritical?: boolean;
    readonly isSecuritySafeCritical?: boolean;
    readonly isSecurityTransparent?: boolean;

    constructor(data?: IMethodBase) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.memberType = _data["memberType"];
            (<any>this).name = _data["name"];
            this.declaringType = _data["declaringType"] ? Type.fromJS(_data["declaringType"]) : <any>undefined;
            this.reflectedType = _data["reflectedType"] ? Type.fromJS(_data["reflectedType"]) : <any>undefined;
            this.module = _data["module"] ? Module.fromJS(_data["module"]) : <any>undefined;
            if (Array.isArray(_data["customAttributes"])) {
                (<any>this).customAttributes = [] as any;
                for (let item of _data["customAttributes"])
                    (<any>this).customAttributes!.push(CustomAttributeData.fromJS(item));
            }
            (<any>this).isCollectible = _data["isCollectible"];
            (<any>this).metadataToken = _data["metadataToken"];
            this.attributes = _data["attributes"];
            this.methodImplementationFlags = _data["methodImplementationFlags"];
            this.callingConvention = _data["callingConvention"];
            (<any>this).isAbstract = _data["isAbstract"];
            (<any>this).isConstructor = _data["isConstructor"];
            (<any>this).isFinal = _data["isFinal"];
            (<any>this).isHideBySig = _data["isHideBySig"];
            (<any>this).isSpecialName = _data["isSpecialName"];
            (<any>this).isStatic = _data["isStatic"];
            (<any>this).isVirtual = _data["isVirtual"];
            (<any>this).isAssembly = _data["isAssembly"];
            (<any>this).isFamily = _data["isFamily"];
            (<any>this).isFamilyAndAssembly = _data["isFamilyAndAssembly"];
            (<any>this).isFamilyOrAssembly = _data["isFamilyOrAssembly"];
            (<any>this).isPrivate = _data["isPrivate"];
            (<any>this).isPublic = _data["isPublic"];
            (<any>this).isConstructedGenericMethod = _data["isConstructedGenericMethod"];
            (<any>this).isGenericMethod = _data["isGenericMethod"];
            (<any>this).isGenericMethodDefinition = _data["isGenericMethodDefinition"];
            (<any>this).containsGenericParameters = _data["containsGenericParameters"];
            this.methodHandle = _data["methodHandle"] ? RuntimeMethodHandle.fromJS(_data["methodHandle"]) : <any>undefined;
            (<any>this).isSecurityCritical = _data["isSecurityCritical"];
            (<any>this).isSecuritySafeCritical = _data["isSecuritySafeCritical"];
            (<any>this).isSecurityTransparent = _data["isSecurityTransparent"];
        }
    }

    static fromJS(data: any): MethodBase {
        data = typeof data === 'object' ? data : {};
        let result = new MethodBase();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["memberType"] = this.memberType;
        data["name"] = this.name;
        data["declaringType"] = this.declaringType ? this.declaringType.toJSON() : <any>undefined;
        data["reflectedType"] = this.reflectedType ? this.reflectedType.toJSON() : <any>undefined;
        data["module"] = this.module ? this.module.toJSON() : <any>undefined;
        if (Array.isArray(this.customAttributes)) {
            data["customAttributes"] = [];
            for (let item of this.customAttributes)
                data["customAttributes"].push(item ? item.toJSON() : <any>undefined);
        }
        data["isCollectible"] = this.isCollectible;
        data["metadataToken"] = this.metadataToken;
        data["attributes"] = this.attributes;
        data["methodImplementationFlags"] = this.methodImplementationFlags;
        data["callingConvention"] = this.callingConvention;
        data["isAbstract"] = this.isAbstract;
        data["isConstructor"] = this.isConstructor;
        data["isFinal"] = this.isFinal;
        data["isHideBySig"] = this.isHideBySig;
        data["isSpecialName"] = this.isSpecialName;
        data["isStatic"] = this.isStatic;
        data["isVirtual"] = this.isVirtual;
        data["isAssembly"] = this.isAssembly;
        data["isFamily"] = this.isFamily;
        data["isFamilyAndAssembly"] = this.isFamilyAndAssembly;
        data["isFamilyOrAssembly"] = this.isFamilyOrAssembly;
        data["isPrivate"] = this.isPrivate;
        data["isPublic"] = this.isPublic;
        data["isConstructedGenericMethod"] = this.isConstructedGenericMethod;
        data["isGenericMethod"] = this.isGenericMethod;
        data["isGenericMethodDefinition"] = this.isGenericMethodDefinition;
        data["containsGenericParameters"] = this.containsGenericParameters;
        data["methodHandle"] = this.methodHandle ? this.methodHandle.toJSON() : <any>undefined;
        data["isSecurityCritical"] = this.isSecurityCritical;
        data["isSecuritySafeCritical"] = this.isSecuritySafeCritical;
        data["isSecurityTransparent"] = this.isSecurityTransparent;
        return data;
    }
}

export interface IMethodBase {
    memberType?: MemberTypes;
    name?: string | undefined;
    declaringType?: Type;
    reflectedType?: Type;
    module?: Module;
    customAttributes?: CustomAttributeData[] | undefined;
    isCollectible?: boolean;
    metadataToken?: number;
    attributes?: MethodAttributes;
    methodImplementationFlags?: MethodImplAttributes;
    callingConvention?: CallingConventions;
    isAbstract?: boolean;
    isConstructor?: boolean;
    isFinal?: boolean;
    isHideBySig?: boolean;
    isSpecialName?: boolean;
    isStatic?: boolean;
    isVirtual?: boolean;
    isAssembly?: boolean;
    isFamily?: boolean;
    isFamilyAndAssembly?: boolean;
    isFamilyOrAssembly?: boolean;
    isPrivate?: boolean;
    isPublic?: boolean;
    isConstructedGenericMethod?: boolean;
    isGenericMethod?: boolean;
    isGenericMethodDefinition?: boolean;
    containsGenericParameters?: boolean;
    methodHandle?: RuntimeMethodHandle;
    isSecurityCritical?: boolean;
    isSecuritySafeCritical?: boolean;
    isSecurityTransparent?: boolean;
}

export enum MethodImplAttributes {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _8 = 8,
    _16 = 16,
    _32 = 32,
    _64 = 64,
    _128 = 128,
    _256 = 256,
    _512 = 512,
    _4096 = 4096,
    _65535 = 65535,
}

export class MethodInfo implements IMethodInfo {
    readonly name?: string | undefined;
    declaringType?: Type;
    reflectedType?: Type;
    module?: Module;
    readonly customAttributes?: CustomAttributeData[] | undefined;
    readonly isCollectible?: boolean;
    readonly metadataToken?: number;
    attributes?: MethodAttributes;
    methodImplementationFlags?: MethodImplAttributes;
    callingConvention?: CallingConventions;
    readonly isAbstract?: boolean;
    readonly isConstructor?: boolean;
    readonly isFinal?: boolean;
    readonly isHideBySig?: boolean;
    readonly isSpecialName?: boolean;
    readonly isStatic?: boolean;
    readonly isVirtual?: boolean;
    readonly isAssembly?: boolean;
    readonly isFamily?: boolean;
    readonly isFamilyAndAssembly?: boolean;
    readonly isFamilyOrAssembly?: boolean;
    readonly isPrivate?: boolean;
    readonly isPublic?: boolean;
    readonly isConstructedGenericMethod?: boolean;
    readonly isGenericMethod?: boolean;
    readonly isGenericMethodDefinition?: boolean;
    readonly containsGenericParameters?: boolean;
    methodHandle?: RuntimeMethodHandle;
    readonly isSecurityCritical?: boolean;
    readonly isSecuritySafeCritical?: boolean;
    readonly isSecurityTransparent?: boolean;
    memberType?: MemberTypes;
    returnParameter?: ParameterInfo;
    returnType?: Type;
    returnTypeCustomAttributes?: ICustomAttributeProvider;

    constructor(data?: IMethodInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).name = _data["name"];
            this.declaringType = _data["declaringType"] ? Type.fromJS(_data["declaringType"]) : <any>undefined;
            this.reflectedType = _data["reflectedType"] ? Type.fromJS(_data["reflectedType"]) : <any>undefined;
            this.module = _data["module"] ? Module.fromJS(_data["module"]) : <any>undefined;
            if (Array.isArray(_data["customAttributes"])) {
                (<any>this).customAttributes = [] as any;
                for (let item of _data["customAttributes"])
                    (<any>this).customAttributes!.push(CustomAttributeData.fromJS(item));
            }
            (<any>this).isCollectible = _data["isCollectible"];
            (<any>this).metadataToken = _data["metadataToken"];
            this.attributes = _data["attributes"];
            this.methodImplementationFlags = _data["methodImplementationFlags"];
            this.callingConvention = _data["callingConvention"];
            (<any>this).isAbstract = _data["isAbstract"];
            (<any>this).isConstructor = _data["isConstructor"];
            (<any>this).isFinal = _data["isFinal"];
            (<any>this).isHideBySig = _data["isHideBySig"];
            (<any>this).isSpecialName = _data["isSpecialName"];
            (<any>this).isStatic = _data["isStatic"];
            (<any>this).isVirtual = _data["isVirtual"];
            (<any>this).isAssembly = _data["isAssembly"];
            (<any>this).isFamily = _data["isFamily"];
            (<any>this).isFamilyAndAssembly = _data["isFamilyAndAssembly"];
            (<any>this).isFamilyOrAssembly = _data["isFamilyOrAssembly"];
            (<any>this).isPrivate = _data["isPrivate"];
            (<any>this).isPublic = _data["isPublic"];
            (<any>this).isConstructedGenericMethod = _data["isConstructedGenericMethod"];
            (<any>this).isGenericMethod = _data["isGenericMethod"];
            (<any>this).isGenericMethodDefinition = _data["isGenericMethodDefinition"];
            (<any>this).containsGenericParameters = _data["containsGenericParameters"];
            this.methodHandle = _data["methodHandle"] ? RuntimeMethodHandle.fromJS(_data["methodHandle"]) : <any>undefined;
            (<any>this).isSecurityCritical = _data["isSecurityCritical"];
            (<any>this).isSecuritySafeCritical = _data["isSecuritySafeCritical"];
            (<any>this).isSecurityTransparent = _data["isSecurityTransparent"];
            this.memberType = _data["memberType"];
            this.returnParameter = _data["returnParameter"] ? ParameterInfo.fromJS(_data["returnParameter"]) : <any>undefined;
            this.returnType = _data["returnType"] ? Type.fromJS(_data["returnType"]) : <any>undefined;
            this.returnTypeCustomAttributes = _data["returnTypeCustomAttributes"] ? ICustomAttributeProvider.fromJS(_data["returnTypeCustomAttributes"]) : <any>undefined;
        }
    }

    static fromJS(data: any): MethodInfo {
        data = typeof data === 'object' ? data : {};
        let result = new MethodInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["declaringType"] = this.declaringType ? this.declaringType.toJSON() : <any>undefined;
        data["reflectedType"] = this.reflectedType ? this.reflectedType.toJSON() : <any>undefined;
        data["module"] = this.module ? this.module.toJSON() : <any>undefined;
        if (Array.isArray(this.customAttributes)) {
            data["customAttributes"] = [];
            for (let item of this.customAttributes)
                data["customAttributes"].push(item ? item.toJSON() : <any>undefined);
        }
        data["isCollectible"] = this.isCollectible;
        data["metadataToken"] = this.metadataToken;
        data["attributes"] = this.attributes;
        data["methodImplementationFlags"] = this.methodImplementationFlags;
        data["callingConvention"] = this.callingConvention;
        data["isAbstract"] = this.isAbstract;
        data["isConstructor"] = this.isConstructor;
        data["isFinal"] = this.isFinal;
        data["isHideBySig"] = this.isHideBySig;
        data["isSpecialName"] = this.isSpecialName;
        data["isStatic"] = this.isStatic;
        data["isVirtual"] = this.isVirtual;
        data["isAssembly"] = this.isAssembly;
        data["isFamily"] = this.isFamily;
        data["isFamilyAndAssembly"] = this.isFamilyAndAssembly;
        data["isFamilyOrAssembly"] = this.isFamilyOrAssembly;
        data["isPrivate"] = this.isPrivate;
        data["isPublic"] = this.isPublic;
        data["isConstructedGenericMethod"] = this.isConstructedGenericMethod;
        data["isGenericMethod"] = this.isGenericMethod;
        data["isGenericMethodDefinition"] = this.isGenericMethodDefinition;
        data["containsGenericParameters"] = this.containsGenericParameters;
        data["methodHandle"] = this.methodHandle ? this.methodHandle.toJSON() : <any>undefined;
        data["isSecurityCritical"] = this.isSecurityCritical;
        data["isSecuritySafeCritical"] = this.isSecuritySafeCritical;
        data["isSecurityTransparent"] = this.isSecurityTransparent;
        data["memberType"] = this.memberType;
        data["returnParameter"] = this.returnParameter ? this.returnParameter.toJSON() : <any>undefined;
        data["returnType"] = this.returnType ? this.returnType.toJSON() : <any>undefined;
        data["returnTypeCustomAttributes"] = this.returnTypeCustomAttributes ? this.returnTypeCustomAttributes.toJSON() : <any>undefined;
        return data;
    }
}

export interface IMethodInfo {
    name?: string | undefined;
    declaringType?: Type;
    reflectedType?: Type;
    module?: Module;
    customAttributes?: CustomAttributeData[] | undefined;
    isCollectible?: boolean;
    metadataToken?: number;
    attributes?: MethodAttributes;
    methodImplementationFlags?: MethodImplAttributes;
    callingConvention?: CallingConventions;
    isAbstract?: boolean;
    isConstructor?: boolean;
    isFinal?: boolean;
    isHideBySig?: boolean;
    isSpecialName?: boolean;
    isStatic?: boolean;
    isVirtual?: boolean;
    isAssembly?: boolean;
    isFamily?: boolean;
    isFamilyAndAssembly?: boolean;
    isFamilyOrAssembly?: boolean;
    isPrivate?: boolean;
    isPublic?: boolean;
    isConstructedGenericMethod?: boolean;
    isGenericMethod?: boolean;
    isGenericMethodDefinition?: boolean;
    containsGenericParameters?: boolean;
    methodHandle?: RuntimeMethodHandle;
    isSecurityCritical?: boolean;
    isSecuritySafeCritical?: boolean;
    isSecurityTransparent?: boolean;
    memberType?: MemberTypes;
    returnParameter?: ParameterInfo;
    returnType?: Type;
    returnTypeCustomAttributes?: ICustomAttributeProvider;
}

export class ModelError implements IModelError {
    exception?: Exception;
    readonly errorMessage?: string | undefined;

    constructor(data?: IModelError) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.exception = _data["exception"] ? Exception.fromJS(_data["exception"]) : <any>undefined;
            (<any>this).errorMessage = _data["errorMessage"];
        }
    }

    static fromJS(data: any): ModelError {
        data = typeof data === 'object' ? data : {};
        let result = new ModelError();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["exception"] = this.exception ? this.exception.toJSON() : <any>undefined;
        data["errorMessage"] = this.errorMessage;
        return data;
    }
}

export interface IModelError {
    exception?: Exception;
    errorMessage?: string | undefined;
}

export class ModelMetadataBooleanFunc implements IModelMetadataBooleanFunc {
    readonly target?: any | undefined;
    method?: MethodInfo;

    constructor(data?: IModelMetadataBooleanFunc) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).target = _data["target"];
            this.method = _data["method"] ? MethodInfo.fromJS(_data["method"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ModelMetadataBooleanFunc {
        data = typeof data === 'object' ? data : {};
        let result = new ModelMetadataBooleanFunc();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["target"] = this.target;
        data["method"] = this.method ? this.method.toJSON() : <any>undefined;
        return data;
    }
}

export interface IModelMetadataBooleanFunc {
    target?: any | undefined;
    method?: MethodInfo;
}

export class ModelStateEntry implements IModelStateEntry {
    rawValue?: any | undefined;
    attemptedValue?: string | undefined;
    readonly errors?: ModelError[] | undefined;
    validationState?: ModelValidationState;
    readonly isContainerNode?: boolean;
    readonly children?: ModelStateEntry[] | undefined;

    constructor(data?: IModelStateEntry) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.rawValue = _data["rawValue"];
            this.attemptedValue = _data["attemptedValue"];
            if (Array.isArray(_data["errors"])) {
                (<any>this).errors = [] as any;
                for (let item of _data["errors"])
                    (<any>this).errors!.push(ModelError.fromJS(item));
            }
            this.validationState = _data["validationState"];
            (<any>this).isContainerNode = _data["isContainerNode"];
            if (Array.isArray(_data["children"])) {
                (<any>this).children = [] as any;
                for (let item of _data["children"])
                    (<any>this).children!.push(ModelStateEntry.fromJS(item));
            }
        }
    }

    static fromJS(data: any): ModelStateEntry {
        data = typeof data === 'object' ? data : {};
        let result = new ModelStateEntry();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["rawValue"] = this.rawValue;
        data["attemptedValue"] = this.attemptedValue;
        if (Array.isArray(this.errors)) {
            data["errors"] = [];
            for (let item of this.errors)
                data["errors"].push(item ? item.toJSON() : <any>undefined);
        }
        data["validationState"] = this.validationState;
        data["isContainerNode"] = this.isContainerNode;
        if (Array.isArray(this.children)) {
            data["children"] = [];
            for (let item of this.children)
                data["children"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface IModelStateEntry {
    rawValue?: any | undefined;
    attemptedValue?: string | undefined;
    errors?: ModelError[] | undefined;
    validationState?: ModelValidationState;
    isContainerNode?: boolean;
    children?: ModelStateEntry[] | undefined;
}

export enum ModelValidationState {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
}

export class Module implements IModule {
    assembly?: Assembly;
    readonly fullyQualifiedName?: string | undefined;
    readonly name?: string | undefined;
    readonly mdStreamVersion?: number;
    readonly moduleVersionId?: string;
    readonly scopeName?: string | undefined;
    moduleHandle?: ModuleHandle;
    readonly customAttributes?: CustomAttributeData[] | undefined;
    readonly metadataToken?: number;

    constructor(data?: IModule) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.assembly = _data["assembly"] ? Assembly.fromJS(_data["assembly"]) : <any>undefined;
            (<any>this).fullyQualifiedName = _data["fullyQualifiedName"];
            (<any>this).name = _data["name"];
            (<any>this).mdStreamVersion = _data["mdStreamVersion"];
            (<any>this).moduleVersionId = _data["moduleVersionId"];
            (<any>this).scopeName = _data["scopeName"];
            this.moduleHandle = _data["moduleHandle"] ? ModuleHandle.fromJS(_data["moduleHandle"]) : <any>undefined;
            if (Array.isArray(_data["customAttributes"])) {
                (<any>this).customAttributes = [] as any;
                for (let item of _data["customAttributes"])
                    (<any>this).customAttributes!.push(CustomAttributeData.fromJS(item));
            }
            (<any>this).metadataToken = _data["metadataToken"];
        }
    }

    static fromJS(data: any): Module {
        data = typeof data === 'object' ? data : {};
        let result = new Module();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assembly"] = this.assembly ? this.assembly.toJSON() : <any>undefined;
        data["fullyQualifiedName"] = this.fullyQualifiedName;
        data["name"] = this.name;
        data["mdStreamVersion"] = this.mdStreamVersion;
        data["moduleVersionId"] = this.moduleVersionId;
        data["scopeName"] = this.scopeName;
        data["moduleHandle"] = this.moduleHandle ? this.moduleHandle.toJSON() : <any>undefined;
        if (Array.isArray(this.customAttributes)) {
            data["customAttributes"] = [];
            for (let item of this.customAttributes)
                data["customAttributes"].push(item ? item.toJSON() : <any>undefined);
        }
        data["metadataToken"] = this.metadataToken;
        return data;
    }
}

export interface IModule {
    assembly?: Assembly;
    fullyQualifiedName?: string | undefined;
    name?: string | undefined;
    mdStreamVersion?: number;
    moduleVersionId?: string;
    scopeName?: string | undefined;
    moduleHandle?: ModuleHandle;
    customAttributes?: CustomAttributeData[] | undefined;
    metadataToken?: number;
}

export class ModuleHandle implements IModuleHandle {
    readonly mdStreamVersion?: number;

    constructor(data?: IModuleHandle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).mdStreamVersion = _data["mdStreamVersion"];
        }
    }

    static fromJS(data: any): ModuleHandle {
        data = typeof data === 'object' ? data : {};
        let result = new ModuleHandle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["mdStreamVersion"] = this.mdStreamVersion;
        return data;
    }
}

export interface IModuleHandle {
    mdStreamVersion?: number;
}

export class NoContentResult implements INoContentResult {
    statusCode?: number;

    constructor(data?: INoContentResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.statusCode = _data["statusCode"];
        }
    }

    static fromJS(data: any): NoContentResult {
        data = typeof data === 'object' ? data : {};
        let result = new NoContentResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["statusCode"] = this.statusCode;
        return data;
    }
}

export interface INoContentResult {
    statusCode?: number;
}

export class Oid implements IOid {
    value?: string | undefined;
    friendlyName?: string | undefined;

    constructor(data?: IOid) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            this.friendlyName = _data["friendlyName"];
        }
    }

    static fromJS(data: any): Oid {
        data = typeof data === 'object' ? data : {};
        let result = new Oid();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["friendlyName"] = this.friendlyName;
        return data;
    }
}

export interface IOid {
    value?: string | undefined;
    friendlyName?: string | undefined;
}

export class OkObjectResult implements IOkObjectResult {
    value?: any | undefined;
    formatters?: IOutputFormatter[] | undefined;
    contentTypes?: string[] | undefined;
    declaredType?: Type;
    statusCode?: number | undefined;

    constructor(data?: IOkObjectResult) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            if (Array.isArray(_data["formatters"])) {
                this.formatters = [] as any;
                for (let item of _data["formatters"])
                    this.formatters!.push(IOutputFormatter.fromJS(item));
            }
            if (Array.isArray(_data["contentTypes"])) {
                this.contentTypes = [] as any;
                for (let item of _data["contentTypes"])
                    this.contentTypes!.push(item);
            }
            this.declaredType = _data["declaredType"] ? Type.fromJS(_data["declaredType"]) : <any>undefined;
            this.statusCode = _data["statusCode"];
        }
    }

    static fromJS(data: any): OkObjectResult {
        data = typeof data === 'object' ? data : {};
        let result = new OkObjectResult();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        if (Array.isArray(this.formatters)) {
            data["formatters"] = [];
            for (let item of this.formatters)
                data["formatters"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.contentTypes)) {
            data["contentTypes"] = [];
            for (let item of this.contentTypes)
                data["contentTypes"].push(item);
        }
        data["declaredType"] = this.declaredType ? this.declaredType.toJSON() : <any>undefined;
        data["statusCode"] = this.statusCode;
        return data;
    }
}

export interface IOkObjectResult {
    value?: any | undefined;
    formatters?: IOutputFormatter[] | undefined;
    contentTypes?: string[] | undefined;
    declaredType?: Type;
    statusCode?: number | undefined;
}

export enum ParameterAttributes {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _4 = 4,
    _8 = 8,
    _16 = 16,
    _4096 = 4096,
    _8192 = 8192,
    _16384 = 16384,
    _32768 = 32768,
    _61440 = 61440,
}

export class ParameterDescriptor implements IParameterDescriptor {
    name?: string | undefined;
    parameterType?: Type;
    bindingInfo?: BindingInfo;

    constructor(data?: IParameterDescriptor) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.name = _data["name"];
            this.parameterType = _data["parameterType"] ? Type.fromJS(_data["parameterType"]) : <any>undefined;
            this.bindingInfo = _data["bindingInfo"] ? BindingInfo.fromJS(_data["bindingInfo"]) : <any>undefined;
        }
    }

    static fromJS(data: any): ParameterDescriptor {
        data = typeof data === 'object' ? data : {};
        let result = new ParameterDescriptor();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["parameterType"] = this.parameterType ? this.parameterType.toJSON() : <any>undefined;
        data["bindingInfo"] = this.bindingInfo ? this.bindingInfo.toJSON() : <any>undefined;
        return data;
    }
}

export interface IParameterDescriptor {
    name?: string | undefined;
    parameterType?: Type;
    bindingInfo?: BindingInfo;
}

export class ParameterInfo implements IParameterInfo {
    attributes?: ParameterAttributes;
    member?: MemberInfo;
    readonly name?: string | undefined;
    parameterType?: Type;
    readonly position?: number;
    readonly isIn?: boolean;
    readonly isLcid?: boolean;
    readonly isOptional?: boolean;
    readonly isOut?: boolean;
    readonly isRetval?: boolean;
    readonly defaultValue?: any | undefined;
    readonly rawDefaultValue?: any | undefined;
    readonly hasDefaultValue?: boolean;
    readonly customAttributes?: CustomAttributeData[] | undefined;
    readonly metadataToken?: number;

    constructor(data?: IParameterInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.attributes = _data["attributes"];
            this.member = _data["member"] ? MemberInfo.fromJS(_data["member"]) : <any>undefined;
            (<any>this).name = _data["name"];
            this.parameterType = _data["parameterType"] ? Type.fromJS(_data["parameterType"]) : <any>undefined;
            (<any>this).position = _data["position"];
            (<any>this).isIn = _data["isIn"];
            (<any>this).isLcid = _data["isLcid"];
            (<any>this).isOptional = _data["isOptional"];
            (<any>this).isOut = _data["isOut"];
            (<any>this).isRetval = _data["isRetval"];
            (<any>this).defaultValue = _data["defaultValue"];
            (<any>this).rawDefaultValue = _data["rawDefaultValue"];
            (<any>this).hasDefaultValue = _data["hasDefaultValue"];
            if (Array.isArray(_data["customAttributes"])) {
                (<any>this).customAttributes = [] as any;
                for (let item of _data["customAttributes"])
                    (<any>this).customAttributes!.push(CustomAttributeData.fromJS(item));
            }
            (<any>this).metadataToken = _data["metadataToken"];
        }
    }

    static fromJS(data: any): ParameterInfo {
        data = typeof data === 'object' ? data : {};
        let result = new ParameterInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["attributes"] = this.attributes;
        data["member"] = this.member ? this.member.toJSON() : <any>undefined;
        data["name"] = this.name;
        data["parameterType"] = this.parameterType ? this.parameterType.toJSON() : <any>undefined;
        data["position"] = this.position;
        data["isIn"] = this.isIn;
        data["isLcid"] = this.isLcid;
        data["isOptional"] = this.isOptional;
        data["isOut"] = this.isOut;
        data["isRetval"] = this.isRetval;
        data["defaultValue"] = this.defaultValue;
        data["rawDefaultValue"] = this.rawDefaultValue;
        data["hasDefaultValue"] = this.hasDefaultValue;
        if (Array.isArray(this.customAttributes)) {
            data["customAttributes"] = [];
            for (let item of this.customAttributes)
                data["customAttributes"].push(item ? item.toJSON() : <any>undefined);
        }
        data["metadataToken"] = this.metadataToken;
        return data;
    }
}

export interface IParameterInfo {
    attributes?: ParameterAttributes;
    member?: MemberInfo;
    name?: string | undefined;
    parameterType?: Type;
    position?: number;
    isIn?: boolean;
    isLcid?: boolean;
    isOptional?: boolean;
    isOut?: boolean;
    isRetval?: boolean;
    defaultValue?: any | undefined;
    rawDefaultValue?: any | undefined;
    hasDefaultValue?: boolean;
    customAttributes?: CustomAttributeData[] | undefined;
    metadataToken?: number;
}

export class PathString implements IPathString {
    value?: string | undefined;
    readonly hasValue?: boolean;

    constructor(data?: IPathString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            (<any>this).hasValue = _data["hasValue"];
        }
    }

    static fromJS(data: any): PathString {
        data = typeof data === 'object' ? data : {};
        let result = new PathString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["hasValue"] = this.hasValue;
        return data;
    }
}

export interface IPathString {
    value?: string | undefined;
    hasValue?: boolean;
}

export class PipeWriter implements IPipeWriter {
    readonly canGetUnflushedBytes?: boolean;
    readonly unflushedBytes?: number;

    constructor(data?: IPipeWriter) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).canGetUnflushedBytes = _data["canGetUnflushedBytes"];
            (<any>this).unflushedBytes = _data["unflushedBytes"];
        }
    }

    static fromJS(data: any): PipeWriter {
        data = typeof data === 'object' ? data : {};
        let result = new PipeWriter();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["canGetUnflushedBytes"] = this.canGetUnflushedBytes;
        data["unflushedBytes"] = this.unflushedBytes;
        return data;
    }
}

export interface IPipeWriter {
    canGetUnflushedBytes?: boolean;
    unflushedBytes?: number;
}

export class ProblemDetails implements IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;

    constructor(data?: IProblemDetails) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            for (var property in _data) {
                if (_data.hasOwnProperty(property))
                    this[property] = _data[property];
            }
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
        }
    }

    static fromJS(data: any): ProblemDetails {
        data = typeof data === 'object' ? data : {};
        let result = new ProblemDetails();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        for (var property in this) {
            if (this.hasOwnProperty(property))
                data[property] = this[property];
        }
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        return data;
    }
}

export interface IProblemDetails {
    type?: string | undefined;
    title?: string | undefined;
    status?: number | undefined;
    detail?: string | undefined;
    instance?: string | undefined;

    [key: string]: any;
}

export enum PropertyAttributes {
    _0 = 0,
    _512 = 512,
    _1024 = 1024,
    _4096 = 4096,
    _8192 = 8192,
    _16384 = 16384,
    _32768 = 32768,
    _62464 = 62464,
}

export class PropertyInfo implements IPropertyInfo {
    readonly name?: string | undefined;
    declaringType?: Type;
    reflectedType?: Type;
    module?: Module;
    readonly customAttributes?: CustomAttributeData[] | undefined;
    readonly isCollectible?: boolean;
    readonly metadataToken?: number;
    memberType?: MemberTypes;
    propertyType?: Type;
    attributes?: PropertyAttributes;
    readonly isSpecialName?: boolean;
    readonly canRead?: boolean;
    readonly canWrite?: boolean;
    getMethod?: MethodInfo;
    setMethod?: MethodInfo;

    constructor(data?: IPropertyInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).name = _data["name"];
            this.declaringType = _data["declaringType"] ? Type.fromJS(_data["declaringType"]) : <any>undefined;
            this.reflectedType = _data["reflectedType"] ? Type.fromJS(_data["reflectedType"]) : <any>undefined;
            this.module = _data["module"] ? Module.fromJS(_data["module"]) : <any>undefined;
            if (Array.isArray(_data["customAttributes"])) {
                (<any>this).customAttributes = [] as any;
                for (let item of _data["customAttributes"])
                    (<any>this).customAttributes!.push(CustomAttributeData.fromJS(item));
            }
            (<any>this).isCollectible = _data["isCollectible"];
            (<any>this).metadataToken = _data["metadataToken"];
            this.memberType = _data["memberType"];
            this.propertyType = _data["propertyType"] ? Type.fromJS(_data["propertyType"]) : <any>undefined;
            this.attributes = _data["attributes"];
            (<any>this).isSpecialName = _data["isSpecialName"];
            (<any>this).canRead = _data["canRead"];
            (<any>this).canWrite = _data["canWrite"];
            this.getMethod = _data["getMethod"] ? MethodInfo.fromJS(_data["getMethod"]) : <any>undefined;
            this.setMethod = _data["setMethod"] ? MethodInfo.fromJS(_data["setMethod"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PropertyInfo {
        data = typeof data === 'object' ? data : {};
        let result = new PropertyInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        data["declaringType"] = this.declaringType ? this.declaringType.toJSON() : <any>undefined;
        data["reflectedType"] = this.reflectedType ? this.reflectedType.toJSON() : <any>undefined;
        data["module"] = this.module ? this.module.toJSON() : <any>undefined;
        if (Array.isArray(this.customAttributes)) {
            data["customAttributes"] = [];
            for (let item of this.customAttributes)
                data["customAttributes"].push(item ? item.toJSON() : <any>undefined);
        }
        data["isCollectible"] = this.isCollectible;
        data["metadataToken"] = this.metadataToken;
        data["memberType"] = this.memberType;
        data["propertyType"] = this.propertyType ? this.propertyType.toJSON() : <any>undefined;
        data["attributes"] = this.attributes;
        data["isSpecialName"] = this.isSpecialName;
        data["canRead"] = this.canRead;
        data["canWrite"] = this.canWrite;
        data["getMethod"] = this.getMethod ? this.getMethod.toJSON() : <any>undefined;
        data["setMethod"] = this.setMethod ? this.setMethod.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPropertyInfo {
    name?: string | undefined;
    declaringType?: Type;
    reflectedType?: Type;
    module?: Module;
    customAttributes?: CustomAttributeData[] | undefined;
    isCollectible?: boolean;
    metadataToken?: number;
    memberType?: MemberTypes;
    propertyType?: Type;
    attributes?: PropertyAttributes;
    isSpecialName?: boolean;
    canRead?: boolean;
    canWrite?: boolean;
    getMethod?: MethodInfo;
    setMethod?: MethodInfo;
}

export class PublicKey implements IPublicKey {
    encodedKeyValue?: AsnEncodedData;
    encodedParameters?: AsnEncodedData;
    key?: AsymmetricAlgorithm;
    oid?: Oid;

    constructor(data?: IPublicKey) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.encodedKeyValue = _data["encodedKeyValue"] ? AsnEncodedData.fromJS(_data["encodedKeyValue"]) : <any>undefined;
            this.encodedParameters = _data["encodedParameters"] ? AsnEncodedData.fromJS(_data["encodedParameters"]) : <any>undefined;
            this.key = _data["key"] ? AsymmetricAlgorithm.fromJS(_data["key"]) : <any>undefined;
            this.oid = _data["oid"] ? Oid.fromJS(_data["oid"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PublicKey {
        data = typeof data === 'object' ? data : {};
        let result = new PublicKey();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["encodedKeyValue"] = this.encodedKeyValue ? this.encodedKeyValue.toJSON() : <any>undefined;
        data["encodedParameters"] = this.encodedParameters ? this.encodedParameters.toJSON() : <any>undefined;
        data["key"] = this.key ? this.key.toJSON() : <any>undefined;
        data["oid"] = this.oid ? this.oid.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPublicKey {
    encodedKeyValue?: AsnEncodedData;
    encodedParameters?: AsnEncodedData;
    key?: AsymmetricAlgorithm;
    oid?: Oid;
}

export class QueryString implements IQueryString {
    value?: string | undefined;
    readonly hasValue?: boolean;

    constructor(data?: IQueryString) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"];
            (<any>this).hasValue = _data["hasValue"];
        }
    }

    static fromJS(data: any): QueryString {
        data = typeof data === 'object' ? data : {};
        let result = new QueryString();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value;
        data["hasValue"] = this.hasValue;
        return data;
    }
}

export interface IQueryString {
    value?: string | undefined;
    hasValue?: boolean;
}

export class RouteData implements IRouteData {
    readonly dataTokens?: { [key: string]: any; } | undefined;
    readonly routers?: IRouter[] | undefined;
    readonly values?: { [key: string]: any; } | undefined;

    constructor(data?: IRouteData) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            if (_data["dataTokens"]) {
                (<any>this).dataTokens = {} as any;
                for (let key in _data["dataTokens"]) {
                    if (_data["dataTokens"].hasOwnProperty(key))
                        (<any>(<any>this).dataTokens)![key] = _data["dataTokens"][key];
                }
            }
            if (Array.isArray(_data["routers"])) {
                (<any>this).routers = [] as any;
                for (let item of _data["routers"])
                    (<any>this).routers!.push(IRouter.fromJS(item));
            }
            if (_data["values"]) {
                (<any>this).values = {} as any;
                for (let key in _data["values"]) {
                    if (_data["values"].hasOwnProperty(key))
                        (<any>(<any>this).values)![key] = _data["values"][key];
                }
            }
        }
    }

    static fromJS(data: any): RouteData {
        data = typeof data === 'object' ? data : {};
        let result = new RouteData();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (this.dataTokens) {
            data["dataTokens"] = {};
            for (let key in this.dataTokens) {
                if (this.dataTokens.hasOwnProperty(key))
                    (<any>data["dataTokens"])[key] = (<any>this.dataTokens)[key];
            }
        }
        if (Array.isArray(this.routers)) {
            data["routers"] = [];
            for (let item of this.routers)
                data["routers"].push(item ? item.toJSON() : <any>undefined);
        }
        if (this.values) {
            data["values"] = {};
            for (let key in this.values) {
                if (this.values.hasOwnProperty(key))
                    (<any>data["values"])[key] = (<any>this.values)[key];
            }
        }
        return data;
    }
}

export interface IRouteData {
    dataTokens?: { [key: string]: any; } | undefined;
    routers?: IRouter[] | undefined;
    values?: { [key: string]: any; } | undefined;
}

export class RuntimeFieldHandle implements IRuntimeFieldHandle {
    value?: IntPtr;

    constructor(data?: IRuntimeFieldHandle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"] ? IntPtr.fromJS(_data["value"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RuntimeFieldHandle {
        data = typeof data === 'object' ? data : {};
        let result = new RuntimeFieldHandle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        return data;
    }
}

export interface IRuntimeFieldHandle {
    value?: IntPtr;
}

export class RuntimeMethodHandle implements IRuntimeMethodHandle {
    value?: IntPtr;

    constructor(data?: IRuntimeMethodHandle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"] ? IntPtr.fromJS(_data["value"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RuntimeMethodHandle {
        data = typeof data === 'object' ? data : {};
        let result = new RuntimeMethodHandle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        return data;
    }
}

export interface IRuntimeMethodHandle {
    value?: IntPtr;
}

export class RuntimeTypeHandle implements IRuntimeTypeHandle {
    value?: IntPtr;

    constructor(data?: IRuntimeTypeHandle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.value = _data["value"] ? IntPtr.fromJS(_data["value"]) : <any>undefined;
        }
    }

    static fromJS(data: any): RuntimeTypeHandle {
        data = typeof data === 'object' ? data : {};
        let result = new RuntimeTypeHandle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["value"] = this.value ? this.value.toJSON() : <any>undefined;
        return data;
    }
}

export interface IRuntimeTypeHandle {
    value?: IntPtr;
}

export class SafeWaitHandle implements ISafeWaitHandle {
    readonly isClosed?: boolean;
    readonly isInvalid?: boolean;

    constructor(data?: ISafeWaitHandle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).isClosed = _data["isClosed"];
            (<any>this).isInvalid = _data["isInvalid"];
        }
    }

    static fromJS(data: any): SafeWaitHandle {
        data = typeof data === 'object' ? data : {};
        let result = new SafeWaitHandle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isClosed"] = this.isClosed;
        data["isInvalid"] = this.isInvalid;
        return data;
    }
}

export interface ISafeWaitHandle {
    isClosed?: boolean;
    isInvalid?: boolean;
}

export class Script implements IScript {
    readonly privateUse?: boolean;
    readonly textCode?: string | undefined;
    enumCode?: ScriptCode;

    constructor(data?: IScript) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).privateUse = _data["privateUse"];
            (<any>this).textCode = _data["textCode"];
            this.enumCode = _data["enumCode"];
        }
    }

    static fromJS(data: any): Script {
        data = typeof data === 'object' ? data : {};
        let result = new Script();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["privateUse"] = this.privateUse;
        data["textCode"] = this.textCode;
        data["enumCode"] = this.enumCode;
        return data;
    }
}

export interface IScript {
    privateUse?: boolean;
    textCode?: string | undefined;
    enumCode?: ScriptCode;
}

export enum ScriptCode {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
    _7 = 7,
    _8 = 8,
    _9 = 9,
    _10 = 10,
    _11 = 11,
    _12 = 12,
    _13 = 13,
    _14 = 14,
    _15 = 15,
    _16 = 16,
    _17 = 17,
    _18 = 18,
    _19 = 19,
    _20 = 20,
    _21 = 21,
    _22 = 22,
    _23 = 23,
    _24 = 24,
    _25 = 25,
    _26 = 26,
    _27 = 27,
    _28 = 28,
    _29 = 29,
    _30 = 30,
    _31 = 31,
    _32 = 32,
    _33 = 33,
    _34 = 34,
    _35 = 35,
    _36 = 36,
    _37 = 37,
    _38 = 38,
    _39 = 39,
    _40 = 40,
    _41 = 41,
    _42 = 42,
    _43 = 43,
    _44 = 44,
    _45 = 45,
    _46 = 46,
    _47 = 47,
    _48 = 48,
    _49 = 49,
    _50 = 50,
    _51 = 51,
    _52 = 52,
    _53 = 53,
    _54 = 54,
    _55 = 55,
    _56 = 56,
    _57 = 57,
    _58 = 58,
    _59 = 59,
    _60 = 60,
    _61 = 61,
    _62 = 62,
    _63 = 63,
    _64 = 64,
    _65 = 65,
    _66 = 66,
    _67 = 67,
    _68 = 68,
    _69 = 69,
    _70 = 70,
    _71 = 71,
    _72 = 72,
    _73 = 73,
    _74 = 74,
    _75 = 75,
    _76 = 76,
    _77 = 77,
    _78 = 78,
    _79 = 79,
    _80 = 80,
    _81 = 81,
    _82 = 82,
    _83 = 83,
    _84 = 84,
    _85 = 85,
    _86 = 86,
    _87 = 87,
    _88 = 88,
    _89 = 89,
    _90 = 90,
    _91 = 91,
    _92 = 92,
    _93 = 93,
    _94 = 94,
    _95 = 95,
    _96 = 96,
    _97 = 97,
    _98 = 98,
    _99 = 99,
    _100 = 100,
    _101 = 101,
    _102 = 102,
    _103 = 103,
    _104 = 104,
    _105 = 105,
    _106 = 106,
    _107 = 107,
    _108 = 108,
    _109 = 109,
    _110 = 110,
    _111 = 111,
    _112 = 112,
    _113 = 113,
    _114 = 114,
    _115 = 115,
    _116 = 116,
    _117 = 117,
    _118 = 118,
    _119 = 119,
    _120 = 120,
    _121 = 121,
    _122 = 122,
    _123 = 123,
    _124 = 124,
    _125 = 125,
    _126 = 126,
    _127 = 127,
    _128 = 128,
    _129 = 129,
    _130 = 130,
    _131 = 131,
    _132 = 132,
    _133 = 133,
    _134 = 134,
    _135 = 135,
    _136 = 136,
    _137 = 137,
    _138 = 138,
    _139 = 139,
    _140 = 140,
    _141 = 141,
    _142 = 142,
    _143 = 143,
    _144 = 144,
    _145 = 145,
    _146 = 146,
    _147 = 147,
    _148 = 148,
    _149 = 149,
    _150 = 150,
    _151 = 151,
    _152 = 152,
    _153 = 153,
    _154 = 154,
    _155 = 155,
    _156 = 156,
    _157 = 157,
    _158 = 158,
    _159 = 159,
    _160 = 160,
    _161 = 161,
    _162 = 162,
    _163 = 163,
    _164 = 164,
    _165 = 165,
    _166 = 166,
    _167 = 167,
    _168 = 168,
    _169 = 169,
    _170 = 170,
    _171 = 171,
    _172 = 172,
    _173 = 173,
    _174 = 174,
    _175 = 175,
    _176 = 176,
    _177 = 177,
    _178 = 178,
    _179 = 179,
    _180 = 180,
    _181 = 181,
    _182 = 182,
    _183 = 183,
    _184 = 184,
    _185 = 185,
    _186 = 186,
    _187 = 187,
    _188 = 188,
    _189 = 189,
    _190 = 190,
    _191 = 191,
    _192 = 192,
    _193 = 193,
    _194 = 194,
    _195 = 195,
    _196 = 196,
    _197 = 197,
    _198 = 198,
    _199 = 199,
    _200 = 200,
    _201 = 201,
    _202 = 202,
    _203 = 203,
    _204 = 204,
    _205 = 205,
    _206 = 206,
    _207 = 207,
    _208 = 208,
    _209 = 209,
    _210 = 210,
    _211 = 211,
    _212 = 212,
    _213 = 213,
    _214 = 214,
    _215 = 215,
    _216 = 216,
    _217 = 217,
    _218 = 218,
    _219 = 219,
    _220 = 220,
    _221 = 221,
}

export enum SecurityRuleSet {
    _0 = 0,
    _1 = 1,
    _2 = 2,
}

export class StringStringKeyValuePair implements IStringStringKeyValuePair {
    key?: string | undefined;
    value?: string | undefined;

    constructor(data?: IStringStringKeyValuePair) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): StringStringKeyValuePair {
        data = typeof data === 'object' ? data : {};
        let result = new StringStringKeyValuePair();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        data["value"] = this.value;
        return data;
    }
}

export interface IStringStringKeyValuePair {
    key?: string | undefined;
    value?: string | undefined;
}

export class StringStringValuesKeyValuePair implements IStringStringValuesKeyValuePair {
    key?: string | undefined;
    value?: string[];

    constructor(data?: IStringStringValuesKeyValuePair) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"];
            if (Array.isArray(_data["value"])) {
                this.value = [] as any;
                for (let item of _data["value"])
                    this.value!.push(item);
            }
        }
    }

    static fromJS(data: any): StringStringValuesKeyValuePair {
        data = typeof data === 'object' ? data : {};
        let result = new StringStringValuesKeyValuePair();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key;
        if (Array.isArray(this.value)) {
            data["value"] = [];
            for (let item of this.value)
                data["value"].push(item);
        }
        return data;
    }
}

export interface IStringStringValuesKeyValuePair {
    key?: string | undefined;
    value?: string[];
}

export class StructLayoutAttribute implements IStructLayoutAttribute {
    readonly typeId?: any | undefined;
    value?: LayoutKind;

    constructor(data?: IStructLayoutAttribute) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).typeId = _data["typeId"];
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): StructLayoutAttribute {
        data = typeof data === 'object' ? data : {};
        let result = new StructLayoutAttribute();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["typeId"] = this.typeId;
        data["value"] = this.value;
        return data;
    }
}

export interface IStructLayoutAttribute {
    typeId?: any | undefined;
    value?: LayoutKind;
}

export class Type implements IType {
    readonly name?: string | undefined;
    readonly customAttributes?: CustomAttributeData[] | undefined;
    readonly isCollectible?: boolean;
    readonly metadataToken?: number;
    memberType?: MemberTypes;
    readonly namespace?: string | undefined;
    readonly assemblyQualifiedName?: string | undefined;
    readonly fullName?: string | undefined;
    assembly?: Assembly;
    module?: Module;
    readonly isInterface?: boolean;
    readonly isNested?: boolean;
    declaringType?: Type;
    declaringMethod?: MethodBase;
    reflectedType?: Type;
    underlyingSystemType?: Type;
    readonly isTypeDefinition?: boolean;
    readonly isArray?: boolean;
    readonly isByRef?: boolean;
    readonly isPointer?: boolean;
    readonly isConstructedGenericType?: boolean;
    readonly isGenericParameter?: boolean;
    readonly isGenericTypeParameter?: boolean;
    readonly isGenericMethodParameter?: boolean;
    readonly isGenericType?: boolean;
    readonly isGenericTypeDefinition?: boolean;
    readonly isSZArray?: boolean;
    readonly isVariableBoundArray?: boolean;
    readonly isByRefLike?: boolean;
    readonly isFunctionPointer?: boolean;
    readonly isUnmanagedFunctionPointer?: boolean;
    readonly hasElementType?: boolean;
    readonly genericTypeArguments?: Type[] | undefined;
    readonly genericParameterPosition?: number;
    genericParameterAttributes?: GenericParameterAttributes;
    attributes?: TypeAttributes;
    readonly isAbstract?: boolean;
    readonly isImport?: boolean;
    readonly isSealed?: boolean;
    readonly isSpecialName?: boolean;
    readonly isClass?: boolean;
    readonly isNestedAssembly?: boolean;
    readonly isNestedFamANDAssem?: boolean;
    readonly isNestedFamily?: boolean;
    readonly isNestedFamORAssem?: boolean;
    readonly isNestedPrivate?: boolean;
    readonly isNestedPublic?: boolean;
    readonly isNotPublic?: boolean;
    readonly isPublic?: boolean;
    readonly isAutoLayout?: boolean;
    readonly isExplicitLayout?: boolean;
    readonly isLayoutSequential?: boolean;
    readonly isAnsiClass?: boolean;
    readonly isAutoClass?: boolean;
    readonly isUnicodeClass?: boolean;
    readonly isCOMObject?: boolean;
    readonly isContextful?: boolean;
    readonly isEnum?: boolean;
    readonly isMarshalByRef?: boolean;
    readonly isPrimitive?: boolean;
    readonly isValueType?: boolean;
    readonly isSignatureType?: boolean;
    readonly isSecurityCritical?: boolean;
    readonly isSecuritySafeCritical?: boolean;
    readonly isSecurityTransparent?: boolean;
    structLayoutAttribute?: StructLayoutAttribute;
    typeInitializer?: ConstructorInfo;
    typeHandle?: RuntimeTypeHandle;
    readonly guid?: string;
    baseType?: Type;
    readonly isSerializable?: boolean;
    readonly containsGenericParameters?: boolean;
    readonly isVisible?: boolean;

    constructor(data?: IType) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).name = _data["name"];
            if (Array.isArray(_data["customAttributes"])) {
                (<any>this).customAttributes = [] as any;
                for (let item of _data["customAttributes"])
                    (<any>this).customAttributes!.push(CustomAttributeData.fromJS(item));
            }
            (<any>this).isCollectible = _data["isCollectible"];
            (<any>this).metadataToken = _data["metadataToken"];
            this.memberType = _data["memberType"];
            (<any>this).namespace = _data["namespace"];
            (<any>this).assemblyQualifiedName = _data["assemblyQualifiedName"];
            (<any>this).fullName = _data["fullName"];
            this.assembly = _data["assembly"] ? Assembly.fromJS(_data["assembly"]) : <any>undefined;
            this.module = _data["module"] ? Module.fromJS(_data["module"]) : <any>undefined;
            (<any>this).isInterface = _data["isInterface"];
            (<any>this).isNested = _data["isNested"];
            this.declaringType = _data["declaringType"] ? Type.fromJS(_data["declaringType"]) : <any>undefined;
            this.declaringMethod = _data["declaringMethod"] ? MethodBase.fromJS(_data["declaringMethod"]) : <any>undefined;
            this.reflectedType = _data["reflectedType"] ? Type.fromJS(_data["reflectedType"]) : <any>undefined;
            this.underlyingSystemType = _data["underlyingSystemType"] ? Type.fromJS(_data["underlyingSystemType"]) : <any>undefined;
            (<any>this).isTypeDefinition = _data["isTypeDefinition"];
            (<any>this).isArray = _data["isArray"];
            (<any>this).isByRef = _data["isByRef"];
            (<any>this).isPointer = _data["isPointer"];
            (<any>this).isConstructedGenericType = _data["isConstructedGenericType"];
            (<any>this).isGenericParameter = _data["isGenericParameter"];
            (<any>this).isGenericTypeParameter = _data["isGenericTypeParameter"];
            (<any>this).isGenericMethodParameter = _data["isGenericMethodParameter"];
            (<any>this).isGenericType = _data["isGenericType"];
            (<any>this).isGenericTypeDefinition = _data["isGenericTypeDefinition"];
            (<any>this).isSZArray = _data["isSZArray"];
            (<any>this).isVariableBoundArray = _data["isVariableBoundArray"];
            (<any>this).isByRefLike = _data["isByRefLike"];
            (<any>this).isFunctionPointer = _data["isFunctionPointer"];
            (<any>this).isUnmanagedFunctionPointer = _data["isUnmanagedFunctionPointer"];
            (<any>this).hasElementType = _data["hasElementType"];
            if (Array.isArray(_data["genericTypeArguments"])) {
                (<any>this).genericTypeArguments = [] as any;
                for (let item of _data["genericTypeArguments"])
                    (<any>this).genericTypeArguments!.push(Type.fromJS(item));
            }
            (<any>this).genericParameterPosition = _data["genericParameterPosition"];
            this.genericParameterAttributes = _data["genericParameterAttributes"];
            this.attributes = _data["attributes"];
            (<any>this).isAbstract = _data["isAbstract"];
            (<any>this).isImport = _data["isImport"];
            (<any>this).isSealed = _data["isSealed"];
            (<any>this).isSpecialName = _data["isSpecialName"];
            (<any>this).isClass = _data["isClass"];
            (<any>this).isNestedAssembly = _data["isNestedAssembly"];
            (<any>this).isNestedFamANDAssem = _data["isNestedFamANDAssem"];
            (<any>this).isNestedFamily = _data["isNestedFamily"];
            (<any>this).isNestedFamORAssem = _data["isNestedFamORAssem"];
            (<any>this).isNestedPrivate = _data["isNestedPrivate"];
            (<any>this).isNestedPublic = _data["isNestedPublic"];
            (<any>this).isNotPublic = _data["isNotPublic"];
            (<any>this).isPublic = _data["isPublic"];
            (<any>this).isAutoLayout = _data["isAutoLayout"];
            (<any>this).isExplicitLayout = _data["isExplicitLayout"];
            (<any>this).isLayoutSequential = _data["isLayoutSequential"];
            (<any>this).isAnsiClass = _data["isAnsiClass"];
            (<any>this).isAutoClass = _data["isAutoClass"];
            (<any>this).isUnicodeClass = _data["isUnicodeClass"];
            (<any>this).isCOMObject = _data["isCOMObject"];
            (<any>this).isContextful = _data["isContextful"];
            (<any>this).isEnum = _data["isEnum"];
            (<any>this).isMarshalByRef = _data["isMarshalByRef"];
            (<any>this).isPrimitive = _data["isPrimitive"];
            (<any>this).isValueType = _data["isValueType"];
            (<any>this).isSignatureType = _data["isSignatureType"];
            (<any>this).isSecurityCritical = _data["isSecurityCritical"];
            (<any>this).isSecuritySafeCritical = _data["isSecuritySafeCritical"];
            (<any>this).isSecurityTransparent = _data["isSecurityTransparent"];
            this.structLayoutAttribute = _data["structLayoutAttribute"] ? StructLayoutAttribute.fromJS(_data["structLayoutAttribute"]) : <any>undefined;
            this.typeInitializer = _data["typeInitializer"] ? ConstructorInfo.fromJS(_data["typeInitializer"]) : <any>undefined;
            this.typeHandle = _data["typeHandle"] ? RuntimeTypeHandle.fromJS(_data["typeHandle"]) : <any>undefined;
            (<any>this).guid = _data["guid"];
            this.baseType = _data["baseType"] ? Type.fromJS(_data["baseType"]) : <any>undefined;
            (<any>this).isSerializable = _data["isSerializable"];
            (<any>this).containsGenericParameters = _data["containsGenericParameters"];
            (<any>this).isVisible = _data["isVisible"];
        }
    }

    static fromJS(data: any): Type {
        data = typeof data === 'object' ? data : {};
        let result = new Type();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.customAttributes)) {
            data["customAttributes"] = [];
            for (let item of this.customAttributes)
                data["customAttributes"].push(item ? item.toJSON() : <any>undefined);
        }
        data["isCollectible"] = this.isCollectible;
        data["metadataToken"] = this.metadataToken;
        data["memberType"] = this.memberType;
        data["namespace"] = this.namespace;
        data["assemblyQualifiedName"] = this.assemblyQualifiedName;
        data["fullName"] = this.fullName;
        data["assembly"] = this.assembly ? this.assembly.toJSON() : <any>undefined;
        data["module"] = this.module ? this.module.toJSON() : <any>undefined;
        data["isInterface"] = this.isInterface;
        data["isNested"] = this.isNested;
        data["declaringType"] = this.declaringType ? this.declaringType.toJSON() : <any>undefined;
        data["declaringMethod"] = this.declaringMethod ? this.declaringMethod.toJSON() : <any>undefined;
        data["reflectedType"] = this.reflectedType ? this.reflectedType.toJSON() : <any>undefined;
        data["underlyingSystemType"] = this.underlyingSystemType ? this.underlyingSystemType.toJSON() : <any>undefined;
        data["isTypeDefinition"] = this.isTypeDefinition;
        data["isArray"] = this.isArray;
        data["isByRef"] = this.isByRef;
        data["isPointer"] = this.isPointer;
        data["isConstructedGenericType"] = this.isConstructedGenericType;
        data["isGenericParameter"] = this.isGenericParameter;
        data["isGenericTypeParameter"] = this.isGenericTypeParameter;
        data["isGenericMethodParameter"] = this.isGenericMethodParameter;
        data["isGenericType"] = this.isGenericType;
        data["isGenericTypeDefinition"] = this.isGenericTypeDefinition;
        data["isSZArray"] = this.isSZArray;
        data["isVariableBoundArray"] = this.isVariableBoundArray;
        data["isByRefLike"] = this.isByRefLike;
        data["isFunctionPointer"] = this.isFunctionPointer;
        data["isUnmanagedFunctionPointer"] = this.isUnmanagedFunctionPointer;
        data["hasElementType"] = this.hasElementType;
        if (Array.isArray(this.genericTypeArguments)) {
            data["genericTypeArguments"] = [];
            for (let item of this.genericTypeArguments)
                data["genericTypeArguments"].push(item ? item.toJSON() : <any>undefined);
        }
        data["genericParameterPosition"] = this.genericParameterPosition;
        data["genericParameterAttributes"] = this.genericParameterAttributes;
        data["attributes"] = this.attributes;
        data["isAbstract"] = this.isAbstract;
        data["isImport"] = this.isImport;
        data["isSealed"] = this.isSealed;
        data["isSpecialName"] = this.isSpecialName;
        data["isClass"] = this.isClass;
        data["isNestedAssembly"] = this.isNestedAssembly;
        data["isNestedFamANDAssem"] = this.isNestedFamANDAssem;
        data["isNestedFamily"] = this.isNestedFamily;
        data["isNestedFamORAssem"] = this.isNestedFamORAssem;
        data["isNestedPrivate"] = this.isNestedPrivate;
        data["isNestedPublic"] = this.isNestedPublic;
        data["isNotPublic"] = this.isNotPublic;
        data["isPublic"] = this.isPublic;
        data["isAutoLayout"] = this.isAutoLayout;
        data["isExplicitLayout"] = this.isExplicitLayout;
        data["isLayoutSequential"] = this.isLayoutSequential;
        data["isAnsiClass"] = this.isAnsiClass;
        data["isAutoClass"] = this.isAutoClass;
        data["isUnicodeClass"] = this.isUnicodeClass;
        data["isCOMObject"] = this.isCOMObject;
        data["isContextful"] = this.isContextful;
        data["isEnum"] = this.isEnum;
        data["isMarshalByRef"] = this.isMarshalByRef;
        data["isPrimitive"] = this.isPrimitive;
        data["isValueType"] = this.isValueType;
        data["isSignatureType"] = this.isSignatureType;
        data["isSecurityCritical"] = this.isSecurityCritical;
        data["isSecuritySafeCritical"] = this.isSecuritySafeCritical;
        data["isSecurityTransparent"] = this.isSecurityTransparent;
        data["structLayoutAttribute"] = this.structLayoutAttribute ? this.structLayoutAttribute.toJSON() : <any>undefined;
        data["typeInitializer"] = this.typeInitializer ? this.typeInitializer.toJSON() : <any>undefined;
        data["typeHandle"] = this.typeHandle ? this.typeHandle.toJSON() : <any>undefined;
        data["guid"] = this.guid;
        data["baseType"] = this.baseType ? this.baseType.toJSON() : <any>undefined;
        data["isSerializable"] = this.isSerializable;
        data["containsGenericParameters"] = this.containsGenericParameters;
        data["isVisible"] = this.isVisible;
        return data;
    }
}

export interface IType {
    name?: string | undefined;
    customAttributes?: CustomAttributeData[] | undefined;
    isCollectible?: boolean;
    metadataToken?: number;
    memberType?: MemberTypes;
    namespace?: string | undefined;
    assemblyQualifiedName?: string | undefined;
    fullName?: string | undefined;
    assembly?: Assembly;
    module?: Module;
    isInterface?: boolean;
    isNested?: boolean;
    declaringType?: Type;
    declaringMethod?: MethodBase;
    reflectedType?: Type;
    underlyingSystemType?: Type;
    isTypeDefinition?: boolean;
    isArray?: boolean;
    isByRef?: boolean;
    isPointer?: boolean;
    isConstructedGenericType?: boolean;
    isGenericParameter?: boolean;
    isGenericTypeParameter?: boolean;
    isGenericMethodParameter?: boolean;
    isGenericType?: boolean;
    isGenericTypeDefinition?: boolean;
    isSZArray?: boolean;
    isVariableBoundArray?: boolean;
    isByRefLike?: boolean;
    isFunctionPointer?: boolean;
    isUnmanagedFunctionPointer?: boolean;
    hasElementType?: boolean;
    genericTypeArguments?: Type[] | undefined;
    genericParameterPosition?: number;
    genericParameterAttributes?: GenericParameterAttributes;
    attributes?: TypeAttributes;
    isAbstract?: boolean;
    isImport?: boolean;
    isSealed?: boolean;
    isSpecialName?: boolean;
    isClass?: boolean;
    isNestedAssembly?: boolean;
    isNestedFamANDAssem?: boolean;
    isNestedFamily?: boolean;
    isNestedFamORAssem?: boolean;
    isNestedPrivate?: boolean;
    isNestedPublic?: boolean;
    isNotPublic?: boolean;
    isPublic?: boolean;
    isAutoLayout?: boolean;
    isExplicitLayout?: boolean;
    isLayoutSequential?: boolean;
    isAnsiClass?: boolean;
    isAutoClass?: boolean;
    isUnicodeClass?: boolean;
    isCOMObject?: boolean;
    isContextful?: boolean;
    isEnum?: boolean;
    isMarshalByRef?: boolean;
    isPrimitive?: boolean;
    isValueType?: boolean;
    isSignatureType?: boolean;
    isSecurityCritical?: boolean;
    isSecuritySafeCritical?: boolean;
    isSecurityTransparent?: boolean;
    structLayoutAttribute?: StructLayoutAttribute;
    typeInitializer?: ConstructorInfo;
    typeHandle?: RuntimeTypeHandle;
    guid?: string;
    baseType?: Type;
    isSerializable?: boolean;
    containsGenericParameters?: boolean;
    isVisible?: boolean;
}

export enum TypeAttributes {
    _0 = 0,
    _1 = 1,
    _2 = 2,
    _3 = 3,
    _4 = 4,
    _5 = 5,
    _6 = 6,
    _7 = 7,
    _8 = 8,
    _16 = 16,
    _24 = 24,
    _32 = 32,
    _128 = 128,
    _256 = 256,
    _1024 = 1024,
    _2048 = 2048,
    _4096 = 4096,
    _8192 = 8192,
    _16384 = 16384,
    _65536 = 65536,
    _131072 = 131072,
    _196608 = 196608,
    _262144 = 262144,
    _264192 = 264192,
    _1048576 = 1048576,
    _12582912 = 12582912,
}

export class TypeInfo implements ITypeInfo {
    readonly name?: string | undefined;
    readonly customAttributes?: CustomAttributeData[] | undefined;
    readonly isCollectible?: boolean;
    readonly metadataToken?: number;
    memberType?: MemberTypes;
    readonly namespace?: string | undefined;
    readonly assemblyQualifiedName?: string | undefined;
    readonly fullName?: string | undefined;
    assembly?: Assembly;
    module?: Module;
    readonly isInterface?: boolean;
    readonly isNested?: boolean;
    declaringType?: Type;
    declaringMethod?: MethodBase;
    reflectedType?: Type;
    underlyingSystemType?: Type;
    readonly isTypeDefinition?: boolean;
    readonly isArray?: boolean;
    readonly isByRef?: boolean;
    readonly isPointer?: boolean;
    readonly isConstructedGenericType?: boolean;
    readonly isGenericParameter?: boolean;
    readonly isGenericTypeParameter?: boolean;
    readonly isGenericMethodParameter?: boolean;
    readonly isGenericType?: boolean;
    readonly isGenericTypeDefinition?: boolean;
    readonly isSZArray?: boolean;
    readonly isVariableBoundArray?: boolean;
    readonly isByRefLike?: boolean;
    readonly isFunctionPointer?: boolean;
    readonly isUnmanagedFunctionPointer?: boolean;
    readonly hasElementType?: boolean;
    readonly genericTypeArguments?: Type[] | undefined;
    readonly genericParameterPosition?: number;
    genericParameterAttributes?: GenericParameterAttributes;
    attributes?: TypeAttributes;
    readonly isAbstract?: boolean;
    readonly isImport?: boolean;
    readonly isSealed?: boolean;
    readonly isSpecialName?: boolean;
    readonly isClass?: boolean;
    readonly isNestedAssembly?: boolean;
    readonly isNestedFamANDAssem?: boolean;
    readonly isNestedFamily?: boolean;
    readonly isNestedFamORAssem?: boolean;
    readonly isNestedPrivate?: boolean;
    readonly isNestedPublic?: boolean;
    readonly isNotPublic?: boolean;
    readonly isPublic?: boolean;
    readonly isAutoLayout?: boolean;
    readonly isExplicitLayout?: boolean;
    readonly isLayoutSequential?: boolean;
    readonly isAnsiClass?: boolean;
    readonly isAutoClass?: boolean;
    readonly isUnicodeClass?: boolean;
    readonly isCOMObject?: boolean;
    readonly isContextful?: boolean;
    readonly isEnum?: boolean;
    readonly isMarshalByRef?: boolean;
    readonly isPrimitive?: boolean;
    readonly isValueType?: boolean;
    readonly isSignatureType?: boolean;
    readonly isSecurityCritical?: boolean;
    readonly isSecuritySafeCritical?: boolean;
    readonly isSecurityTransparent?: boolean;
    structLayoutAttribute?: StructLayoutAttribute;
    typeInitializer?: ConstructorInfo;
    typeHandle?: RuntimeTypeHandle;
    readonly guid?: string;
    baseType?: Type;
    readonly isSerializable?: boolean;
    readonly containsGenericParameters?: boolean;
    readonly isVisible?: boolean;
    readonly genericTypeParameters?: Type[] | undefined;
    readonly declaredConstructors?: ConstructorInfo[] | undefined;
    readonly declaredEvents?: EventInfo[] | undefined;
    readonly declaredFields?: FieldInfo[] | undefined;
    readonly declaredMembers?: MemberInfo[] | undefined;
    readonly declaredMethods?: MethodInfo[] | undefined;
    readonly declaredNestedTypes?: TypeInfo[] | undefined;
    readonly declaredProperties?: PropertyInfo[] | undefined;
    readonly implementedInterfaces?: Type[] | undefined;

    constructor(data?: ITypeInfo) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).name = _data["name"];
            if (Array.isArray(_data["customAttributes"])) {
                (<any>this).customAttributes = [] as any;
                for (let item of _data["customAttributes"])
                    (<any>this).customAttributes!.push(CustomAttributeData.fromJS(item));
            }
            (<any>this).isCollectible = _data["isCollectible"];
            (<any>this).metadataToken = _data["metadataToken"];
            this.memberType = _data["memberType"];
            (<any>this).namespace = _data["namespace"];
            (<any>this).assemblyQualifiedName = _data["assemblyQualifiedName"];
            (<any>this).fullName = _data["fullName"];
            this.assembly = _data["assembly"] ? Assembly.fromJS(_data["assembly"]) : <any>undefined;
            this.module = _data["module"] ? Module.fromJS(_data["module"]) : <any>undefined;
            (<any>this).isInterface = _data["isInterface"];
            (<any>this).isNested = _data["isNested"];
            this.declaringType = _data["declaringType"] ? Type.fromJS(_data["declaringType"]) : <any>undefined;
            this.declaringMethod = _data["declaringMethod"] ? MethodBase.fromJS(_data["declaringMethod"]) : <any>undefined;
            this.reflectedType = _data["reflectedType"] ? Type.fromJS(_data["reflectedType"]) : <any>undefined;
            this.underlyingSystemType = _data["underlyingSystemType"] ? Type.fromJS(_data["underlyingSystemType"]) : <any>undefined;
            (<any>this).isTypeDefinition = _data["isTypeDefinition"];
            (<any>this).isArray = _data["isArray"];
            (<any>this).isByRef = _data["isByRef"];
            (<any>this).isPointer = _data["isPointer"];
            (<any>this).isConstructedGenericType = _data["isConstructedGenericType"];
            (<any>this).isGenericParameter = _data["isGenericParameter"];
            (<any>this).isGenericTypeParameter = _data["isGenericTypeParameter"];
            (<any>this).isGenericMethodParameter = _data["isGenericMethodParameter"];
            (<any>this).isGenericType = _data["isGenericType"];
            (<any>this).isGenericTypeDefinition = _data["isGenericTypeDefinition"];
            (<any>this).isSZArray = _data["isSZArray"];
            (<any>this).isVariableBoundArray = _data["isVariableBoundArray"];
            (<any>this).isByRefLike = _data["isByRefLike"];
            (<any>this).isFunctionPointer = _data["isFunctionPointer"];
            (<any>this).isUnmanagedFunctionPointer = _data["isUnmanagedFunctionPointer"];
            (<any>this).hasElementType = _data["hasElementType"];
            if (Array.isArray(_data["genericTypeArguments"])) {
                (<any>this).genericTypeArguments = [] as any;
                for (let item of _data["genericTypeArguments"])
                    (<any>this).genericTypeArguments!.push(Type.fromJS(item));
            }
            (<any>this).genericParameterPosition = _data["genericParameterPosition"];
            this.genericParameterAttributes = _data["genericParameterAttributes"];
            this.attributes = _data["attributes"];
            (<any>this).isAbstract = _data["isAbstract"];
            (<any>this).isImport = _data["isImport"];
            (<any>this).isSealed = _data["isSealed"];
            (<any>this).isSpecialName = _data["isSpecialName"];
            (<any>this).isClass = _data["isClass"];
            (<any>this).isNestedAssembly = _data["isNestedAssembly"];
            (<any>this).isNestedFamANDAssem = _data["isNestedFamANDAssem"];
            (<any>this).isNestedFamily = _data["isNestedFamily"];
            (<any>this).isNestedFamORAssem = _data["isNestedFamORAssem"];
            (<any>this).isNestedPrivate = _data["isNestedPrivate"];
            (<any>this).isNestedPublic = _data["isNestedPublic"];
            (<any>this).isNotPublic = _data["isNotPublic"];
            (<any>this).isPublic = _data["isPublic"];
            (<any>this).isAutoLayout = _data["isAutoLayout"];
            (<any>this).isExplicitLayout = _data["isExplicitLayout"];
            (<any>this).isLayoutSequential = _data["isLayoutSequential"];
            (<any>this).isAnsiClass = _data["isAnsiClass"];
            (<any>this).isAutoClass = _data["isAutoClass"];
            (<any>this).isUnicodeClass = _data["isUnicodeClass"];
            (<any>this).isCOMObject = _data["isCOMObject"];
            (<any>this).isContextful = _data["isContextful"];
            (<any>this).isEnum = _data["isEnum"];
            (<any>this).isMarshalByRef = _data["isMarshalByRef"];
            (<any>this).isPrimitive = _data["isPrimitive"];
            (<any>this).isValueType = _data["isValueType"];
            (<any>this).isSignatureType = _data["isSignatureType"];
            (<any>this).isSecurityCritical = _data["isSecurityCritical"];
            (<any>this).isSecuritySafeCritical = _data["isSecuritySafeCritical"];
            (<any>this).isSecurityTransparent = _data["isSecurityTransparent"];
            this.structLayoutAttribute = _data["structLayoutAttribute"] ? StructLayoutAttribute.fromJS(_data["structLayoutAttribute"]) : <any>undefined;
            this.typeInitializer = _data["typeInitializer"] ? ConstructorInfo.fromJS(_data["typeInitializer"]) : <any>undefined;
            this.typeHandle = _data["typeHandle"] ? RuntimeTypeHandle.fromJS(_data["typeHandle"]) : <any>undefined;
            (<any>this).guid = _data["guid"];
            this.baseType = _data["baseType"] ? Type.fromJS(_data["baseType"]) : <any>undefined;
            (<any>this).isSerializable = _data["isSerializable"];
            (<any>this).containsGenericParameters = _data["containsGenericParameters"];
            (<any>this).isVisible = _data["isVisible"];
            if (Array.isArray(_data["genericTypeParameters"])) {
                (<any>this).genericTypeParameters = [] as any;
                for (let item of _data["genericTypeParameters"])
                    (<any>this).genericTypeParameters!.push(Type.fromJS(item));
            }
            if (Array.isArray(_data["declaredConstructors"])) {
                (<any>this).declaredConstructors = [] as any;
                for (let item of _data["declaredConstructors"])
                    (<any>this).declaredConstructors!.push(ConstructorInfo.fromJS(item));
            }
            if (Array.isArray(_data["declaredEvents"])) {
                (<any>this).declaredEvents = [] as any;
                for (let item of _data["declaredEvents"])
                    (<any>this).declaredEvents!.push(EventInfo.fromJS(item));
            }
            if (Array.isArray(_data["declaredFields"])) {
                (<any>this).declaredFields = [] as any;
                for (let item of _data["declaredFields"])
                    (<any>this).declaredFields!.push(FieldInfo.fromJS(item));
            }
            if (Array.isArray(_data["declaredMembers"])) {
                (<any>this).declaredMembers = [] as any;
                for (let item of _data["declaredMembers"])
                    (<any>this).declaredMembers!.push(MemberInfo.fromJS(item));
            }
            if (Array.isArray(_data["declaredMethods"])) {
                (<any>this).declaredMethods = [] as any;
                for (let item of _data["declaredMethods"])
                    (<any>this).declaredMethods!.push(MethodInfo.fromJS(item));
            }
            if (Array.isArray(_data["declaredNestedTypes"])) {
                (<any>this).declaredNestedTypes = [] as any;
                for (let item of _data["declaredNestedTypes"])
                    (<any>this).declaredNestedTypes!.push(TypeInfo.fromJS(item));
            }
            if (Array.isArray(_data["declaredProperties"])) {
                (<any>this).declaredProperties = [] as any;
                for (let item of _data["declaredProperties"])
                    (<any>this).declaredProperties!.push(PropertyInfo.fromJS(item));
            }
            if (Array.isArray(_data["implementedInterfaces"])) {
                (<any>this).implementedInterfaces = [] as any;
                for (let item of _data["implementedInterfaces"])
                    (<any>this).implementedInterfaces!.push(Type.fromJS(item));
            }
        }
    }

    static fromJS(data: any): TypeInfo {
        data = typeof data === 'object' ? data : {};
        let result = new TypeInfo();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["name"] = this.name;
        if (Array.isArray(this.customAttributes)) {
            data["customAttributes"] = [];
            for (let item of this.customAttributes)
                data["customAttributes"].push(item ? item.toJSON() : <any>undefined);
        }
        data["isCollectible"] = this.isCollectible;
        data["metadataToken"] = this.metadataToken;
        data["memberType"] = this.memberType;
        data["namespace"] = this.namespace;
        data["assemblyQualifiedName"] = this.assemblyQualifiedName;
        data["fullName"] = this.fullName;
        data["assembly"] = this.assembly ? this.assembly.toJSON() : <any>undefined;
        data["module"] = this.module ? this.module.toJSON() : <any>undefined;
        data["isInterface"] = this.isInterface;
        data["isNested"] = this.isNested;
        data["declaringType"] = this.declaringType ? this.declaringType.toJSON() : <any>undefined;
        data["declaringMethod"] = this.declaringMethod ? this.declaringMethod.toJSON() : <any>undefined;
        data["reflectedType"] = this.reflectedType ? this.reflectedType.toJSON() : <any>undefined;
        data["underlyingSystemType"] = this.underlyingSystemType ? this.underlyingSystemType.toJSON() : <any>undefined;
        data["isTypeDefinition"] = this.isTypeDefinition;
        data["isArray"] = this.isArray;
        data["isByRef"] = this.isByRef;
        data["isPointer"] = this.isPointer;
        data["isConstructedGenericType"] = this.isConstructedGenericType;
        data["isGenericParameter"] = this.isGenericParameter;
        data["isGenericTypeParameter"] = this.isGenericTypeParameter;
        data["isGenericMethodParameter"] = this.isGenericMethodParameter;
        data["isGenericType"] = this.isGenericType;
        data["isGenericTypeDefinition"] = this.isGenericTypeDefinition;
        data["isSZArray"] = this.isSZArray;
        data["isVariableBoundArray"] = this.isVariableBoundArray;
        data["isByRefLike"] = this.isByRefLike;
        data["isFunctionPointer"] = this.isFunctionPointer;
        data["isUnmanagedFunctionPointer"] = this.isUnmanagedFunctionPointer;
        data["hasElementType"] = this.hasElementType;
        if (Array.isArray(this.genericTypeArguments)) {
            data["genericTypeArguments"] = [];
            for (let item of this.genericTypeArguments)
                data["genericTypeArguments"].push(item ? item.toJSON() : <any>undefined);
        }
        data["genericParameterPosition"] = this.genericParameterPosition;
        data["genericParameterAttributes"] = this.genericParameterAttributes;
        data["attributes"] = this.attributes;
        data["isAbstract"] = this.isAbstract;
        data["isImport"] = this.isImport;
        data["isSealed"] = this.isSealed;
        data["isSpecialName"] = this.isSpecialName;
        data["isClass"] = this.isClass;
        data["isNestedAssembly"] = this.isNestedAssembly;
        data["isNestedFamANDAssem"] = this.isNestedFamANDAssem;
        data["isNestedFamily"] = this.isNestedFamily;
        data["isNestedFamORAssem"] = this.isNestedFamORAssem;
        data["isNestedPrivate"] = this.isNestedPrivate;
        data["isNestedPublic"] = this.isNestedPublic;
        data["isNotPublic"] = this.isNotPublic;
        data["isPublic"] = this.isPublic;
        data["isAutoLayout"] = this.isAutoLayout;
        data["isExplicitLayout"] = this.isExplicitLayout;
        data["isLayoutSequential"] = this.isLayoutSequential;
        data["isAnsiClass"] = this.isAnsiClass;
        data["isAutoClass"] = this.isAutoClass;
        data["isUnicodeClass"] = this.isUnicodeClass;
        data["isCOMObject"] = this.isCOMObject;
        data["isContextful"] = this.isContextful;
        data["isEnum"] = this.isEnum;
        data["isMarshalByRef"] = this.isMarshalByRef;
        data["isPrimitive"] = this.isPrimitive;
        data["isValueType"] = this.isValueType;
        data["isSignatureType"] = this.isSignatureType;
        data["isSecurityCritical"] = this.isSecurityCritical;
        data["isSecuritySafeCritical"] = this.isSecuritySafeCritical;
        data["isSecurityTransparent"] = this.isSecurityTransparent;
        data["structLayoutAttribute"] = this.structLayoutAttribute ? this.structLayoutAttribute.toJSON() : <any>undefined;
        data["typeInitializer"] = this.typeInitializer ? this.typeInitializer.toJSON() : <any>undefined;
        data["typeHandle"] = this.typeHandle ? this.typeHandle.toJSON() : <any>undefined;
        data["guid"] = this.guid;
        data["baseType"] = this.baseType ? this.baseType.toJSON() : <any>undefined;
        data["isSerializable"] = this.isSerializable;
        data["containsGenericParameters"] = this.containsGenericParameters;
        data["isVisible"] = this.isVisible;
        if (Array.isArray(this.genericTypeParameters)) {
            data["genericTypeParameters"] = [];
            for (let item of this.genericTypeParameters)
                data["genericTypeParameters"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.declaredConstructors)) {
            data["declaredConstructors"] = [];
            for (let item of this.declaredConstructors)
                data["declaredConstructors"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.declaredEvents)) {
            data["declaredEvents"] = [];
            for (let item of this.declaredEvents)
                data["declaredEvents"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.declaredFields)) {
            data["declaredFields"] = [];
            for (let item of this.declaredFields)
                data["declaredFields"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.declaredMembers)) {
            data["declaredMembers"] = [];
            for (let item of this.declaredMembers)
                data["declaredMembers"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.declaredMethods)) {
            data["declaredMethods"] = [];
            for (let item of this.declaredMethods)
                data["declaredMethods"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.declaredNestedTypes)) {
            data["declaredNestedTypes"] = [];
            for (let item of this.declaredNestedTypes)
                data["declaredNestedTypes"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.declaredProperties)) {
            data["declaredProperties"] = [];
            for (let item of this.declaredProperties)
                data["declaredProperties"].push(item ? item.toJSON() : <any>undefined);
        }
        if (Array.isArray(this.implementedInterfaces)) {
            data["implementedInterfaces"] = [];
            for (let item of this.implementedInterfaces)
                data["implementedInterfaces"].push(item ? item.toJSON() : <any>undefined);
        }
        return data;
    }
}

export interface ITypeInfo {
    name?: string | undefined;
    customAttributes?: CustomAttributeData[] | undefined;
    isCollectible?: boolean;
    metadataToken?: number;
    memberType?: MemberTypes;
    namespace?: string | undefined;
    assemblyQualifiedName?: string | undefined;
    fullName?: string | undefined;
    assembly?: Assembly;
    module?: Module;
    isInterface?: boolean;
    isNested?: boolean;
    declaringType?: Type;
    declaringMethod?: MethodBase;
    reflectedType?: Type;
    underlyingSystemType?: Type;
    isTypeDefinition?: boolean;
    isArray?: boolean;
    isByRef?: boolean;
    isPointer?: boolean;
    isConstructedGenericType?: boolean;
    isGenericParameter?: boolean;
    isGenericTypeParameter?: boolean;
    isGenericMethodParameter?: boolean;
    isGenericType?: boolean;
    isGenericTypeDefinition?: boolean;
    isSZArray?: boolean;
    isVariableBoundArray?: boolean;
    isByRefLike?: boolean;
    isFunctionPointer?: boolean;
    isUnmanagedFunctionPointer?: boolean;
    hasElementType?: boolean;
    genericTypeArguments?: Type[] | undefined;
    genericParameterPosition?: number;
    genericParameterAttributes?: GenericParameterAttributes;
    attributes?: TypeAttributes;
    isAbstract?: boolean;
    isImport?: boolean;
    isSealed?: boolean;
    isSpecialName?: boolean;
    isClass?: boolean;
    isNestedAssembly?: boolean;
    isNestedFamANDAssem?: boolean;
    isNestedFamily?: boolean;
    isNestedFamORAssem?: boolean;
    isNestedPrivate?: boolean;
    isNestedPublic?: boolean;
    isNotPublic?: boolean;
    isPublic?: boolean;
    isAutoLayout?: boolean;
    isExplicitLayout?: boolean;
    isLayoutSequential?: boolean;
    isAnsiClass?: boolean;
    isAutoClass?: boolean;
    isUnicodeClass?: boolean;
    isCOMObject?: boolean;
    isContextful?: boolean;
    isEnum?: boolean;
    isMarshalByRef?: boolean;
    isPrimitive?: boolean;
    isValueType?: boolean;
    isSignatureType?: boolean;
    isSecurityCritical?: boolean;
    isSecuritySafeCritical?: boolean;
    isSecurityTransparent?: boolean;
    structLayoutAttribute?: StructLayoutAttribute;
    typeInitializer?: ConstructorInfo;
    typeHandle?: RuntimeTypeHandle;
    guid?: string;
    baseType?: Type;
    isSerializable?: boolean;
    containsGenericParameters?: boolean;
    isVisible?: boolean;
    genericTypeParameters?: Type[] | undefined;
    declaredConstructors?: ConstructorInfo[] | undefined;
    declaredEvents?: EventInfo[] | undefined;
    declaredFields?: FieldInfo[] | undefined;
    declaredMembers?: MemberInfo[] | undefined;
    declaredMethods?: MethodInfo[] | undefined;
    declaredNestedTypes?: TypeInfo[] | undefined;
    declaredProperties?: PropertyInfo[] | undefined;
    implementedInterfaces?: Type[] | undefined;
}

export class TypeObjectKeyValuePair implements ITypeObjectKeyValuePair {
    key?: Type;
    value?: any | undefined;

    constructor(data?: ITypeObjectKeyValuePair) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.key = _data["key"] ? Type.fromJS(_data["key"]) : <any>undefined;
            this.value = _data["value"];
        }
    }

    static fromJS(data: any): TypeObjectKeyValuePair {
        data = typeof data === 'object' ? data : {};
        let result = new TypeObjectKeyValuePair();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["key"] = this.key ? this.key.toJSON() : <any>undefined;
        data["value"] = this.value;
        return data;
    }
}

export interface ITypeObjectKeyValuePair {
    key?: Type;
    value?: any | undefined;
}

export class WaitHandle implements IWaitHandle {
    handle?: IntPtr;
    safeWaitHandle?: SafeWaitHandle;

    constructor(data?: IWaitHandle) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.handle = _data["handle"] ? IntPtr.fromJS(_data["handle"]) : <any>undefined;
            this.safeWaitHandle = _data["safeWaitHandle"] ? SafeWaitHandle.fromJS(_data["safeWaitHandle"]) : <any>undefined;
        }
    }

    static fromJS(data: any): WaitHandle {
        data = typeof data === 'object' ? data : {};
        let result = new WaitHandle();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["handle"] = this.handle ? this.handle.toJSON() : <any>undefined;
        data["safeWaitHandle"] = this.safeWaitHandle ? this.safeWaitHandle.toJSON() : <any>undefined;
        return data;
    }
}

export interface IWaitHandle {
    handle?: IntPtr;
    safeWaitHandle?: SafeWaitHandle;
}

export class WebSocketManager implements IWebSocketManager {
    readonly isWebSocketRequest?: boolean;
    readonly webSocketRequestedProtocols?: string[] | undefined;

    constructor(data?: IWebSocketManager) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            (<any>this).isWebSocketRequest = _data["isWebSocketRequest"];
            if (Array.isArray(_data["webSocketRequestedProtocols"])) {
                (<any>this).webSocketRequestedProtocols = [] as any;
                for (let item of _data["webSocketRequestedProtocols"])
                    (<any>this).webSocketRequestedProtocols!.push(item);
            }
        }
    }

    static fromJS(data: any): WebSocketManager {
        data = typeof data === 'object' ? data : {};
        let result = new WebSocketManager();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["isWebSocketRequest"] = this.isWebSocketRequest;
        if (Array.isArray(this.webSocketRequestedProtocols)) {
            data["webSocketRequestedProtocols"] = [];
            for (let item of this.webSocketRequestedProtocols)
                data["webSocketRequestedProtocols"].push(item);
        }
        return data;
    }
}

export interface IWebSocketManager {
    isWebSocketRequest?: boolean;
    webSocketRequestedProtocols?: string[] | undefined;
}

export class X500DistinguishedName implements IX500DistinguishedName {
    oid?: Oid;
    rawData?: string | undefined;
    readonly name?: string | undefined;

    constructor(data?: IX500DistinguishedName) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.oid = _data["oid"] ? Oid.fromJS(_data["oid"]) : <any>undefined;
            this.rawData = _data["rawData"];
            (<any>this).name = _data["name"];
        }
    }

    static fromJS(data: any): X500DistinguishedName {
        data = typeof data === 'object' ? data : {};
        let result = new X500DistinguishedName();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["oid"] = this.oid ? this.oid.toJSON() : <any>undefined;
        data["rawData"] = this.rawData;
        data["name"] = this.name;
        return data;
    }
}

export interface IX500DistinguishedName {
    oid?: Oid;
    rawData?: string | undefined;
    name?: string | undefined;
}

export class X509Certificate2 implements IX509Certificate2 {
    handle?: IntPtr;
    readonly issuer?: string | undefined;
    readonly subject?: string | undefined;
    serialNumberBytes?: ByteReadOnlyMemory;
    archived?: boolean;
    readonly extensions?: X509Extension[] | undefined;
    friendlyName?: string | undefined;
    readonly hasPrivateKey?: boolean;
    privateKey?: AsymmetricAlgorithm;
    issuerName?: X500DistinguishedName;
    readonly notAfter?: Date;
    readonly notBefore?: Date;
    publicKey?: PublicKey;
    readonly rawData?: string | undefined;
    rawDataMemory?: ByteReadOnlyMemory;
    readonly serialNumber?: string | undefined;
    signatureAlgorithm?: Oid;
    subjectName?: X500DistinguishedName;
    readonly thumbprint?: string | undefined;
    readonly version?: number;

    constructor(data?: IX509Certificate2) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.handle = _data["handle"] ? IntPtr.fromJS(_data["handle"]) : <any>undefined;
            (<any>this).issuer = _data["issuer"];
            (<any>this).subject = _data["subject"];
            this.serialNumberBytes = _data["serialNumberBytes"] ? ByteReadOnlyMemory.fromJS(_data["serialNumberBytes"]) : <any>undefined;
            this.archived = _data["archived"];
            if (Array.isArray(_data["extensions"])) {
                (<any>this).extensions = [] as any;
                for (let item of _data["extensions"])
                    (<any>this).extensions!.push(X509Extension.fromJS(item));
            }
            this.friendlyName = _data["friendlyName"];
            (<any>this).hasPrivateKey = _data["hasPrivateKey"];
            this.privateKey = _data["privateKey"] ? AsymmetricAlgorithm.fromJS(_data["privateKey"]) : <any>undefined;
            this.issuerName = _data["issuerName"] ? X500DistinguishedName.fromJS(_data["issuerName"]) : <any>undefined;
            (<any>this).notAfter = _data["notAfter"] ? new Date(_data["notAfter"].toString()) : <any>undefined;
            (<any>this).notBefore = _data["notBefore"] ? new Date(_data["notBefore"].toString()) : <any>undefined;
            this.publicKey = _data["publicKey"] ? PublicKey.fromJS(_data["publicKey"]) : <any>undefined;
            (<any>this).rawData = _data["rawData"];
            this.rawDataMemory = _data["rawDataMemory"] ? ByteReadOnlyMemory.fromJS(_data["rawDataMemory"]) : <any>undefined;
            (<any>this).serialNumber = _data["serialNumber"];
            this.signatureAlgorithm = _data["signatureAlgorithm"] ? Oid.fromJS(_data["signatureAlgorithm"]) : <any>undefined;
            this.subjectName = _data["subjectName"] ? X500DistinguishedName.fromJS(_data["subjectName"]) : <any>undefined;
            (<any>this).thumbprint = _data["thumbprint"];
            (<any>this).version = _data["version"];
        }
    }

    static fromJS(data: any): X509Certificate2 {
        data = typeof data === 'object' ? data : {};
        let result = new X509Certificate2();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["handle"] = this.handle ? this.handle.toJSON() : <any>undefined;
        data["issuer"] = this.issuer;
        data["subject"] = this.subject;
        data["serialNumberBytes"] = this.serialNumberBytes ? this.serialNumberBytes.toJSON() : <any>undefined;
        data["archived"] = this.archived;
        if (Array.isArray(this.extensions)) {
            data["extensions"] = [];
            for (let item of this.extensions)
                data["extensions"].push(item ? item.toJSON() : <any>undefined);
        }
        data["friendlyName"] = this.friendlyName;
        data["hasPrivateKey"] = this.hasPrivateKey;
        data["privateKey"] = this.privateKey ? this.privateKey.toJSON() : <any>undefined;
        data["issuerName"] = this.issuerName ? this.issuerName.toJSON() : <any>undefined;
        data["notAfter"] = this.notAfter ? this.notAfter.toISOString() : <any>undefined;
        data["notBefore"] = this.notBefore ? this.notBefore.toISOString() : <any>undefined;
        data["publicKey"] = this.publicKey ? this.publicKey.toJSON() : <any>undefined;
        data["rawData"] = this.rawData;
        data["rawDataMemory"] = this.rawDataMemory ? this.rawDataMemory.toJSON() : <any>undefined;
        data["serialNumber"] = this.serialNumber;
        data["signatureAlgorithm"] = this.signatureAlgorithm ? this.signatureAlgorithm.toJSON() : <any>undefined;
        data["subjectName"] = this.subjectName ? this.subjectName.toJSON() : <any>undefined;
        data["thumbprint"] = this.thumbprint;
        data["version"] = this.version;
        return data;
    }
}

export interface IX509Certificate2 {
    handle?: IntPtr;
    issuer?: string | undefined;
    subject?: string | undefined;
    serialNumberBytes?: ByteReadOnlyMemory;
    archived?: boolean;
    extensions?: X509Extension[] | undefined;
    friendlyName?: string | undefined;
    hasPrivateKey?: boolean;
    privateKey?: AsymmetricAlgorithm;
    issuerName?: X500DistinguishedName;
    notAfter?: Date;
    notBefore?: Date;
    publicKey?: PublicKey;
    rawData?: string | undefined;
    rawDataMemory?: ByteReadOnlyMemory;
    serialNumber?: string | undefined;
    signatureAlgorithm?: Oid;
    subjectName?: X500DistinguishedName;
    thumbprint?: string | undefined;
    version?: number;
}

export class X509Extension implements IX509Extension {
    oid?: Oid;
    rawData?: string | undefined;
    critical?: boolean;

    constructor(data?: IX509Extension) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.oid = _data["oid"] ? Oid.fromJS(_data["oid"]) : <any>undefined;
            this.rawData = _data["rawData"];
            this.critical = _data["critical"];
        }
    }

    static fromJS(data: any): X509Extension {
        data = typeof data === 'object' ? data : {};
        let result = new X509Extension();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["oid"] = this.oid ? this.oid.toJSON() : <any>undefined;
        data["rawData"] = this.rawData;
        data["critical"] = this.critical;
        return data;
    }
}

export interface IX509Extension {
    oid?: Oid;
    rawData?: string | undefined;
    critical?: boolean;
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}